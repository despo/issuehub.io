/* Generated by Cython 0.29.13 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__spacy__morphology
#define __PYX_HAVE_API__spacy__morphology
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <set>
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "morphology.pyx",
  "morphology.pxd",
  "__init__.pxd",
  "lexeme.pxd",
  "cymem.pxd",
  "maps.pxd",
  "strings.pxd",
  "vocab.pxd",
  "type.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "preshed/maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/* "typedefs.pxd":5
 * 
 * 
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef char* utf8_t
 * ctypedef uint64_t attr_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_hash_t;

/* "typedefs.pxd":7
 * ctypedef uint64_t hash_t
 * ctypedef char* utf8_t
 * ctypedef uint64_t attr_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_attr_t;

/* "typedefs.pxd":8
 * ctypedef char* utf8_t
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_flags_t;

/* "typedefs.pxd":9
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t tag_t
 */
typedef uint16_t __pyx_t_5spacy_8typedefs_len_t;

/* "typedefs.pxd":10
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t             # <<<<<<<<<<<<<<
 */
typedef uint16_t __pyx_t_5spacy_8typedefs_tag_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_PyMalloc;
struct __pyx_obj_5cymem_5cymem_PyFree;
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_5spacy_7strings_StringStore;
struct __pyx_obj_5spacy_5vocab_Vocab;
struct __pyx_obj_5spacy_6lexeme_Lexeme;
struct __pyx_obj_5spacy_10morphology_Morphology;

/* "cymem/cymem.pxd":1
 * ctypedef void* (*malloc_t)(size_t n)             # <<<<<<<<<<<<<<
 * ctypedef void (*free_t)(void *p)
 * 
 */
typedef void *(*__pyx_t_5cymem_5cymem_malloc_t)(size_t);

/* "cymem/cymem.pxd":2
 * ctypedef void* (*malloc_t)(size_t n)
 * ctypedef void (*free_t)(void *p)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyMalloc:
 */
typedef void (*__pyx_t_5cymem_5cymem_free_t)(void *);
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_Result;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "preshed/maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "preshed/maps.pxd":13
 * 
 * 
 * cdef struct Result:             # <<<<<<<<<<<<<<
 *     int found
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Result {
  int found;
  void *value;
};

/* "preshed/maps.pxd":18
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
 */
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};

/* "typedefs.pxd":6
 * 
 * ctypedef uint64_t hash_t
 * ctypedef char* utf8_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
 */
typedef char *__pyx_t_5spacy_8typedefs_utf8_t;

/* "symbols.pxd":1
 * cdef enum symbol_t:             # <<<<<<<<<<<<<<
 *     NIL
 *     IS_ALPHA
 */
enum __pyx_t_5spacy_7symbols_symbol_t {
  __pyx_e_5spacy_7symbols_NIL,
  __pyx_e_5spacy_7symbols_IS_ALPHA,
  __pyx_e_5spacy_7symbols_IS_ASCII,
  __pyx_e_5spacy_7symbols_IS_DIGIT,
  __pyx_e_5spacy_7symbols_IS_LOWER,
  __pyx_e_5spacy_7symbols_IS_PUNCT,
  __pyx_e_5spacy_7symbols_IS_SPACE,
  __pyx_e_5spacy_7symbols_IS_TITLE,
  __pyx_e_5spacy_7symbols_IS_UPPER,
  __pyx_e_5spacy_7symbols_LIKE_URL,
  __pyx_e_5spacy_7symbols_LIKE_NUM,
  __pyx_e_5spacy_7symbols_LIKE_EMAIL,
  __pyx_e_5spacy_7symbols_IS_STOP,
  __pyx_e_5spacy_7symbols_IS_OOV,
  __pyx_e_5spacy_7symbols_IS_BRACKET,
  __pyx_e_5spacy_7symbols_IS_QUOTE,
  __pyx_e_5spacy_7symbols_IS_LEFT_PUNCT,
  __pyx_e_5spacy_7symbols_IS_RIGHT_PUNCT,
  __pyx_e_5spacy_7symbols_IS_CURRENCY,
  __pyx_e_5spacy_7symbols_FLAG19 = 19,
  __pyx_e_5spacy_7symbols_FLAG20,
  __pyx_e_5spacy_7symbols_FLAG21,
  __pyx_e_5spacy_7symbols_FLAG22,
  __pyx_e_5spacy_7symbols_FLAG23,
  __pyx_e_5spacy_7symbols_FLAG24,
  __pyx_e_5spacy_7symbols_FLAG25,
  __pyx_e_5spacy_7symbols_FLAG26,
  __pyx_e_5spacy_7symbols_FLAG27,
  __pyx_e_5spacy_7symbols_FLAG28,
  __pyx_e_5spacy_7symbols_FLAG29,
  __pyx_e_5spacy_7symbols_FLAG30,
  __pyx_e_5spacy_7symbols_FLAG31,
  __pyx_e_5spacy_7symbols_FLAG32,
  __pyx_e_5spacy_7symbols_FLAG33,
  __pyx_e_5spacy_7symbols_FLAG34,
  __pyx_e_5spacy_7symbols_FLAG35,
  __pyx_e_5spacy_7symbols_FLAG36,
  __pyx_e_5spacy_7symbols_FLAG37,
  __pyx_e_5spacy_7symbols_FLAG38,
  __pyx_e_5spacy_7symbols_FLAG39,
  __pyx_e_5spacy_7symbols_FLAG40,
  __pyx_e_5spacy_7symbols_FLAG41,
  __pyx_e_5spacy_7symbols_FLAG42,
  __pyx_e_5spacy_7symbols_FLAG43,
  __pyx_e_5spacy_7symbols_FLAG44,
  __pyx_e_5spacy_7symbols_FLAG45,
  __pyx_e_5spacy_7symbols_FLAG46,
  __pyx_e_5spacy_7symbols_FLAG47,
  __pyx_e_5spacy_7symbols_FLAG48,
  __pyx_e_5spacy_7symbols_FLAG49,
  __pyx_e_5spacy_7symbols_FLAG50,
  __pyx_e_5spacy_7symbols_FLAG51,
  __pyx_e_5spacy_7symbols_FLAG52,
  __pyx_e_5spacy_7symbols_FLAG53,
  __pyx_e_5spacy_7symbols_FLAG54,
  __pyx_e_5spacy_7symbols_FLAG55,
  __pyx_e_5spacy_7symbols_FLAG56,
  __pyx_e_5spacy_7symbols_FLAG57,
  __pyx_e_5spacy_7symbols_FLAG58,
  __pyx_e_5spacy_7symbols_FLAG59,
  __pyx_e_5spacy_7symbols_FLAG60,
  __pyx_e_5spacy_7symbols_FLAG61,
  __pyx_e_5spacy_7symbols_FLAG62,
  __pyx_e_5spacy_7symbols_FLAG63,
  __pyx_e_5spacy_7symbols_ID,
  __pyx_e_5spacy_7symbols_ORTH,
  __pyx_e_5spacy_7symbols_LOWER,
  __pyx_e_5spacy_7symbols_NORM,
  __pyx_e_5spacy_7symbols_SHAPE,
  __pyx_e_5spacy_7symbols_PREFIX,
  __pyx_e_5spacy_7symbols_SUFFIX,
  __pyx_e_5spacy_7symbols_LENGTH,
  __pyx_e_5spacy_7symbols_CLUSTER,
  __pyx_e_5spacy_7symbols_LEMMA,
  __pyx_e_5spacy_7symbols_POS,
  __pyx_e_5spacy_7symbols_TAG,
  __pyx_e_5spacy_7symbols_DEP,
  __pyx_e_5spacy_7symbols_ENT_IOB,
  __pyx_e_5spacy_7symbols_ENT_TYPE,
  __pyx_e_5spacy_7symbols_HEAD,
  __pyx_e_5spacy_7symbols_SENT_START,
  __pyx_e_5spacy_7symbols_SPACY,
  __pyx_e_5spacy_7symbols_PROB,
  __pyx_e_5spacy_7symbols_LANG,
  __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_7symbols_ADP,
  __pyx_e_5spacy_7symbols_ADV,
  __pyx_e_5spacy_7symbols_AUX,
  __pyx_e_5spacy_7symbols_CONJ,
  __pyx_e_5spacy_7symbols_CCONJ,
  __pyx_e_5spacy_7symbols_DET,
  __pyx_e_5spacy_7symbols_INTJ,
  __pyx_e_5spacy_7symbols_NOUN,
  __pyx_e_5spacy_7symbols_NUM,
  __pyx_e_5spacy_7symbols_PART,
  __pyx_e_5spacy_7symbols_PRON,
  __pyx_e_5spacy_7symbols_PROPN,
  __pyx_e_5spacy_7symbols_PUNCT,
  __pyx_e_5spacy_7symbols_SCONJ,
  __pyx_e_5spacy_7symbols_SYM,
  __pyx_e_5spacy_7symbols_VERB,
  __pyx_e_5spacy_7symbols_X,
  __pyx_e_5spacy_7symbols_EOL,
  __pyx_e_5spacy_7symbols_SPACE,
  __pyx_e_5spacy_7symbols_Animacy_anim,
  __pyx_e_5spacy_7symbols_Animacy_inan,
  __pyx_e_5spacy_7symbols_Animacy_hum,
  __pyx_e_5spacy_7symbols_Animacy_nhum,
  __pyx_e_5spacy_7symbols_Aspect_freq,
  __pyx_e_5spacy_7symbols_Aspect_imp,
  __pyx_e_5spacy_7symbols_Aspect_mod,
  __pyx_e_5spacy_7symbols_Aspect_none,
  __pyx_e_5spacy_7symbols_Aspect_perf,
  __pyx_e_5spacy_7symbols_Aspect_iter,
  __pyx_e_5spacy_7symbols_Aspect_hab,
  __pyx_e_5spacy_7symbols_Case_abe,
  __pyx_e_5spacy_7symbols_Case_abl,
  __pyx_e_5spacy_7symbols_Case_abs,
  __pyx_e_5spacy_7symbols_Case_acc,
  __pyx_e_5spacy_7symbols_Case_ade,
  __pyx_e_5spacy_7symbols_Case_all,
  __pyx_e_5spacy_7symbols_Case_cau,
  __pyx_e_5spacy_7symbols_Case_com,
  __pyx_e_5spacy_7symbols_Case_cmp,
  __pyx_e_5spacy_7symbols_Case_dat,
  __pyx_e_5spacy_7symbols_Case_del,
  __pyx_e_5spacy_7symbols_Case_dis,
  __pyx_e_5spacy_7symbols_Case_ela,
  __pyx_e_5spacy_7symbols_Case_equ,
  __pyx_e_5spacy_7symbols_Case_ess,
  __pyx_e_5spacy_7symbols_Case_gen,
  __pyx_e_5spacy_7symbols_Case_ill,
  __pyx_e_5spacy_7symbols_Case_ine,
  __pyx_e_5spacy_7symbols_Case_ins,
  __pyx_e_5spacy_7symbols_Case_loc,
  __pyx_e_5spacy_7symbols_Case_lat,
  __pyx_e_5spacy_7symbols_Case_nom,
  __pyx_e_5spacy_7symbols_Case_par,
  __pyx_e_5spacy_7symbols_Case_sub,
  __pyx_e_5spacy_7symbols_Case_sup,
  __pyx_e_5spacy_7symbols_Case_tem,
  __pyx_e_5spacy_7symbols_Case_ter,
  __pyx_e_5spacy_7symbols_Case_tra,
  __pyx_e_5spacy_7symbols_Case_voc,
  __pyx_e_5spacy_7symbols_Definite_two,
  __pyx_e_5spacy_7symbols_Definite_def,
  __pyx_e_5spacy_7symbols_Definite_red,
  __pyx_e_5spacy_7symbols_Definite_cons,
  __pyx_e_5spacy_7symbols_Definite_ind,
  __pyx_e_5spacy_7symbols_Definite_spec,
  __pyx_e_5spacy_7symbols_Degree_cmp,
  __pyx_e_5spacy_7symbols_Degree_comp,
  __pyx_e_5spacy_7symbols_Degree_none,
  __pyx_e_5spacy_7symbols_Degree_pos,
  __pyx_e_5spacy_7symbols_Degree_sup,
  __pyx_e_5spacy_7symbols_Degree_abs,
  __pyx_e_5spacy_7symbols_Degree_com,
  __pyx_e_5spacy_7symbols_Degree_dim,
  __pyx_e_5spacy_7symbols_Degree_equ,
  __pyx_e_5spacy_7symbols_Evident_nfh,
  __pyx_e_5spacy_7symbols_Gender_com,
  __pyx_e_5spacy_7symbols_Gender_fem,
  __pyx_e_5spacy_7symbols_Gender_masc,
  __pyx_e_5spacy_7symbols_Gender_neut,
  __pyx_e_5spacy_7symbols_Mood_cnd,
  __pyx_e_5spacy_7symbols_Mood_imp,
  __pyx_e_5spacy_7symbols_Mood_ind,
  __pyx_e_5spacy_7symbols_Mood_n,
  __pyx_e_5spacy_7symbols_Mood_pot,
  __pyx_e_5spacy_7symbols_Mood_sub,
  __pyx_e_5spacy_7symbols_Mood_opt,
  __pyx_e_5spacy_7symbols_Mood_prp,
  __pyx_e_5spacy_7symbols_Mood_adm,
  __pyx_e_5spacy_7symbols_Negative_neg,
  __pyx_e_5spacy_7symbols_Negative_pos,
  __pyx_e_5spacy_7symbols_Negative_yes,
  __pyx_e_5spacy_7symbols_Polarity_neg,
  __pyx_e_5spacy_7symbols_Polarity_pos,
  __pyx_e_5spacy_7symbols_Number_com,
  __pyx_e_5spacy_7symbols_Number_dual,
  __pyx_e_5spacy_7symbols_Number_none,
  __pyx_e_5spacy_7symbols_Number_plur,
  __pyx_e_5spacy_7symbols_Number_sing,
  __pyx_e_5spacy_7symbols_Number_ptan,
  __pyx_e_5spacy_7symbols_Number_count,
  __pyx_e_5spacy_7symbols_Number_tri,
  __pyx_e_5spacy_7symbols_NumType_card,
  __pyx_e_5spacy_7symbols_NumType_dist,
  __pyx_e_5spacy_7symbols_NumType_frac,
  __pyx_e_5spacy_7symbols_NumType_gen,
  __pyx_e_5spacy_7symbols_NumType_mult,
  __pyx_e_5spacy_7symbols_NumType_none,
  __pyx_e_5spacy_7symbols_NumType_ord,
  __pyx_e_5spacy_7symbols_NumType_sets,
  __pyx_e_5spacy_7symbols_Person_one,
  __pyx_e_5spacy_7symbols_Person_two,
  __pyx_e_5spacy_7symbols_Person_three,
  __pyx_e_5spacy_7symbols_Person_none,
  __pyx_e_5spacy_7symbols_Poss_yes,
  __pyx_e_5spacy_7symbols_PronType_advPart,
  __pyx_e_5spacy_7symbols_PronType_art,
  __pyx_e_5spacy_7symbols_PronType_default,
  __pyx_e_5spacy_7symbols_PronType_dem,
  __pyx_e_5spacy_7symbols_PronType_ind,
  __pyx_e_5spacy_7symbols_PronType_int,
  __pyx_e_5spacy_7symbols_PronType_neg,
  __pyx_e_5spacy_7symbols_PronType_prs,
  __pyx_e_5spacy_7symbols_PronType_rcp,
  __pyx_e_5spacy_7symbols_PronType_rel,
  __pyx_e_5spacy_7symbols_PronType_tot,
  __pyx_e_5spacy_7symbols_PronType_clit,
  __pyx_e_5spacy_7symbols_PronType_exc,
  __pyx_e_5spacy_7symbols_PronType_emp,
  __pyx_e_5spacy_7symbols_Reflex_yes,
  __pyx_e_5spacy_7symbols_Tense_fut,
  __pyx_e_5spacy_7symbols_Tense_imp,
  __pyx_e_5spacy_7symbols_Tense_past,
  __pyx_e_5spacy_7symbols_Tense_pres,
  __pyx_e_5spacy_7symbols_VerbForm_fin,
  __pyx_e_5spacy_7symbols_VerbForm_ger,
  __pyx_e_5spacy_7symbols_VerbForm_inf,
  __pyx_e_5spacy_7symbols_VerbForm_none,
  __pyx_e_5spacy_7symbols_VerbForm_part,
  __pyx_e_5spacy_7symbols_VerbForm_partFut,
  __pyx_e_5spacy_7symbols_VerbForm_partPast,
  __pyx_e_5spacy_7symbols_VerbForm_partPres,
  __pyx_e_5spacy_7symbols_VerbForm_sup,
  __pyx_e_5spacy_7symbols_VerbForm_trans,
  __pyx_e_5spacy_7symbols_VerbForm_conv,
  __pyx_e_5spacy_7symbols_VerbForm_gdv,
  __pyx_e_5spacy_7symbols_VerbForm_vnoun,
  __pyx_e_5spacy_7symbols_Voice_act,
  __pyx_e_5spacy_7symbols_Voice_cau,
  __pyx_e_5spacy_7symbols_Voice_pass,
  __pyx_e_5spacy_7symbols_Voice_mid,
  __pyx_e_5spacy_7symbols_Voice_int,
  __pyx_e_5spacy_7symbols_Voice_antip,
  __pyx_e_5spacy_7symbols_Voice_dir,
  __pyx_e_5spacy_7symbols_Voice_inv,
  __pyx_e_5spacy_7symbols_Abbr_yes,
  __pyx_e_5spacy_7symbols_AdpType_prep,
  __pyx_e_5spacy_7symbols_AdpType_post,
  __pyx_e_5spacy_7symbols_AdpType_voc,
  __pyx_e_5spacy_7symbols_AdpType_comprep,
  __pyx_e_5spacy_7symbols_AdpType_circ,
  __pyx_e_5spacy_7symbols_AdvType_man,
  __pyx_e_5spacy_7symbols_AdvType_loc,
  __pyx_e_5spacy_7symbols_AdvType_tim,
  __pyx_e_5spacy_7symbols_AdvType_deg,
  __pyx_e_5spacy_7symbols_AdvType_cau,
  __pyx_e_5spacy_7symbols_AdvType_mod,
  __pyx_e_5spacy_7symbols_AdvType_sta,
  __pyx_e_5spacy_7symbols_AdvType_ex,
  __pyx_e_5spacy_7symbols_AdvType_adadj,
  __pyx_e_5spacy_7symbols_ConjType_oper,
  __pyx_e_5spacy_7symbols_ConjType_comp,
  __pyx_e_5spacy_7symbols_Connegative_yes,
  __pyx_e_5spacy_7symbols_Derivation_minen,
  __pyx_e_5spacy_7symbols_Derivation_sti,
  __pyx_e_5spacy_7symbols_Derivation_inen,
  __pyx_e_5spacy_7symbols_Derivation_lainen,
  __pyx_e_5spacy_7symbols_Derivation_ja,
  __pyx_e_5spacy_7symbols_Derivation_ton,
  __pyx_e_5spacy_7symbols_Derivation_vs,
  __pyx_e_5spacy_7symbols_Derivation_ttain,
  __pyx_e_5spacy_7symbols_Derivation_ttaa,
  __pyx_e_5spacy_7symbols_Echo_rdp,
  __pyx_e_5spacy_7symbols_Echo_ech,
  __pyx_e_5spacy_7symbols_Foreign_foreign,
  __pyx_e_5spacy_7symbols_Foreign_fscript,
  __pyx_e_5spacy_7symbols_Foreign_tscript,
  __pyx_e_5spacy_7symbols_Foreign_yes,
  __pyx_e_5spacy_7symbols_Gender_dat_masc,
  __pyx_e_5spacy_7symbols_Gender_dat_fem,
  __pyx_e_5spacy_7symbols_Gender_erg_masc,
  __pyx_e_5spacy_7symbols_Gender_erg_fem,
  __pyx_e_5spacy_7symbols_Gender_psor_masc,
  __pyx_e_5spacy_7symbols_Gender_psor_fem,
  __pyx_e_5spacy_7symbols_Gender_psor_neut,
  __pyx_e_5spacy_7symbols_Hyph_yes,
  __pyx_e_5spacy_7symbols_InfForm_one,
  __pyx_e_5spacy_7symbols_InfForm_two,
  __pyx_e_5spacy_7symbols_InfForm_three,
  __pyx_e_5spacy_7symbols_NameType_geo,
  __pyx_e_5spacy_7symbols_NameType_prs,
  __pyx_e_5spacy_7symbols_NameType_giv,
  __pyx_e_5spacy_7symbols_NameType_sur,
  __pyx_e_5spacy_7symbols_NameType_nat,
  __pyx_e_5spacy_7symbols_NameType_com,
  __pyx_e_5spacy_7symbols_NameType_pro,
  __pyx_e_5spacy_7symbols_NameType_oth,
  __pyx_e_5spacy_7symbols_NounType_com,
  __pyx_e_5spacy_7symbols_NounType_prop,
  __pyx_e_5spacy_7symbols_NounType_class,
  __pyx_e_5spacy_7symbols_Number_abs_sing,
  __pyx_e_5spacy_7symbols_Number_abs_plur,
  __pyx_e_5spacy_7symbols_Number_dat_sing,
  __pyx_e_5spacy_7symbols_Number_dat_plur,
  __pyx_e_5spacy_7symbols_Number_erg_sing,
  __pyx_e_5spacy_7symbols_Number_erg_plur,
  __pyx_e_5spacy_7symbols_Number_psee_sing,
  __pyx_e_5spacy_7symbols_Number_psee_plur,
  __pyx_e_5spacy_7symbols_Number_psor_sing,
  __pyx_e_5spacy_7symbols_Number_psor_plur,
  __pyx_e_5spacy_7symbols_Number_pauc,
  __pyx_e_5spacy_7symbols_Number_grpa,
  __pyx_e_5spacy_7symbols_Number_grpl,
  __pyx_e_5spacy_7symbols_Number_inv,
  __pyx_e_5spacy_7symbols_NumForm_digit,
  __pyx_e_5spacy_7symbols_NumForm_roman,
  __pyx_e_5spacy_7symbols_NumForm_word,
  __pyx_e_5spacy_7symbols_NumValue_one,
  __pyx_e_5spacy_7symbols_NumValue_two,
  __pyx_e_5spacy_7symbols_NumValue_three,
  __pyx_e_5spacy_7symbols_PartForm_pres,
  __pyx_e_5spacy_7symbols_PartForm_past,
  __pyx_e_5spacy_7symbols_PartForm_agt,
  __pyx_e_5spacy_7symbols_PartForm_neg,
  __pyx_e_5spacy_7symbols_PartType_mod,
  __pyx_e_5spacy_7symbols_PartType_emp,
  __pyx_e_5spacy_7symbols_PartType_res,
  __pyx_e_5spacy_7symbols_PartType_inf,
  __pyx_e_5spacy_7symbols_PartType_vbp,
  __pyx_e_5spacy_7symbols_Person_abs_one,
  __pyx_e_5spacy_7symbols_Person_abs_two,
  __pyx_e_5spacy_7symbols_Person_abs_three,
  __pyx_e_5spacy_7symbols_Person_dat_one,
  __pyx_e_5spacy_7symbols_Person_dat_two,
  __pyx_e_5spacy_7symbols_Person_dat_three,
  __pyx_e_5spacy_7symbols_Person_erg_one,
  __pyx_e_5spacy_7symbols_Person_erg_two,
  __pyx_e_5spacy_7symbols_Person_erg_three,
  __pyx_e_5spacy_7symbols_Person_psor_one,
  __pyx_e_5spacy_7symbols_Person_psor_two,
  __pyx_e_5spacy_7symbols_Person_psor_three,
  __pyx_e_5spacy_7symbols_Person_zero,
  __pyx_e_5spacy_7symbols_Person_four,
  __pyx_e_5spacy_7symbols_Polite_inf,
  __pyx_e_5spacy_7symbols_Polite_pol,
  __pyx_e_5spacy_7symbols_Polite_abs_inf,
  __pyx_e_5spacy_7symbols_Polite_abs_pol,
  __pyx_e_5spacy_7symbols_Polite_erg_inf,
  __pyx_e_5spacy_7symbols_Polite_erg_pol,
  __pyx_e_5spacy_7symbols_Polite_dat_inf,
  __pyx_e_5spacy_7symbols_Polite_dat_pol,
  __pyx_e_5spacy_7symbols_Polite_infm,
  __pyx_e_5spacy_7symbols_Polite_form,
  __pyx_e_5spacy_7symbols_Polite_form_elev,
  __pyx_e_5spacy_7symbols_Polite_form_humb,
  __pyx_e_5spacy_7symbols_Prefix_yes,
  __pyx_e_5spacy_7symbols_PrepCase_npr,
  __pyx_e_5spacy_7symbols_PrepCase_pre,
  __pyx_e_5spacy_7symbols_PunctSide_ini,
  __pyx_e_5spacy_7symbols_PunctSide_fin,
  __pyx_e_5spacy_7symbols_PunctType_peri,
  __pyx_e_5spacy_7symbols_PunctType_qest,
  __pyx_e_5spacy_7symbols_PunctType_excl,
  __pyx_e_5spacy_7symbols_PunctType_quot,
  __pyx_e_5spacy_7symbols_PunctType_brck,
  __pyx_e_5spacy_7symbols_PunctType_comm,
  __pyx_e_5spacy_7symbols_PunctType_colo,
  __pyx_e_5spacy_7symbols_PunctType_semi,
  __pyx_e_5spacy_7symbols_PunctType_dash,
  __pyx_e_5spacy_7symbols_Style_arch,
  __pyx_e_5spacy_7symbols_Style_rare,
  __pyx_e_5spacy_7symbols_Style_poet,
  __pyx_e_5spacy_7symbols_Style_norm,
  __pyx_e_5spacy_7symbols_Style_coll,
  __pyx_e_5spacy_7symbols_Style_vrnc,
  __pyx_e_5spacy_7symbols_Style_sing,
  __pyx_e_5spacy_7symbols_Style_expr,
  __pyx_e_5spacy_7symbols_Style_derg,
  __pyx_e_5spacy_7symbols_Style_vulg,
  __pyx_e_5spacy_7symbols_Style_yes,
  __pyx_e_5spacy_7symbols_StyleVariant_styleShort,
  __pyx_e_5spacy_7symbols_StyleVariant_styleBound,
  __pyx_e_5spacy_7symbols_VerbType_aux,
  __pyx_e_5spacy_7symbols_VerbType_cop,
  __pyx_e_5spacy_7symbols_VerbType_mod,
  __pyx_e_5spacy_7symbols_VerbType_light,
  __pyx_e_5spacy_7symbols_PERSON,
  __pyx_e_5spacy_7symbols_NORP,
  __pyx_e_5spacy_7symbols_FACILITY,
  __pyx_e_5spacy_7symbols_ORG,
  __pyx_e_5spacy_7symbols_GPE,
  __pyx_e_5spacy_7symbols_LOC,
  __pyx_e_5spacy_7symbols_PRODUCT,
  __pyx_e_5spacy_7symbols_EVENT,
  __pyx_e_5spacy_7symbols_WORK_OF_ART,
  __pyx_e_5spacy_7symbols_LANGUAGE,
  __pyx_e_5spacy_7symbols_LAW,
  __pyx_e_5spacy_7symbols_DATE,
  __pyx_e_5spacy_7symbols_TIME,
  __pyx_e_5spacy_7symbols_PERCENT,
  __pyx_e_5spacy_7symbols_MONEY,
  __pyx_e_5spacy_7symbols_QUANTITY,
  __pyx_e_5spacy_7symbols_ORDINAL,
  __pyx_e_5spacy_7symbols_CARDINAL,
  __pyx_e_5spacy_7symbols_acomp,
  __pyx_e_5spacy_7symbols_advcl,
  __pyx_e_5spacy_7symbols_advmod,
  __pyx_e_5spacy_7symbols_agent,
  __pyx_e_5spacy_7symbols_amod,
  __pyx_e_5spacy_7symbols_appos,
  __pyx_e_5spacy_7symbols_attr,
  __pyx_e_5spacy_7symbols_aux,
  __pyx_e_5spacy_7symbols_auxpass,
  __pyx_e_5spacy_7symbols_cc,
  __pyx_e_5spacy_7symbols_ccomp,
  __pyx_e_5spacy_7symbols_complm,
  __pyx_e_5spacy_7symbols_conj,
  __pyx_e_5spacy_7symbols_cop,
  __pyx_e_5spacy_7symbols_csubj,
  __pyx_e_5spacy_7symbols_csubjpass,
  __pyx_e_5spacy_7symbols_dep,
  __pyx_e_5spacy_7symbols_det,
  __pyx_e_5spacy_7symbols_dobj,
  __pyx_e_5spacy_7symbols_expl,
  __pyx_e_5spacy_7symbols_hmod,
  __pyx_e_5spacy_7symbols_hyph,
  __pyx_e_5spacy_7symbols_infmod,
  __pyx_e_5spacy_7symbols_intj,
  __pyx_e_5spacy_7symbols_iobj,
  __pyx_e_5spacy_7symbols_mark,
  __pyx_e_5spacy_7symbols_meta,
  __pyx_e_5spacy_7symbols_neg,
  __pyx_e_5spacy_7symbols_nmod,
  __pyx_e_5spacy_7symbols_nn,
  __pyx_e_5spacy_7symbols_npadvmod,
  __pyx_e_5spacy_7symbols_nsubj,
  __pyx_e_5spacy_7symbols_nsubjpass,
  __pyx_e_5spacy_7symbols_num,
  __pyx_e_5spacy_7symbols_number,
  __pyx_e_5spacy_7symbols_oprd,
  __pyx_e_5spacy_7symbols_obj,
  __pyx_e_5spacy_7symbols_obl,
  __pyx_e_5spacy_7symbols_parataxis,
  __pyx_e_5spacy_7symbols_partmod,
  __pyx_e_5spacy_7symbols_pcomp,
  __pyx_e_5spacy_7symbols_pobj,
  __pyx_e_5spacy_7symbols_poss,
  __pyx_e_5spacy_7symbols_possessive,
  __pyx_e_5spacy_7symbols_preconj,
  __pyx_e_5spacy_7symbols_prep,
  __pyx_e_5spacy_7symbols_prt,
  __pyx_e_5spacy_7symbols_punct,
  __pyx_e_5spacy_7symbols_quantmod,
  __pyx_e_5spacy_7symbols_relcl,
  __pyx_e_5spacy_7symbols_rcmod,
  __pyx_e_5spacy_7symbols_root,
  __pyx_e_5spacy_7symbols_xcomp,
  __pyx_e_5spacy_7symbols_acl,
  __pyx_e_5spacy_7symbols_ENT_KB_ID
};

/* "parts_of_speech.pxd":3
 * from . cimport symbols
 * 
 * cpdef enum univ_pos_t:             # <<<<<<<<<<<<<<
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ
 */
enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t {

  /* "parts_of_speech.pxd":5
 * cpdef enum univ_pos_t:
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ             # <<<<<<<<<<<<<<
 *     ADP
 *     ADV
 */
  __pyx_e_5spacy_15parts_of_speech_NO_TAG = 0,
  __pyx_e_5spacy_15parts_of_speech_ADJ = __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_15parts_of_speech_ADP,
  __pyx_e_5spacy_15parts_of_speech_ADV,
  __pyx_e_5spacy_15parts_of_speech_AUX,
  __pyx_e_5spacy_15parts_of_speech_CONJ,
  __pyx_e_5spacy_15parts_of_speech_CCONJ,
  __pyx_e_5spacy_15parts_of_speech_DET,
  __pyx_e_5spacy_15parts_of_speech_INTJ,
  __pyx_e_5spacy_15parts_of_speech_NOUN,
  __pyx_e_5spacy_15parts_of_speech_NUM,
  __pyx_e_5spacy_15parts_of_speech_PART,
  __pyx_e_5spacy_15parts_of_speech_PRON,
  __pyx_e_5spacy_15parts_of_speech_PROPN,
  __pyx_e_5spacy_15parts_of_speech_PUNCT,
  __pyx_e_5spacy_15parts_of_speech_SCONJ,
  __pyx_e_5spacy_15parts_of_speech_SYM,
  __pyx_e_5spacy_15parts_of_speech_VERB,
  __pyx_e_5spacy_15parts_of_speech_X,
  __pyx_e_5spacy_15parts_of_speech_EOL,
  __pyx_e_5spacy_15parts_of_speech_SPACE
};
struct __pyx_t_5spacy_7structs_LexemeC;
struct __pyx_t_5spacy_7structs_SerializedLexemeC;
struct __pyx_t_5spacy_7structs_Entity;
struct __pyx_t_5spacy_7structs_TokenC;
struct __pyx_t_5spacy_7structs_MorphAnalysisC;
struct __pyx_t_5spacy_7structs_KBEntryC;
struct __pyx_t_5spacy_7structs_AliasC;

/* "structs.pxd":11
 * 
 * 
 * cdef struct LexemeC:             # <<<<<<<<<<<<<<
 *     flags_t flags
 * 
 */
struct __pyx_t_5spacy_7structs_LexemeC {
  __pyx_t_5spacy_8typedefs_flags_t flags;
  __pyx_t_5spacy_8typedefs_attr_t lang;
  __pyx_t_5spacy_8typedefs_attr_t id;
  __pyx_t_5spacy_8typedefs_attr_t length;
  __pyx_t_5spacy_8typedefs_attr_t orth;
  __pyx_t_5spacy_8typedefs_attr_t lower;
  __pyx_t_5spacy_8typedefs_attr_t norm;
  __pyx_t_5spacy_8typedefs_attr_t shape;
  __pyx_t_5spacy_8typedefs_attr_t prefix;
  __pyx_t_5spacy_8typedefs_attr_t suffix;
  __pyx_t_5spacy_8typedefs_attr_t cluster;
  float prob;
  float sentiment;
};

/* "structs.pxd":32
 * 
 * 
 * cdef struct SerializedLexemeC:             # <<<<<<<<<<<<<<
 *     unsigned char[8 + 8*10 + 4 + 4] data
 *     #    sizeof(flags_t)  # flags
 */
struct __pyx_t_5spacy_7structs_SerializedLexemeC {
  unsigned char data[(((8 + (8 * 10)) + 4) + 4)];
};

/* "structs.pxd":50
 * 
 * 
 * cdef struct Entity:             # <<<<<<<<<<<<<<
 *     hash_t id
 *     int start
 */
struct __pyx_t_5spacy_7structs_Entity {
  __pyx_t_5spacy_8typedefs_hash_t id;
  int start;
  int end;
  __pyx_t_5spacy_8typedefs_attr_t label;
};

/* "structs.pxd":57
 * 
 * 
 * cdef struct TokenC:             # <<<<<<<<<<<<<<
 *     const LexemeC* lex
 *     uint64_t morph
 */
struct __pyx_t_5spacy_7structs_TokenC {
  struct __pyx_t_5spacy_7structs_LexemeC const *lex;
  uint64_t morph;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t pos;
  int spacy;
  __pyx_t_5spacy_8typedefs_attr_t tag;
  int idx;
  __pyx_t_5spacy_8typedefs_attr_t lemma;
  __pyx_t_5spacy_8typedefs_attr_t norm;
  int head;
  __pyx_t_5spacy_8typedefs_attr_t dep;
  uint32_t l_kids;
  uint32_t r_kids;
  uint32_t l_edge;
  uint32_t r_edge;
  int sent_start;
  int ent_iob;
  __pyx_t_5spacy_8typedefs_attr_t ent_type;
  __pyx_t_5spacy_8typedefs_attr_t ent_kb_id;
  __pyx_t_5spacy_8typedefs_hash_t ent_id;
};

/* "structs.pxd":81
 * 
 * 
 * cdef struct MorphAnalysisC:             # <<<<<<<<<<<<<<
 *     univ_pos_t pos
 *     int length
 */
struct __pyx_t_5spacy_7structs_MorphAnalysisC {
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t pos;
  int length;
  __pyx_t_5spacy_8typedefs_attr_t abbr;
  __pyx_t_5spacy_8typedefs_attr_t adp_type;
  __pyx_t_5spacy_8typedefs_attr_t adv_type;
  __pyx_t_5spacy_8typedefs_attr_t animacy;
  __pyx_t_5spacy_8typedefs_attr_t aspect;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_case;
  __pyx_t_5spacy_8typedefs_attr_t conj_type;
  __pyx_t_5spacy_8typedefs_attr_t connegative;
  __pyx_t_5spacy_8typedefs_attr_t definite;
  __pyx_t_5spacy_8typedefs_attr_t degree;
  __pyx_t_5spacy_8typedefs_attr_t derivation;
  __pyx_t_5spacy_8typedefs_attr_t echo;
  __pyx_t_5spacy_8typedefs_attr_t foreign;
  __pyx_t_5spacy_8typedefs_attr_t gender;
  __pyx_t_5spacy_8typedefs_attr_t hyph;
  __pyx_t_5spacy_8typedefs_attr_t inf_form;
  __pyx_t_5spacy_8typedefs_attr_t mood;
  __pyx_t_5spacy_8typedefs_attr_t negative;
  __pyx_t_5spacy_8typedefs_attr_t number;
  __pyx_t_5spacy_8typedefs_attr_t name_type;
  __pyx_t_5spacy_8typedefs_attr_t noun_type;
  __pyx_t_5spacy_8typedefs_attr_t num_form;
  __pyx_t_5spacy_8typedefs_attr_t num_type;
  __pyx_t_5spacy_8typedefs_attr_t num_value;
  __pyx_t_5spacy_8typedefs_attr_t part_form;
  __pyx_t_5spacy_8typedefs_attr_t part_type;
  __pyx_t_5spacy_8typedefs_attr_t person;
  __pyx_t_5spacy_8typedefs_attr_t polite;
  __pyx_t_5spacy_8typedefs_attr_t polarity;
  __pyx_t_5spacy_8typedefs_attr_t poss;
  __pyx_t_5spacy_8typedefs_attr_t prefix;
  __pyx_t_5spacy_8typedefs_attr_t prep_case;
  __pyx_t_5spacy_8typedefs_attr_t pron_type;
  __pyx_t_5spacy_8typedefs_attr_t punct_side;
  __pyx_t_5spacy_8typedefs_attr_t punct_type;
  __pyx_t_5spacy_8typedefs_attr_t reflex;
  __pyx_t_5spacy_8typedefs_attr_t style;
  __pyx_t_5spacy_8typedefs_attr_t style_variant;
  __pyx_t_5spacy_8typedefs_attr_t tense;
  __pyx_t_5spacy_8typedefs_attr_t typo;
  __pyx_t_5spacy_8typedefs_attr_t verb_form;
  __pyx_t_5spacy_8typedefs_attr_t voice;
  __pyx_t_5spacy_8typedefs_attr_t verb_type;
};

/* "structs.pxd":130
 * 
 * # Internal struct, for storage and disambiguation of entities.
 * cdef struct KBEntryC:             # <<<<<<<<<<<<<<
 * 
 *     # The hash of this entry's unique ID/name in the kB
 */
struct __pyx_t_5spacy_7structs_KBEntryC {
  __pyx_t_5spacy_8typedefs_hash_t entity_hash;
  int32_t vector_index;
  int32_t feats_row;
  float freq;
};

/* "structs.pxd":149
 * # Each alias struct stores a list of Entry pointers with their prior probabilities
 * # for this specific mention/alias.
 * cdef struct AliasC:             # <<<<<<<<<<<<<<
 * 
 *     # All entry candidates for this alias
 */
struct __pyx_t_5spacy_7structs_AliasC {
  std::vector<int64_t>  entry_indices;
  std::vector<float>  probs;
};
union __pyx_t_5spacy_7strings_Utf8Str;
typedef union __pyx_t_5spacy_7strings_Utf8Str __pyx_t_5spacy_7strings_Utf8Str;

/* "strings.pxd":18
 * 
 * 
 * ctypedef union Utf8Str:             # <<<<<<<<<<<<<<
 *     unsigned char[8] s
 *     unsigned char* p
 */
union __pyx_t_5spacy_7strings_Utf8Str {
  unsigned char s[8];
  unsigned char *p;
};

/* "attrs.pxd":4
 * from . cimport symbols
 * 
 * cdef enum attr_id_t:             # <<<<<<<<<<<<<<
 *     NULL_ATTR
 *     IS_ALPHA
 */
enum __pyx_t_5spacy_5attrs_attr_id_t {

  /* "attrs.pxd":93
 * 
 *     LANG
 *     ENT_KB_ID = symbols.ENT_KB_ID             # <<<<<<<<<<<<<<
 */
  __pyx_e_5spacy_5attrs_NULL_ATTR,
  __pyx_e_5spacy_5attrs_IS_ALPHA,
  __pyx_e_5spacy_5attrs_IS_ASCII,
  __pyx_e_5spacy_5attrs_IS_DIGIT,
  __pyx_e_5spacy_5attrs_IS_LOWER,
  __pyx_e_5spacy_5attrs_IS_PUNCT,
  __pyx_e_5spacy_5attrs_IS_SPACE,
  __pyx_e_5spacy_5attrs_IS_TITLE,
  __pyx_e_5spacy_5attrs_IS_UPPER,
  __pyx_e_5spacy_5attrs_LIKE_URL,
  __pyx_e_5spacy_5attrs_LIKE_NUM,
  __pyx_e_5spacy_5attrs_LIKE_EMAIL,
  __pyx_e_5spacy_5attrs_IS_STOP,
  __pyx_e_5spacy_5attrs_IS_OOV,
  __pyx_e_5spacy_5attrs_IS_BRACKET,
  __pyx_e_5spacy_5attrs_IS_QUOTE,
  __pyx_e_5spacy_5attrs_IS_LEFT_PUNCT,
  __pyx_e_5spacy_5attrs_IS_RIGHT_PUNCT,
  __pyx_e_5spacy_5attrs_IS_CURRENCY,
  __pyx_e_5spacy_5attrs_FLAG19 = 19,
  __pyx_e_5spacy_5attrs_FLAG20,
  __pyx_e_5spacy_5attrs_FLAG21,
  __pyx_e_5spacy_5attrs_FLAG22,
  __pyx_e_5spacy_5attrs_FLAG23,
  __pyx_e_5spacy_5attrs_FLAG24,
  __pyx_e_5spacy_5attrs_FLAG25,
  __pyx_e_5spacy_5attrs_FLAG26,
  __pyx_e_5spacy_5attrs_FLAG27,
  __pyx_e_5spacy_5attrs_FLAG28,
  __pyx_e_5spacy_5attrs_FLAG29,
  __pyx_e_5spacy_5attrs_FLAG30,
  __pyx_e_5spacy_5attrs_FLAG31,
  __pyx_e_5spacy_5attrs_FLAG32,
  __pyx_e_5spacy_5attrs_FLAG33,
  __pyx_e_5spacy_5attrs_FLAG34,
  __pyx_e_5spacy_5attrs_FLAG35,
  __pyx_e_5spacy_5attrs_FLAG36,
  __pyx_e_5spacy_5attrs_FLAG37,
  __pyx_e_5spacy_5attrs_FLAG38,
  __pyx_e_5spacy_5attrs_FLAG39,
  __pyx_e_5spacy_5attrs_FLAG40,
  __pyx_e_5spacy_5attrs_FLAG41,
  __pyx_e_5spacy_5attrs_FLAG42,
  __pyx_e_5spacy_5attrs_FLAG43,
  __pyx_e_5spacy_5attrs_FLAG44,
  __pyx_e_5spacy_5attrs_FLAG45,
  __pyx_e_5spacy_5attrs_FLAG46,
  __pyx_e_5spacy_5attrs_FLAG47,
  __pyx_e_5spacy_5attrs_FLAG48,
  __pyx_e_5spacy_5attrs_FLAG49,
  __pyx_e_5spacy_5attrs_FLAG50,
  __pyx_e_5spacy_5attrs_FLAG51,
  __pyx_e_5spacy_5attrs_FLAG52,
  __pyx_e_5spacy_5attrs_FLAG53,
  __pyx_e_5spacy_5attrs_FLAG54,
  __pyx_e_5spacy_5attrs_FLAG55,
  __pyx_e_5spacy_5attrs_FLAG56,
  __pyx_e_5spacy_5attrs_FLAG57,
  __pyx_e_5spacy_5attrs_FLAG58,
  __pyx_e_5spacy_5attrs_FLAG59,
  __pyx_e_5spacy_5attrs_FLAG60,
  __pyx_e_5spacy_5attrs_FLAG61,
  __pyx_e_5spacy_5attrs_FLAG62,
  __pyx_e_5spacy_5attrs_FLAG63,
  __pyx_e_5spacy_5attrs_ID,
  __pyx_e_5spacy_5attrs_ORTH,
  __pyx_e_5spacy_5attrs_LOWER,
  __pyx_e_5spacy_5attrs_NORM,
  __pyx_e_5spacy_5attrs_SHAPE,
  __pyx_e_5spacy_5attrs_PREFIX,
  __pyx_e_5spacy_5attrs_SUFFIX,
  __pyx_e_5spacy_5attrs_LENGTH,
  __pyx_e_5spacy_5attrs_CLUSTER,
  __pyx_e_5spacy_5attrs_LEMMA,
  __pyx_e_5spacy_5attrs_POS,
  __pyx_e_5spacy_5attrs_TAG,
  __pyx_e_5spacy_5attrs_DEP,
  __pyx_e_5spacy_5attrs_ENT_IOB,
  __pyx_e_5spacy_5attrs_ENT_TYPE,
  __pyx_e_5spacy_5attrs_HEAD,
  __pyx_e_5spacy_5attrs_SENT_START,
  __pyx_e_5spacy_5attrs_SPACY,
  __pyx_e_5spacy_5attrs_PROB,
  __pyx_e_5spacy_5attrs_LANG,
  __pyx_e_5spacy_5attrs_ENT_KB_ID = __pyx_e_5spacy_7symbols_ENT_KB_ID
};
union __pyx_t_5spacy_5vocab_LexemesOrTokens;
struct __pyx_t_5spacy_5vocab__Cached;

/* "vocab.pxd":16
 * 
 * 
 * cdef union LexemesOrTokens:             # <<<<<<<<<<<<<<
 *     const LexemeC* const* lexemes
 *     const TokenC* tokens
 */
union __pyx_t_5spacy_5vocab_LexemesOrTokens {
  struct __pyx_t_5spacy_7structs_LexemeC const *const *lexemes;
  struct __pyx_t_5spacy_7structs_TokenC const *tokens;
};

/* "vocab.pxd":21
 * 
 * 
 * cdef struct _Cached:             # <<<<<<<<<<<<<<
 *     LexemesOrTokens data
 *     bint is_lex
 */
struct __pyx_t_5spacy_5vocab__Cached {
  union __pyx_t_5spacy_5vocab_LexemesOrTokens data;
  int is_lex;
  int length;
};

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":817
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "spacy/morphology.pyx":21
 * 
 * 
 * cdef enum univ_field_t:             # <<<<<<<<<<<<<<
 *     Field_POS
 *     Field_Abbr
 */
enum __pyx_t_5spacy_10morphology_univ_field_t {
  __pyx_e_5spacy_10morphology_Field_POS,
  __pyx_e_5spacy_10morphology_Field_Abbr,
  __pyx_e_5spacy_10morphology_Field_AdpType,
  __pyx_e_5spacy_10morphology_Field_AdvType,
  __pyx_e_5spacy_10morphology_Field_Animacy,
  __pyx_e_5spacy_10morphology_Field_Aspect,
  __pyx_e_5spacy_10morphology_Field_Case,
  __pyx_e_5spacy_10morphology_Field_ConjType,
  __pyx_e_5spacy_10morphology_Field_Connegative,
  __pyx_e_5spacy_10morphology_Field_Definite,
  __pyx_e_5spacy_10morphology_Field_Degree,
  __pyx_e_5spacy_10morphology_Field_Derivation,
  __pyx_e_5spacy_10morphology_Field_Echo,
  __pyx_e_5spacy_10morphology_Field_Foreign,
  __pyx_e_5spacy_10morphology_Field_Gender,
  __pyx_e_5spacy_10morphology_Field_Hyph,
  __pyx_e_5spacy_10morphology_Field_InfForm,
  __pyx_e_5spacy_10morphology_Field_Mood,
  __pyx_e_5spacy_10morphology_Field_NameType,
  __pyx_e_5spacy_10morphology_Field_Negative,
  __pyx_e_5spacy_10morphology_Field_NounType,
  __pyx_e_5spacy_10morphology_Field_Number,
  __pyx_e_5spacy_10morphology_Field_NumForm,
  __pyx_e_5spacy_10morphology_Field_NumType,
  __pyx_e_5spacy_10morphology_Field_NumValue,
  __pyx_e_5spacy_10morphology_Field_PartForm,
  __pyx_e_5spacy_10morphology_Field_PartType,
  __pyx_e_5spacy_10morphology_Field_Person,
  __pyx_e_5spacy_10morphology_Field_Polarity,
  __pyx_e_5spacy_10morphology_Field_Polite,
  __pyx_e_5spacy_10morphology_Field_Poss,
  __pyx_e_5spacy_10morphology_Field_Prefix,
  __pyx_e_5spacy_10morphology_Field_PrepCase,
  __pyx_e_5spacy_10morphology_Field_PronType,
  __pyx_e_5spacy_10morphology_Field_PunctSide,
  __pyx_e_5spacy_10morphology_Field_PunctType,
  __pyx_e_5spacy_10morphology_Field_Reflex,
  __pyx_e_5spacy_10morphology_Field_Style,
  __pyx_e_5spacy_10morphology_Field_StyleVariant,
  __pyx_e_5spacy_10morphology_Field_Tense,
  __pyx_e_5spacy_10morphology_Field_Typo,
  __pyx_e_5spacy_10morphology_Field_VerbForm,
  __pyx_e_5spacy_10morphology_Field_VerbType,
  __pyx_e_5spacy_10morphology_Field_Voice
};

/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
 */
struct __pyx_obj_5cymem_5cymem_PyMalloc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtab;
  __pyx_t_5cymem_5cymem_malloc_t malloc;
};


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
 */
struct __pyx_obj_5cymem_5cymem_PyFree {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtab;
  __pyx_t_5cymem_5cymem_free_t free;
};


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "cymem/cymem.pxd":28
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 *     cdef readonly PyMalloc pymalloc
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "preshed/maps.pxd":45
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "preshed/maps.pxd":53
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "strings.pxd":23
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
 */
struct __pyx_obj_5spacy_7strings_StringStore {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  std::vector<__pyx_t_5spacy_8typedefs_hash_t>  keys;
  std::set<__pyx_t_5spacy_8typedefs_hash_t>  hits;
  struct __pyx_obj_7preshed_4maps_PreshMap *_map;
};


/* "vocab.pxd":27
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cpdef readonly StringStore strings
 */
struct __pyx_obj_5spacy_5vocab_Vocab {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  struct __pyx_obj_5spacy_10morphology_Morphology *morphology;
  PyObject *vectors;
  PyObject *lookups;
  int length;
  PyObject *data_dir;
  PyObject *lex_attr_getters;
  PyObject *cfg;
  struct __pyx_obj_7preshed_4maps_PreshMap *_by_orth;
};


/* "lexeme.pxd":14
 * cdef LexemeC EMPTY_LEXEME
 * 
 * cdef class Lexeme:             # <<<<<<<<<<<<<<
 *     cdef LexemeC* c
 *     cdef readonly Vocab vocab
 */
struct __pyx_obj_5spacy_6lexeme_Lexeme {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme *__pyx_vtab;
  struct __pyx_t_5spacy_7structs_LexemeC *c;
  struct __pyx_obj_5spacy_5vocab_Vocab *vocab;
  __pyx_t_5spacy_8typedefs_attr_t orth;
};


/* "spacy/morphology.pxd":13
 * from . cimport symbols
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings
 */
struct __pyx_obj_5spacy_10morphology_Morphology {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  struct __pyx_obj_7preshed_4maps_PreshMap *tags;
  PyObject *lemmatizer;
  PyObject *tag_map;
  PyObject *tag_names;
  PyObject *reverse_index;
  PyObject *exc;
  PyObject *_feat_map;
  struct __pyx_obj_7preshed_4maps_PreshMapArray *_cache;
  int n_tags;
};



/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
 */

struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyMalloc *, __pyx_t_5cymem_5cymem_malloc_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtabptr_5cymem_5cymem_PyMalloc;


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
 */

struct __pyx_vtabstruct_5cymem_5cymem_PyFree {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyFree *, __pyx_t_5cymem_5cymem_free_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtabptr_5cymem_5cymem_PyFree;


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "preshed/maps.pxd":45
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "preshed/maps.pxd":53
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "strings.pxd":23
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
 */

struct __pyx_vtabstruct_5spacy_7strings_StringStore {
  __pyx_t_5spacy_7strings_Utf8Str const *(*intern_unicode)(struct __pyx_obj_5spacy_7strings_StringStore *, PyObject *);
  __pyx_t_5spacy_7strings_Utf8Str const *(*_intern_utf8)(struct __pyx_obj_5spacy_7strings_StringStore *, char *, int);
};
static struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtabptr_5spacy_7strings_StringStore;


/* "vocab.pxd":27
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cpdef readonly StringStore strings
 */

struct __pyx_vtabstruct_5spacy_5vocab_Vocab {
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get_by_orth)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, __pyx_t_5spacy_8typedefs_attr_t);
  struct __pyx_t_5spacy_7structs_TokenC const *(*make_fused_token)(struct __pyx_obj_5spacy_5vocab_Vocab *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*_new_lexeme)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  int (*_add_lex_to_vocab)(struct __pyx_obj_5spacy_5vocab_Vocab *, __pyx_t_5spacy_8typedefs_hash_t, struct __pyx_t_5spacy_7structs_LexemeC const *);
};
static struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtabptr_5spacy_5vocab_Vocab;


/* "lexeme.pxd":14
 * cdef LexemeC EMPTY_LEXEME
 * 
 * cdef class Lexeme:             # <<<<<<<<<<<<<<
 *     cdef LexemeC* c
 *     cdef readonly Vocab vocab
 */

struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme {
  struct __pyx_obj_5spacy_6lexeme_Lexeme *(*from_ptr)(struct __pyx_t_5spacy_7structs_LexemeC *, struct __pyx_obj_5spacy_5vocab_Vocab *, int);
  struct __pyx_t_5spacy_7structs_SerializedLexemeC (*c_to_bytes)(struct __pyx_t_5spacy_7structs_LexemeC const *);
  void (*c_from_bytes)(struct __pyx_t_5spacy_7structs_LexemeC *, struct __pyx_t_5spacy_7structs_SerializedLexemeC);
  void (*set_struct_attr)(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, __pyx_t_5spacy_8typedefs_attr_t);
  __pyx_t_5spacy_8typedefs_attr_t (*get_struct_attr)(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
  int (*c_check_flag)(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
  int (*c_set_flag)(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, int);
};
static struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme *__pyx_vtabptr_5spacy_6lexeme_Lexeme;
static CYTHON_INLINE struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_f_5spacy_6lexeme_6Lexeme_from_ptr(struct __pyx_t_5spacy_7structs_LexemeC *, struct __pyx_obj_5spacy_5vocab_Vocab *, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_SerializedLexemeC __pyx_f_5spacy_6lexeme_6Lexeme_c_to_bytes(struct __pyx_t_5spacy_7structs_LexemeC const *);
static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_c_from_bytes(struct __pyx_t_5spacy_7structs_LexemeC *, struct __pyx_t_5spacy_7structs_SerializedLexemeC);
static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_set_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, __pyx_t_5spacy_8typedefs_attr_t);
static CYTHON_INLINE __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_6lexeme_6Lexeme_get_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, int);


/* "spacy/morphology.pyx":141
 * 
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     '''Store the possible morphological analyses for a language, and index them
 *     by hash.
 */

struct __pyx_vtabstruct_5spacy_10morphology_Morphology {
  PyObject *(*update)(struct __pyx_obj_5spacy_10morphology_Morphology *, __pyx_t_5spacy_8typedefs_hash_t, PyObject *, int __pyx_skip_dispatch);
  __pyx_t_5spacy_8typedefs_hash_t (*insert)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_MorphAnalysisC);
  int (*assign_untagged)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *);
  int (*assign_tag)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, PyObject *);
  int (*assign_tag_id)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, int);
  int (*_assign_tag_from_exceptions)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, int);
};
static struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtabptr_5spacy_10morphology_Morphology;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* py_dict_pop.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(enum __pyx_t_5spacy_10morphology_univ_field_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(enum __pyx_t_5spacy_5attrs_attr_id_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __Pyx_PyInt_As_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum __pyx_t_5spacy_10morphology_univ_field_t __Pyx_PyInt_As_enum____pyx_t_5spacy_10morphology_univ_field_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5spacy_10morphology_10Morphology_update(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph, PyObject *__pyx_v_features, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_5spacy_8typedefs_hash_t __pyx_f_5spacy_10morphology_10Morphology_insert(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_v_tag); /* proto*/
static int __pyx_f_5spacy_10morphology_10Morphology_assign_untagged(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token); /* proto*/
static int __pyx_f_5spacy_10morphology_10Morphology_assign_tag(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token, PyObject *__pyx_v_tag_str); /* proto*/
static int __pyx_f_5spacy_10morphology_10Morphology_assign_tag_id(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token, int __pyx_v_tag_id); /* proto*/
static int __pyx_f_5spacy_10morphology_10Morphology__assign_tag_from_exceptions(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token, int __pyx_v_tag_id); /* proto*/
static CYTHON_INLINE struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_f_5spacy_6lexeme_6Lexeme_from_ptr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, struct __pyx_obj_5spacy_5vocab_Vocab *__pyx_v_vocab, CYTHON_UNUSED int __pyx_v_vector_length); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_SerializedLexemeC __pyx_f_5spacy_6lexeme_6Lexeme_c_to_bytes(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lex); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_c_from_bytes(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, struct __pyx_t_5spacy_7structs_SerializedLexemeC __pyx_v_lex_data); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_set_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_name, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_value); /* proto*/
static CYTHON_INLINE __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_6lexeme_6Lexeme_get_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_feat_name); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lexeme, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id, int __pyx_v_value); /* proto*/

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_PyMalloc = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_PyFree = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'preshed.maps' */
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap = 0;
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray = 0;

/* Module declarations from 'murmurhash' */

/* Module declarations from 'murmurhash.mrmr' */
static uint64_t (*__pyx_f_10murmurhash_4mrmr_hash64)(void *, int, uint64_t); /*proto*/

/* Module declarations from 'spacy.typedefs' */

/* Module declarations from 'spacy' */

/* Module declarations from 'spacy.symbols' */

/* Module declarations from 'spacy.parts_of_speech' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'spacy.structs' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'spacy.strings' */
static PyTypeObject *__pyx_ptype_5spacy_7strings_StringStore = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'spacy.attrs' */

/* Module declarations from 'spacy.vocab' */
static PyTypeObject *__pyx_ptype_5spacy_5vocab_Vocab = 0;
static struct __pyx_t_5spacy_7structs_LexemeC *__pyx_vp_5spacy_5vocab_EMPTY_LEXEME = 0;
#define __pyx_v_5spacy_5vocab_EMPTY_LEXEME (*__pyx_vp_5spacy_5vocab_EMPTY_LEXEME)

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'spacy.lexeme' */
static PyTypeObject *__pyx_ptype_5spacy_6lexeme_Lexeme = 0;
static struct __pyx_t_5spacy_7structs_LexemeC *__pyx_vp_5spacy_6lexeme_EMPTY_LEXEME = 0;
#define __pyx_v_5spacy_6lexeme_EMPTY_LEXEME (*__pyx_vp_5spacy_6lexeme_EMPTY_LEXEME)

/* Module declarations from 'spacy.morphology' */
static PyTypeObject *__pyx_ptype_5spacy_10morphology_Morphology = 0;
static PyObject *__pyx_8genexpr5__pyx_v_5spacy_10morphology_f;
static PyObject *__pyx_8genexpr6__pyx_v_5spacy_10morphology_f;
static __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_10morphology_get_field(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *, int); /*proto*/
static PyObject *__pyx_f_5spacy_10morphology_list_features(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *); /*proto*/
static PyObject *__pyx_f_5spacy_10morphology_tag_to_json(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *); /*proto*/
static enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_f_5spacy_10morphology_get_int_tag(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5spacy_10morphology_intify_features(PyObject *, int __pyx_skip_dispatch); /*proto*/
static __pyx_t_5spacy_8typedefs_hash_t __pyx_f_5spacy_10morphology_hash_tag(struct __pyx_t_5spacy_7structs_MorphAnalysisC); /*proto*/
static struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_f_5spacy_10morphology_create_rich_tag(PyObject *); /*proto*/
static int __pyx_f_5spacy_10morphology_set_feature(struct __pyx_t_5spacy_7structs_MorphAnalysisC *, enum __pyx_t_5spacy_10morphology_univ_field_t, __pyx_t_5spacy_8typedefs_attr_t, int); /*proto*/
#define __Pyx_MODULE_NAME "spacy.morphology"
extern int __pyx_module_is_main_spacy__morphology;
int __pyx_module_is_main_spacy__morphology = 0;

/* Implementation of 'spacy.morphology' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_[] = "|";
static const char __pyx_k_SP[] = "SP";
static const char __pyx_k__2[] = "_";
static const char __pyx_k_IDS[] = "IDS";
static const char __pyx_k_NIL[] = "NIL";
static const char __pyx_k_POS[] = "POS";
static const char __pyx_k__11[] = "";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_exc[] = "exc";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_Abbr[] = "Abbr";
static const char __pyx_k_Case[] = "Case";
static const char __pyx_k_E014[] = "E014";
static const char __pyx_k_E167[] = "E167";
static const char __pyx_k_E168[] = "E168";
static const char __pyx_k_Echo[] = "Echo";
static const char __pyx_k_Hyph[] = "Hyph";
static const char __pyx_k_Mood[] = "Mood";
static const char __pyx_k_Poss[] = "Poss";
static const char __pyx_k_SP_2[] = "_SP";
static const char __pyx_k_Typo[] = "Typo";
static const char __pyx_k_abbr[] = "abbr";
static const char __pyx_k_attr[] = "attr";
static const char __pyx_k_case[] = "case";
static const char __pyx_k_echo[] = "echo";
static const char __pyx_k_feat[] = "feat";
static const char __pyx_k_hyph[] = "hyph";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mood[] = "mood";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_orth[] = "orth";
static const char __pyx_k_poss[] = "poss";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_typo[] = "typo";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_LEMMA[] = "LEMMA";
static const char __pyx_k_POS_X[] = "POS_X";
static const char __pyx_k_Style[] = "Style";
static const char __pyx_k_Tense[] = "Tense";
static const char __pyx_k_Voice[] = "Voice";
static const char __pyx_k_attrs[] = "attrs";
static const char __pyx_k_field[] = "field";
static const char __pyx_k_force[] = "force";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_morph[] = "morph";
static const char __pyx_k_props[] = "props";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_srsly[] = "srsly";
static const char __pyx_k_style[] = "style";
static const char __pyx_k_tense[] = "tense";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_voice[] = "voice";
static const char __pyx_k_Aspect[] = "Aspect";
static const char __pyx_k_Degree[] = "Degree";
static const char __pyx_k_Errors[] = "Errors";
static const char __pyx_k_FIELDS[] = "FIELDS";
static const char __pyx_k_Gender[] = "Gender";
static const char __pyx_k_Mood_n[] = "Mood_n";
static const char __pyx_k_Number[] = "Number";
static const char __pyx_k_Person[] = "Person";
static const char __pyx_k_Polite[] = "Polite";
static const char __pyx_k_Prefix[] = "Prefix";
static const char __pyx_k_Reflex[] = "Reflex";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_as_int[] = "as_int";
static const char __pyx_k_aspect[] = "aspect";
static const char __pyx_k_compat[] = "compat";
static const char __pyx_k_degree[] = "degree";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_fields[] = "fields";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_gender[] = "gender";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_lookup[] = "lookup";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_number[] = "number";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_person[] = "person";
static const char __pyx_k_polite[] = "polite";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_reflex[] = "reflex";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_AdpType[] = "AdpType";
static const char __pyx_k_AdvType[] = "AdvType";
static const char __pyx_k_Animacy[] = "Animacy";
static const char __pyx_k_Counter[] = "Counter";
static const char __pyx_k_Foreign[] = "Foreign";
static const char __pyx_k_InfForm[] = "InfForm";
static const char __pyx_k_NumForm[] = "NumForm";
static const char __pyx_k_NumType[] = "NumType";
static const char __pyx_k_POS_ADJ[] = "POS_ADJ";
static const char __pyx_k_POS_ADP[] = "POS_ADP";
static const char __pyx_k_POS_ADV[] = "POS_ADV";
static const char __pyx_k_POS_AUX[] = "POS_AUX";
static const char __pyx_k_POS_DET[] = "POS_DET";
static const char __pyx_k_POS_EOL[] = "POS_EOL";
static const char __pyx_k_POS_IDS[] = "POS_IDS";
static const char __pyx_k_POS_NUM[] = "POS_NUM";
static const char __pyx_k_POS_SYM[] = "POS_SYM";
static const char __pyx_k_animacy[] = "animacy";
static const char __pyx_k_feat_id[] = "feat_id";
static const char __pyx_k_feature[] = "feature";
static const char __pyx_k_foreign[] = "foreign";
static const char __pyx_k_id2feat[] = "id2feat";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_strings[] = "strings";
static const char __pyx_k_symbols[] = "symbols";
static const char __pyx_k_tag_map[] = "tag_map";
static const char __pyx_k_tag_str[] = "tag_str";
static const char __pyx_k_Abbr_yes[] = "Abbr_yes";
static const char __pyx_k_Case_abe[] = "Case_abe";
static const char __pyx_k_Case_abl[] = "Case_abl";
static const char __pyx_k_Case_abs[] = "Case_abs";
static const char __pyx_k_Case_acc[] = "Case_acc";
static const char __pyx_k_Case_ade[] = "Case_ade";
static const char __pyx_k_Case_all[] = "Case_all";
static const char __pyx_k_Case_cau[] = "Case_cau";
static const char __pyx_k_Case_com[] = "Case_com";
static const char __pyx_k_Case_dat[] = "Case_dat";
static const char __pyx_k_Case_del[] = "Case_del";
static const char __pyx_k_Case_dis[] = "Case_dis";
static const char __pyx_k_Case_ela[] = "Case_ela";
static const char __pyx_k_Case_ess[] = "Case_ess";
static const char __pyx_k_Case_gen[] = "Case_gen";
static const char __pyx_k_Case_ill[] = "Case_ill";
static const char __pyx_k_Case_ine[] = "Case_ine";
static const char __pyx_k_Case_ins[] = "Case_ins";
static const char __pyx_k_Case_lat[] = "Case_lat";
static const char __pyx_k_Case_loc[] = "Case_loc";
static const char __pyx_k_Case_nom[] = "Case_nom";
static const char __pyx_k_Case_par[] = "Case_par";
static const char __pyx_k_Case_sub[] = "Case_sub";
static const char __pyx_k_Case_sup[] = "Case_sup";
static const char __pyx_k_Case_tem[] = "Case_tem";
static const char __pyx_k_Case_ter[] = "Case_ter";
static const char __pyx_k_Case_tra[] = "Case_tra";
static const char __pyx_k_Case_voc[] = "Case_voc";
static const char __pyx_k_ConjType[] = "ConjType";
static const char __pyx_k_Definite[] = "Definite";
static const char __pyx_k_Echo_ech[] = "Echo_ech";
static const char __pyx_k_Echo_rdp[] = "Echo_rdp";
static const char __pyx_k_FEATURES[] = "FEATURES";
static const char __pyx_k_Hyph_yes[] = "Hyph_yes";
static const char __pyx_k_Mood_cnd[] = "Mood_cnd";
static const char __pyx_k_Mood_imp[] = "Mood_imp";
static const char __pyx_k_Mood_ind[] = "Mood_ind";
static const char __pyx_k_Mood_opt[] = "Mood_opt";
static const char __pyx_k_Mood_pot[] = "Mood_pot";
static const char __pyx_k_Mood_sub[] = "Mood_sub";
static const char __pyx_k_NameType[] = "NameType";
static const char __pyx_k_Negative[] = "Negative";
static const char __pyx_k_NounType[] = "NounType";
static const char __pyx_k_NumValue[] = "NumValue";
static const char __pyx_k_POS_CONJ[] = "POS_CONJ";
static const char __pyx_k_POS_INTJ[] = "POS_INTJ";
static const char __pyx_k_POS_NOUN[] = "POS_NOUN";
static const char __pyx_k_POS_PART[] = "POS_PART";
static const char __pyx_k_POS_PRON[] = "POS_PRON";
static const char __pyx_k_POS_VERB[] = "POS_VERB";
static const char __pyx_k_PartForm[] = "PartForm";
static const char __pyx_k_PartType[] = "PartType";
static const char __pyx_k_Polarity[] = "Polarity";
static const char __pyx_k_Poss_yes[] = "Poss_yes";
static const char __pyx_k_PrepCase[] = "PrepCase";
static const char __pyx_k_PronType[] = "PronType";
static const char __pyx_k_Typo_yes[] = "Typo_yes";
static const char __pyx_k_VerbForm[] = "VerbForm";
static const char __pyx_k_VerbType[] = "VerbType";
static const char __pyx_k_adp_type[] = "adp_type";
static const char __pyx_k_adv_type[] = "adv_type";
static const char __pyx_k_col2info[] = "col2info";
static const char __pyx_k_definite[] = "definite";
static const char __pyx_k_features[] = "features";
static const char __pyx_k_field2id[] = "field2id";
static const char __pyx_k_field_id[] = "field_id";
static const char __pyx_k_inf_form[] = "inf_form";
static const char __pyx_k_negative[] = "negative";
static const char __pyx_k_num_form[] = "num_form";
static const char __pyx_k_num_type[] = "num_type";
static const char __pyx_k_orth_str[] = "orth_str";
static const char __pyx_k_polarity[] = "polarity";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_univ_pos[] = "univ_pos";
static const char __pyx_k_POS_CCONJ[] = "POS_CCONJ";
static const char __pyx_k_POS_PROPN[] = "POS_PROPN";
static const char __pyx_k_POS_PUNCT[] = "POS_PUNCT";
static const char __pyx_k_POS_SCONJ[] = "POS_SCONJ";
static const char __pyx_k_POS_SPACE[] = "POS_SPACE";
static const char __pyx_k_PunctSide[] = "PunctSide";
static const char __pyx_k_PunctType[] = "PunctType";
static const char __pyx_k_Style_yes[] = "Style_yes";
static const char __pyx_k_Tense_fut[] = "Tense_fut";
static const char __pyx_k_Tense_imp[] = "Tense_imp";
static const char __pyx_k_Voice_act[] = "Voice_act";
static const char __pyx_k_Voice_cau[] = "Voice_cau";
static const char __pyx_k_Voice_int[] = "Voice_int";
static const char __pyx_k_Voice_mid[] = "Voice_mid";
static const char __pyx_k_as_string[] = "as_string";
static const char __pyx_k_conj_type[] = "conj_type";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_field2col[] = "field2col";
static const char __pyx_k_lemmatize[] = "lemmatize";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_name_type[] = "name_type";
static const char __pyx_k_noun_type[] = "noun_type";
static const char __pyx_k_num_value[] = "num_value";
static const char __pyx_k_part_form[] = "part_form";
static const char __pyx_k_part_type[] = "part_type";
static const char __pyx_k_prep_case[] = "prep_case";
static const char __pyx_k_pron_type[] = "pron_type";
static const char __pyx_k_verb_form[] = "verb_form";
static const char __pyx_k_verb_type[] = "verb_type";
static const char __pyx_k_AdvType_ex[] = "AdvType_ex";
static const char __pyx_k_Aspect_hab[] = "Aspect_hab";
static const char __pyx_k_Aspect_imp[] = "Aspect_imp";
static const char __pyx_k_Degree_abs[] = "Degree_abs";
static const char __pyx_k_Degree_cmp[] = "Degree_cmp";
static const char __pyx_k_Degree_com[] = "Degree_com";
static const char __pyx_k_Degree_dim[] = "Degree_dim";
static const char __pyx_k_Degree_pos[] = "Degree_pos";
static const char __pyx_k_Degree_sup[] = "Degree_sup";
static const char __pyx_k_Derivation[] = "Derivation";
static const char __pyx_k_Gender_com[] = "Gender_com";
static const char __pyx_k_Gender_fem[] = "Gender_fem";
static const char __pyx_k_Morphology[] = "Morphology";
static const char __pyx_k_Number_com[] = "Number_com";
static const char __pyx_k_Person_one[] = "Person_one";
static const char __pyx_k_Person_two[] = "Person_two";
static const char __pyx_k_Polite_inf[] = "Polite_inf";
static const char __pyx_k_Polite_pol[] = "Polite_pol";
static const char __pyx_k_Prefix_yes[] = "Prefix_yes";
static const char __pyx_k_Reflex_yes[] = "Reflex_yes";
static const char __pyx_k_Style_arch[] = "Style_arch";
static const char __pyx_k_Style_coll[] = "Style_coll";
static const char __pyx_k_Style_derg[] = "Style_derg";
static const char __pyx_k_Style_expr[] = "Style_expr";
static const char __pyx_k_Style_norm[] = "Style_norm";
static const char __pyx_k_Style_poet[] = "Style_poet";
static const char __pyx_k_Style_rare[] = "Style_rare";
static const char __pyx_k_Style_sing[] = "Style_sing";
static const char __pyx_k_Style_vrnc[] = "Style_vrnc";
static const char __pyx_k_Style_vulg[] = "Style_vulg";
static const char __pyx_k_Tense_past[] = "Tense_past";
static const char __pyx_k_Tense_pres[] = "Tense_pres";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_Voice_pass[] = "Voice_pass";
static const char __pyx_k_attr2field[] = "attr2field";
static const char __pyx_k_basestring[] = "basestring_";
static const char __pyx_k_derivation[] = "derivation";
static const char __pyx_k_feat2field[] = "feat2field";
static const char __pyx_k_lemmatizer[] = "lemmatizer";
static const char __pyx_k_morphology[] = "morphology";
static const char __pyx_k_punct_side[] = "punct_side";
static const char __pyx_k_punct_type[] = "punct_type";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_AdpType_voc[] = "AdpType_voc";
static const char __pyx_k_AdvType_cau[] = "AdvType_cau";
static const char __pyx_k_AdvType_deg[] = "AdvType_deg";
static const char __pyx_k_AdvType_loc[] = "AdvType_loc";
static const char __pyx_k_AdvType_man[] = "AdvType_man";
static const char __pyx_k_AdvType_mod[] = "AdvType_mod";
static const char __pyx_k_AdvType_sta[] = "AdvType_sta";
static const char __pyx_k_AdvType_tim[] = "AdvType_tim";
static const char __pyx_k_Animacy_hum[] = "Animacy_hum";
static const char __pyx_k_Aspect_iter[] = "Aspect_iter";
static const char __pyx_k_Aspect_none[] = "Aspect_none";
static const char __pyx_k_Aspect_perf[] = "Aspect_perf";
static const char __pyx_k_Aspect_prog[] = "Aspect_prog";
static const char __pyx_k_Connegative[] = "Connegative";
static const char __pyx_k_Degree_comp[] = "Degree_comp";
static const char __pyx_k_Degree_none[] = "Degree_none";
static const char __pyx_k_Foreign_yes[] = "Foreign_yes";
static const char __pyx_k_Gender_masc[] = "Gender_masc";
static const char __pyx_k_Gender_neut[] = "Gender_neut";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_InfForm_one[] = "InfForm_one";
static const char __pyx_k_InfForm_two[] = "InfForm_two";
static const char __pyx_k_NumType_gen[] = "NumType_gen";
static const char __pyx_k_NumType_ord[] = "NumType_ord";
static const char __pyx_k_Number_dual[] = "Number_dual";
static const char __pyx_k_Number_none[] = "Number_none";
static const char __pyx_k_Number_plur[] = "Number_plur";
static const char __pyx_k_Number_ptan[] = "Number_ptan";
static const char __pyx_k_Number_sing[] = "Number_sing";
static const char __pyx_k_Person_none[] = "Person_none";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_connegative[] = "connegative";
static const char __pyx_k_ensure_path[] = "ensure_path";
static const char __pyx_k_feat2offset[] = "feat2offset";
static const char __pyx_k_field2feats[] = "field2feats";
static const char __pyx_k_field_sizes[] = "field_sizes";
static const char __pyx_k_seen_fields[] = "seen_fields";
static const char __pyx_k_AdpType_circ[] = "AdpType_circ";
static const char __pyx_k_AdpType_post[] = "AdpType_post";
static const char __pyx_k_AdpType_prep[] = "AdpType_prep";
static const char __pyx_k_Animacy_anim[] = "Animacy_anim";
static const char __pyx_k_Animacy_inan[] = "Animacy_inan";
static const char __pyx_k_Animacy_nhum[] = "Animacy_nhum";
static const char __pyx_k_Aspect_prosp[] = "Aspect_prosp";
static const char __pyx_k_Definite_def[] = "Definite_def";
static const char __pyx_k_Definite_ind[] = "Definite_ind";
static const char __pyx_k_Definite_red[] = "Definite_red";
static const char __pyx_k_Definite_two[] = "Definite_two";
static const char __pyx_k_LOWER_FIELDS[] = "LOWER_FIELDS";
static const char __pyx_k_NameType_com[] = "NameType_com";
static const char __pyx_k_NameType_geo[] = "NameType_geo";
static const char __pyx_k_NameType_giv[] = "NameType_giv";
static const char __pyx_k_NameType_nat[] = "NameType_nat";
static const char __pyx_k_NameType_oth[] = "NameType_oth";
static const char __pyx_k_NameType_pro[] = "NameType_pro";
static const char __pyx_k_NameType_prs[] = "NameType_prs";
static const char __pyx_k_NameType_sur[] = "NameType_sur";
static const char __pyx_k_Negative_neg[] = "Negative_neg";
static const char __pyx_k_Negative_pos[] = "Negative_pos";
static const char __pyx_k_Negative_yes[] = "Negative_yes";
static const char __pyx_k_NounType_com[] = "NounType_com";
static const char __pyx_k_NumForm_word[] = "NumForm_word";
static const char __pyx_k_NumType_card[] = "NumType_card";
static const char __pyx_k_NumType_dist[] = "NumType_dist";
static const char __pyx_k_NumType_dual[] = "NumType_dual";
static const char __pyx_k_NumType_frac[] = "NumType_frac";
static const char __pyx_k_NumType_mult[] = "NumType_mult";
static const char __pyx_k_NumType_none[] = "NumType_none";
static const char __pyx_k_NumType_sets[] = "NumType_sets";
static const char __pyx_k_NumValue_one[] = "NumValue_one";
static const char __pyx_k_NumValue_two[] = "NumValue_two";
static const char __pyx_k_Number_count[] = "Number_count";
static const char __pyx_k_PartForm_agt[] = "PartForm_agt";
static const char __pyx_k_PartForm_neg[] = "PartForm_neg";
static const char __pyx_k_PartType_emp[] = "PartType_emp";
static const char __pyx_k_PartType_inf[] = "PartType_inf";
static const char __pyx_k_PartType_mod[] = "PartType_mod";
static const char __pyx_k_PartType_res[] = "PartType_res";
static const char __pyx_k_PartType_vbp[] = "PartType_vbp";
static const char __pyx_k_Person_three[] = "Person_three";
static const char __pyx_k_Polarity_neg[] = "Polarity_neg";
static const char __pyx_k_Polarity_pos[] = "Polarity_pos";
static const char __pyx_k_PrepCase_npr[] = "PrepCase_npr";
static const char __pyx_k_PrepCase_pre[] = "PrepCase_pre";
static const char __pyx_k_PronType_art[] = "PronType_art";
static const char __pyx_k_PronType_dem[] = "PronType_dem";
static const char __pyx_k_PronType_exc[] = "PronType_exc";
static const char __pyx_k_PronType_ind[] = "PronType_ind";
static const char __pyx_k_PronType_int[] = "PronType_int";
static const char __pyx_k_PronType_neg[] = "PronType_neg";
static const char __pyx_k_PronType_prs[] = "PronType_prs";
static const char __pyx_k_PronType_rcp[] = "PronType_rcp";
static const char __pyx_k_PronType_rel[] = "PronType_rel";
static const char __pyx_k_PronType_tot[] = "PronType_tot";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_StyleVariant[] = "StyleVariant";
static const char __pyx_k_VerbForm_fin[] = "VerbForm_fin";
static const char __pyx_k_VerbForm_gdv[] = "VerbForm_gdv";
static const char __pyx_k_VerbForm_ger[] = "VerbForm_ger";
static const char __pyx_k_VerbForm_inf[] = "VerbForm_inf";
static const char __pyx_k_VerbForm_sup[] = "VerbForm_sup";
static const char __pyx_k_VerbType_aux[] = "VerbType_aux";
static const char __pyx_k_VerbType_cop[] = "VerbType_cop";
static const char __pyx_k_VerbType_mod[] = "VerbType_mod";
static const char __pyx_k_intify_attrs[] = "intify_attrs";
static const char __pyx_k_string_store[] = "string_store";
static const char __pyx_k_AdvType_adadj[] = "AdvType_adadj";
static const char __pyx_k_ConjType_comp[] = "ConjType_comp";
static const char __pyx_k_ConjType_oper[] = "ConjType_oper";
static const char __pyx_k_Definite_cons[] = "Definite_cons";
static const char __pyx_k_Derivation_ja[] = "Derivation_ja";
static const char __pyx_k_Derivation_vs[] = "Derivation_vs";
static const char __pyx_k_FEATURE_NAMES[] = "FEATURE_NAMES";
static const char __pyx_k_InfForm_three[] = "InfForm_three";
static const char __pyx_k_NounType_prop[] = "NounType_prop";
static const char __pyx_k_NumForm_combi[] = "NumForm_combi";
static const char __pyx_k_NumForm_digit[] = "NumForm_digit";
static const char __pyx_k_NumForm_roman[] = "NumForm_roman";
static const char __pyx_k_PartForm_past[] = "PartForm_past";
static const char __pyx_k_PartForm_pres[] = "PartForm_pres";
static const char __pyx_k_PronType_clit[] = "PronType_clit";
static const char __pyx_k_PunctSide_fin[] = "PunctSide_fin";
static const char __pyx_k_PunctSide_ini[] = "PunctSide_ini";
static const char __pyx_k_VerbForm_conv[] = "VerbForm_conv";
static const char __pyx_k_VerbForm_none[] = "VerbForm_none";
static const char __pyx_k_VerbForm_part[] = "VerbForm_part";
static const char __pyx_k_do_deprecated[] = "_do_deprecated";
static const char __pyx_k_fieldid2field[] = "fieldid2field";
static const char __pyx_k_get_string_id[] = "get_string_id";
static const char __pyx_k_style_variant[] = "style_variant";
static const char __pyx_k_Derivation_sti[] = "Derivation_sti";
static const char __pyx_k_Derivation_ton[] = "Derivation_ton";
static const char __pyx_k_FEATURE_FIELDS[] = "FEATURE_FIELDS";
static const char __pyx_k_Gender_dat_fem[] = "Gender_dat_fem";
static const char __pyx_k_Gender_erg_fem[] = "Gender_erg_fem";
static const char __pyx_k_NounType_class[] = "NounType_class";
static const char __pyx_k_NumValue_three[] = "NumValue_three";
static const char __pyx_k_Person_abs_one[] = "Person_abs_one";
static const char __pyx_k_Person_abs_two[] = "Person_abs_two";
static const char __pyx_k_Person_dat_one[] = "Person_dat_one";
static const char __pyx_k_Person_dat_two[] = "Person_dat_two";
static const char __pyx_k_Person_erg_one[] = "Person_erg_one";
static const char __pyx_k_Person_erg_two[] = "Person_erg_two";
static const char __pyx_k_Polite_abs_inf[] = "Polite_abs_inf";
static const char __pyx_k_Polite_abs_pol[] = "Polite_abs_pol";
static const char __pyx_k_Polite_dat_inf[] = "Polite_dat_inf";
static const char __pyx_k_Polite_dat_pol[] = "Polite_dat_pol";
static const char __pyx_k_Polite_erg_inf[] = "Polite_erg_inf";
static const char __pyx_k_Polite_erg_pol[] = "Polite_erg_pol";
static const char __pyx_k_PunctType_brck[] = "PunctType_brck";
static const char __pyx_k_PunctType_colo[] = "PunctType_colo";
static const char __pyx_k_PunctType_comm[] = "PunctType_comm";
static const char __pyx_k_PunctType_dash[] = "PunctType_dash";
static const char __pyx_k_PunctType_excl[] = "PunctType_excl";
static const char __pyx_k_PunctType_peri[] = "PunctType_peri";
static const char __pyx_k_PunctType_qest[] = "PunctType_qest";
static const char __pyx_k_PunctType_quot[] = "PunctType_quot";
static const char __pyx_k_PunctType_semi[] = "PunctType_semi";
static const char __pyx_k_VerbForm_trans[] = "VerbForm_trans";
static const char __pyx_k_VerbType_light[] = "VerbType_light";
static const char __pyx_k_morphology_pyx[] = "morphology.pyx";
static const char __pyx_k_AdpType_comprep[] = "AdpType_comprep";
static const char __pyx_k_Connegative_yes[] = "Connegative_yes";
static const char __pyx_k_Derivation_inen[] = "Derivation_inen";
static const char __pyx_k_Derivation_ttaa[] = "Derivation_ttaa";
static const char __pyx_k_Foreign_foreign[] = "Foreign_foreign";
static const char __pyx_k_Foreign_fscript[] = "Foreign_fscript";
static const char __pyx_k_Foreign_tscript[] = "Foreign_tscript";
static const char __pyx_k_Gender_dat_masc[] = "Gender_dat_masc";
static const char __pyx_k_Gender_erg_masc[] = "Gender_erg_masc";
static const char __pyx_k_Gender_psor_fem[] = "Gender_psor_fem";
static const char __pyx_k_Number_abs_plur[] = "Number_abs_plur";
static const char __pyx_k_Number_abs_sing[] = "Number_abs_sing";
static const char __pyx_k_Number_dat_plur[] = "Number_dat_plur";
static const char __pyx_k_Number_dat_sing[] = "Number_dat_sing";
static const char __pyx_k_Number_erg_plur[] = "Number_erg_plur";
static const char __pyx_k_Number_erg_sing[] = "Number_erg_sing";
static const char __pyx_k_Person_psor_one[] = "Person_psor_one";
static const char __pyx_k_Person_psor_two[] = "Person_psor_two";
static const char __pyx_k_normalize_props[] = "_normalize_props";
static const char __pyx_k_parts_of_speech[] = "parts_of_speech";
static const char __pyx_k_Derivation_minen[] = "Derivation_minen";
static const char __pyx_k_Derivation_ttain[] = "Derivation_ttain";
static const char __pyx_k_Gender_psor_masc[] = "Gender_psor_masc";
static const char __pyx_k_Gender_psor_neut[] = "Gender_psor_neut";
static const char __pyx_k_Number_psee_plur[] = "Number_psee_plur";
static const char __pyx_k_Number_psee_sing[] = "Number_psee_sing";
static const char __pyx_k_Number_psor_plur[] = "Number_psor_plur";
static const char __pyx_k_Number_psor_sing[] = "Number_psor_sing";
static const char __pyx_k_Person_abs_three[] = "Person_abs_three";
static const char __pyx_k_Person_dat_three[] = "Person_dat_three";
static const char __pyx_k_Person_erg_three[] = "Person_erg_three";
static const char __pyx_k_PronType_advPart[] = "PronType_advPart";
static const char __pyx_k_PronType_default[] = "PronType_default";
static const char __pyx_k_VerbForm_partFut[] = "VerbForm_partFut";
static const char __pyx_k_add_special_case[] = "add_special_case";
static const char __pyx_k_create_class_map[] = "create_class_map";
static const char __pyx_k_get_field_offset[] = "get_field_offset";
static const char __pyx_k_spacy_morphology[] = "spacy.morphology";
static const char __pyx_k_Derivation_lainen[] = "Derivation_lainen";
static const char __pyx_k_Person_psor_three[] = "Person_psor_three";
static const char __pyx_k_VerbForm_partPast[] = "VerbForm_partPast";
static const char __pyx_k_VerbForm_partPres[] = "VerbForm_partPres";
static const char __pyx_k_load_from_tag_map[] = "_load_from_tag_map";
static const char __pyx_k_MorphologyClassMap[] = "MorphologyClassMap";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_StyleVariant_styleBound[] = "StyleVariant_styleBound";
static const char __pyx_k_StyleVariant_styleShort[] = "StyleVariant_styleShort";
static const char __pyx_k_MorphologyClassMap___init[] = "MorphologyClassMap.__init__";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_MorphologyClassMap_field_sizes[] = "MorphologyClassMap.field_sizes";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_MorphologyClassMap_get_field_off[] = "MorphologyClassMap.get_field_offset";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_n_u_Abbr;
static PyObject *__pyx_n_u_Abbr_yes;
static PyObject *__pyx_n_u_AdpType;
static PyObject *__pyx_n_u_AdpType_circ;
static PyObject *__pyx_n_u_AdpType_comprep;
static PyObject *__pyx_n_u_AdpType_post;
static PyObject *__pyx_n_u_AdpType_prep;
static PyObject *__pyx_n_u_AdpType_voc;
static PyObject *__pyx_n_u_AdvType;
static PyObject *__pyx_n_u_AdvType_adadj;
static PyObject *__pyx_n_u_AdvType_cau;
static PyObject *__pyx_n_u_AdvType_deg;
static PyObject *__pyx_n_u_AdvType_ex;
static PyObject *__pyx_n_u_AdvType_loc;
static PyObject *__pyx_n_u_AdvType_man;
static PyObject *__pyx_n_u_AdvType_mod;
static PyObject *__pyx_n_u_AdvType_sta;
static PyObject *__pyx_n_u_AdvType_tim;
static PyObject *__pyx_n_u_Animacy;
static PyObject *__pyx_n_u_Animacy_anim;
static PyObject *__pyx_n_u_Animacy_hum;
static PyObject *__pyx_n_u_Animacy_inan;
static PyObject *__pyx_n_u_Animacy_nhum;
static PyObject *__pyx_n_u_Aspect;
static PyObject *__pyx_n_u_Aspect_hab;
static PyObject *__pyx_n_u_Aspect_imp;
static PyObject *__pyx_n_u_Aspect_iter;
static PyObject *__pyx_n_u_Aspect_none;
static PyObject *__pyx_n_u_Aspect_perf;
static PyObject *__pyx_n_u_Aspect_prog;
static PyObject *__pyx_n_u_Aspect_prosp;
static PyObject *__pyx_n_u_Case;
static PyObject *__pyx_n_u_Case_abe;
static PyObject *__pyx_n_u_Case_abl;
static PyObject *__pyx_n_u_Case_abs;
static PyObject *__pyx_n_u_Case_acc;
static PyObject *__pyx_n_u_Case_ade;
static PyObject *__pyx_n_u_Case_all;
static PyObject *__pyx_n_u_Case_cau;
static PyObject *__pyx_n_u_Case_com;
static PyObject *__pyx_n_u_Case_dat;
static PyObject *__pyx_n_u_Case_del;
static PyObject *__pyx_n_u_Case_dis;
static PyObject *__pyx_n_u_Case_ela;
static PyObject *__pyx_n_u_Case_ess;
static PyObject *__pyx_n_u_Case_gen;
static PyObject *__pyx_n_u_Case_ill;
static PyObject *__pyx_n_u_Case_ine;
static PyObject *__pyx_n_u_Case_ins;
static PyObject *__pyx_n_u_Case_lat;
static PyObject *__pyx_n_u_Case_loc;
static PyObject *__pyx_n_u_Case_nom;
static PyObject *__pyx_n_u_Case_par;
static PyObject *__pyx_n_u_Case_sub;
static PyObject *__pyx_n_u_Case_sup;
static PyObject *__pyx_n_u_Case_tem;
static PyObject *__pyx_n_u_Case_ter;
static PyObject *__pyx_n_u_Case_tra;
static PyObject *__pyx_n_u_Case_voc;
static PyObject *__pyx_n_u_ConjType;
static PyObject *__pyx_n_u_ConjType_comp;
static PyObject *__pyx_n_u_ConjType_oper;
static PyObject *__pyx_n_u_Connegative;
static PyObject *__pyx_n_u_Connegative_yes;
static PyObject *__pyx_n_s_Counter;
static PyObject *__pyx_n_u_Definite;
static PyObject *__pyx_n_u_Definite_cons;
static PyObject *__pyx_n_u_Definite_def;
static PyObject *__pyx_n_u_Definite_ind;
static PyObject *__pyx_n_u_Definite_red;
static PyObject *__pyx_n_u_Definite_two;
static PyObject *__pyx_n_u_Degree;
static PyObject *__pyx_n_u_Degree_abs;
static PyObject *__pyx_n_u_Degree_cmp;
static PyObject *__pyx_n_u_Degree_com;
static PyObject *__pyx_n_u_Degree_comp;
static PyObject *__pyx_n_u_Degree_dim;
static PyObject *__pyx_n_u_Degree_none;
static PyObject *__pyx_n_u_Degree_pos;
static PyObject *__pyx_n_u_Degree_sup;
static PyObject *__pyx_n_u_Derivation;
static PyObject *__pyx_n_u_Derivation_inen;
static PyObject *__pyx_n_u_Derivation_ja;
static PyObject *__pyx_n_u_Derivation_lainen;
static PyObject *__pyx_n_u_Derivation_minen;
static PyObject *__pyx_n_u_Derivation_sti;
static PyObject *__pyx_n_u_Derivation_ton;
static PyObject *__pyx_n_u_Derivation_ttaa;
static PyObject *__pyx_n_u_Derivation_ttain;
static PyObject *__pyx_n_u_Derivation_vs;
static PyObject *__pyx_n_s_E014;
static PyObject *__pyx_n_s_E167;
static PyObject *__pyx_n_s_E168;
static PyObject *__pyx_n_u_Echo;
static PyObject *__pyx_n_u_Echo_ech;
static PyObject *__pyx_n_u_Echo_rdp;
static PyObject *__pyx_n_s_Errors;
static PyObject *__pyx_n_s_FEATURES;
static PyObject *__pyx_n_s_FEATURE_FIELDS;
static PyObject *__pyx_n_s_FEATURE_NAMES;
static PyObject *__pyx_n_s_FIELDS;
static PyObject *__pyx_n_u_Foreign;
static PyObject *__pyx_n_u_Foreign_foreign;
static PyObject *__pyx_n_u_Foreign_fscript;
static PyObject *__pyx_n_u_Foreign_tscript;
static PyObject *__pyx_n_u_Foreign_yes;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_u_Gender;
static PyObject *__pyx_n_u_Gender_com;
static PyObject *__pyx_n_u_Gender_dat_fem;
static PyObject *__pyx_n_u_Gender_dat_masc;
static PyObject *__pyx_n_u_Gender_erg_fem;
static PyObject *__pyx_n_u_Gender_erg_masc;
static PyObject *__pyx_n_u_Gender_fem;
static PyObject *__pyx_n_u_Gender_masc;
static PyObject *__pyx_n_u_Gender_neut;
static PyObject *__pyx_n_u_Gender_psor_fem;
static PyObject *__pyx_n_u_Gender_psor_masc;
static PyObject *__pyx_n_u_Gender_psor_neut;
static PyObject *__pyx_n_u_Hyph;
static PyObject *__pyx_n_u_Hyph_yes;
static PyObject *__pyx_n_s_IDS;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_u_InfForm;
static PyObject *__pyx_n_u_InfForm_one;
static PyObject *__pyx_n_u_InfForm_three;
static PyObject *__pyx_n_u_InfForm_two;
static PyObject *__pyx_n_s_LEMMA;
static PyObject *__pyx_n_s_LOWER_FIELDS;
static PyObject *__pyx_n_u_Mood;
static PyObject *__pyx_n_u_Mood_cnd;
static PyObject *__pyx_n_u_Mood_imp;
static PyObject *__pyx_n_u_Mood_ind;
static PyObject *__pyx_n_u_Mood_n;
static PyObject *__pyx_n_u_Mood_opt;
static PyObject *__pyx_n_u_Mood_pot;
static PyObject *__pyx_n_u_Mood_sub;
static PyObject *__pyx_n_s_Morphology;
static PyObject *__pyx_n_s_MorphologyClassMap;
static PyObject *__pyx_n_s_MorphologyClassMap___init;
static PyObject *__pyx_n_s_MorphologyClassMap_field_sizes;
static PyObject *__pyx_n_s_MorphologyClassMap_get_field_off;
static PyObject *__pyx_n_u_NIL;
static PyObject *__pyx_n_u_NameType;
static PyObject *__pyx_n_u_NameType_com;
static PyObject *__pyx_n_u_NameType_geo;
static PyObject *__pyx_n_u_NameType_giv;
static PyObject *__pyx_n_u_NameType_nat;
static PyObject *__pyx_n_u_NameType_oth;
static PyObject *__pyx_n_u_NameType_pro;
static PyObject *__pyx_n_u_NameType_prs;
static PyObject *__pyx_n_u_NameType_sur;
static PyObject *__pyx_n_u_Negative;
static PyObject *__pyx_n_u_Negative_neg;
static PyObject *__pyx_n_u_Negative_pos;
static PyObject *__pyx_n_u_Negative_yes;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_u_NounType;
static PyObject *__pyx_n_u_NounType_class;
static PyObject *__pyx_n_u_NounType_com;
static PyObject *__pyx_n_u_NounType_prop;
static PyObject *__pyx_n_u_NumForm;
static PyObject *__pyx_n_u_NumForm_combi;
static PyObject *__pyx_n_u_NumForm_digit;
static PyObject *__pyx_n_u_NumForm_roman;
static PyObject *__pyx_n_u_NumForm_word;
static PyObject *__pyx_n_u_NumType;
static PyObject *__pyx_n_u_NumType_card;
static PyObject *__pyx_n_u_NumType_dist;
static PyObject *__pyx_n_u_NumType_dual;
static PyObject *__pyx_n_u_NumType_frac;
static PyObject *__pyx_n_u_NumType_gen;
static PyObject *__pyx_n_u_NumType_mult;
static PyObject *__pyx_n_u_NumType_none;
static PyObject *__pyx_n_u_NumType_ord;
static PyObject *__pyx_n_u_NumType_sets;
static PyObject *__pyx_n_u_NumValue;
static PyObject *__pyx_n_u_NumValue_one;
static PyObject *__pyx_n_u_NumValue_three;
static PyObject *__pyx_n_u_NumValue_two;
static PyObject *__pyx_n_u_Number;
static PyObject *__pyx_n_u_Number_abs_plur;
static PyObject *__pyx_n_u_Number_abs_sing;
static PyObject *__pyx_n_u_Number_com;
static PyObject *__pyx_n_u_Number_count;
static PyObject *__pyx_n_u_Number_dat_plur;
static PyObject *__pyx_n_u_Number_dat_sing;
static PyObject *__pyx_n_u_Number_dual;
static PyObject *__pyx_n_u_Number_erg_plur;
static PyObject *__pyx_n_u_Number_erg_sing;
static PyObject *__pyx_n_u_Number_none;
static PyObject *__pyx_n_u_Number_plur;
static PyObject *__pyx_n_u_Number_psee_plur;
static PyObject *__pyx_n_u_Number_psee_sing;
static PyObject *__pyx_n_u_Number_psor_plur;
static PyObject *__pyx_n_u_Number_psor_sing;
static PyObject *__pyx_n_u_Number_ptan;
static PyObject *__pyx_n_u_Number_sing;
static PyObject *__pyx_n_u_POS;
static PyObject *__pyx_n_u_POS_ADJ;
static PyObject *__pyx_n_u_POS_ADP;
static PyObject *__pyx_n_u_POS_ADV;
static PyObject *__pyx_n_u_POS_AUX;
static PyObject *__pyx_n_u_POS_CCONJ;
static PyObject *__pyx_n_u_POS_CONJ;
static PyObject *__pyx_n_u_POS_DET;
static PyObject *__pyx_n_u_POS_EOL;
static PyObject *__pyx_n_s_POS_IDS;
static PyObject *__pyx_n_u_POS_INTJ;
static PyObject *__pyx_n_u_POS_NOUN;
static PyObject *__pyx_n_u_POS_NUM;
static PyObject *__pyx_n_u_POS_PART;
static PyObject *__pyx_n_u_POS_PRON;
static PyObject *__pyx_n_u_POS_PROPN;
static PyObject *__pyx_n_u_POS_PUNCT;
static PyObject *__pyx_n_u_POS_SCONJ;
static PyObject *__pyx_n_u_POS_SPACE;
static PyObject *__pyx_n_u_POS_SYM;
static PyObject *__pyx_n_u_POS_VERB;
static PyObject *__pyx_n_u_POS_X;
static PyObject *__pyx_n_u_PartForm;
static PyObject *__pyx_n_u_PartForm_agt;
static PyObject *__pyx_n_u_PartForm_neg;
static PyObject *__pyx_n_u_PartForm_past;
static PyObject *__pyx_n_u_PartForm_pres;
static PyObject *__pyx_n_u_PartType;
static PyObject *__pyx_n_u_PartType_emp;
static PyObject *__pyx_n_u_PartType_inf;
static PyObject *__pyx_n_u_PartType_mod;
static PyObject *__pyx_n_u_PartType_res;
static PyObject *__pyx_n_u_PartType_vbp;
static PyObject *__pyx_n_u_Person;
static PyObject *__pyx_n_u_Person_abs_one;
static PyObject *__pyx_n_u_Person_abs_three;
static PyObject *__pyx_n_u_Person_abs_two;
static PyObject *__pyx_n_u_Person_dat_one;
static PyObject *__pyx_n_u_Person_dat_three;
static PyObject *__pyx_n_u_Person_dat_two;
static PyObject *__pyx_n_u_Person_erg_one;
static PyObject *__pyx_n_u_Person_erg_three;
static PyObject *__pyx_n_u_Person_erg_two;
static PyObject *__pyx_n_u_Person_none;
static PyObject *__pyx_n_u_Person_one;
static PyObject *__pyx_n_u_Person_psor_one;
static PyObject *__pyx_n_u_Person_psor_three;
static PyObject *__pyx_n_u_Person_psor_two;
static PyObject *__pyx_n_u_Person_three;
static PyObject *__pyx_n_u_Person_two;
static PyObject *__pyx_n_u_Polarity;
static PyObject *__pyx_n_u_Polarity_neg;
static PyObject *__pyx_n_u_Polarity_pos;
static PyObject *__pyx_n_u_Polite;
static PyObject *__pyx_n_u_Polite_abs_inf;
static PyObject *__pyx_n_u_Polite_abs_pol;
static PyObject *__pyx_n_u_Polite_dat_inf;
static PyObject *__pyx_n_u_Polite_dat_pol;
static PyObject *__pyx_n_u_Polite_erg_inf;
static PyObject *__pyx_n_u_Polite_erg_pol;
static PyObject *__pyx_n_u_Polite_inf;
static PyObject *__pyx_n_u_Polite_pol;
static PyObject *__pyx_n_u_Poss;
static PyObject *__pyx_n_u_Poss_yes;
static PyObject *__pyx_n_u_Prefix;
static PyObject *__pyx_n_u_Prefix_yes;
static PyObject *__pyx_n_u_PrepCase;
static PyObject *__pyx_n_u_PrepCase_npr;
static PyObject *__pyx_n_u_PrepCase_pre;
static PyObject *__pyx_n_u_PronType;
static PyObject *__pyx_n_u_PronType_advPart;
static PyObject *__pyx_n_u_PronType_art;
static PyObject *__pyx_n_u_PronType_clit;
static PyObject *__pyx_n_u_PronType_default;
static PyObject *__pyx_n_u_PronType_dem;
static PyObject *__pyx_n_u_PronType_exc;
static PyObject *__pyx_n_u_PronType_ind;
static PyObject *__pyx_n_u_PronType_int;
static PyObject *__pyx_n_u_PronType_neg;
static PyObject *__pyx_n_u_PronType_prs;
static PyObject *__pyx_n_u_PronType_rcp;
static PyObject *__pyx_n_u_PronType_rel;
static PyObject *__pyx_n_u_PronType_tot;
static PyObject *__pyx_n_u_PunctSide;
static PyObject *__pyx_n_u_PunctSide_fin;
static PyObject *__pyx_n_u_PunctSide_ini;
static PyObject *__pyx_n_u_PunctType;
static PyObject *__pyx_n_u_PunctType_brck;
static PyObject *__pyx_n_u_PunctType_colo;
static PyObject *__pyx_n_u_PunctType_comm;
static PyObject *__pyx_n_u_PunctType_dash;
static PyObject *__pyx_n_u_PunctType_excl;
static PyObject *__pyx_n_u_PunctType_peri;
static PyObject *__pyx_n_u_PunctType_qest;
static PyObject *__pyx_n_u_PunctType_quot;
static PyObject *__pyx_n_u_PunctType_semi;
static PyObject *__pyx_n_u_Reflex;
static PyObject *__pyx_n_u_Reflex_yes;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_u_SP;
static PyObject *__pyx_n_u_SP_2;
static PyObject *__pyx_n_u_Style;
static PyObject *__pyx_n_u_StyleVariant;
static PyObject *__pyx_n_u_StyleVariant_styleBound;
static PyObject *__pyx_n_u_StyleVariant_styleShort;
static PyObject *__pyx_n_u_Style_arch;
static PyObject *__pyx_n_u_Style_coll;
static PyObject *__pyx_n_u_Style_derg;
static PyObject *__pyx_n_u_Style_expr;
static PyObject *__pyx_n_u_Style_norm;
static PyObject *__pyx_n_u_Style_poet;
static PyObject *__pyx_n_u_Style_rare;
static PyObject *__pyx_n_u_Style_sing;
static PyObject *__pyx_n_u_Style_vrnc;
static PyObject *__pyx_n_u_Style_vulg;
static PyObject *__pyx_n_u_Style_yes;
static PyObject *__pyx_n_u_Tense;
static PyObject *__pyx_n_u_Tense_fut;
static PyObject *__pyx_n_u_Tense_imp;
static PyObject *__pyx_n_u_Tense_past;
static PyObject *__pyx_n_u_Tense_pres;
static PyObject *__pyx_n_u_Typo;
static PyObject *__pyx_n_u_Typo_yes;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_u_VerbForm;
static PyObject *__pyx_n_u_VerbForm_conv;
static PyObject *__pyx_n_u_VerbForm_fin;
static PyObject *__pyx_n_u_VerbForm_gdv;
static PyObject *__pyx_n_u_VerbForm_ger;
static PyObject *__pyx_n_u_VerbForm_inf;
static PyObject *__pyx_n_u_VerbForm_none;
static PyObject *__pyx_n_u_VerbForm_part;
static PyObject *__pyx_n_u_VerbForm_partFut;
static PyObject *__pyx_n_u_VerbForm_partPast;
static PyObject *__pyx_n_u_VerbForm_partPres;
static PyObject *__pyx_n_u_VerbForm_sup;
static PyObject *__pyx_n_u_VerbForm_trans;
static PyObject *__pyx_n_u_VerbType;
static PyObject *__pyx_n_u_VerbType_aux;
static PyObject *__pyx_n_u_VerbType_cop;
static PyObject *__pyx_n_u_VerbType_light;
static PyObject *__pyx_n_u_VerbType_mod;
static PyObject *__pyx_n_u_Voice;
static PyObject *__pyx_n_u_Voice_act;
static PyObject *__pyx_n_u_Voice_cau;
static PyObject *__pyx_n_u_Voice_int;
static PyObject *__pyx_n_u_Voice_mid;
static PyObject *__pyx_n_u_Voice_pass;
static PyObject *__pyx_n_s__11;
static PyObject *__pyx_n_u__2;
static PyObject *__pyx_n_u_abbr;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_special_case;
static PyObject *__pyx_n_u_adp_type;
static PyObject *__pyx_n_u_adv_type;
static PyObject *__pyx_n_u_animacy;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_as_int;
static PyObject *__pyx_n_s_as_string;
static PyObject *__pyx_n_u_aspect;
static PyObject *__pyx_n_s_attr;
static PyObject *__pyx_n_s_attr2field;
static PyObject *__pyx_n_s_attrs;
static PyObject *__pyx_n_s_basestring;
static PyObject *__pyx_n_u_case;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_col2info;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_compat;
static PyObject *__pyx_n_u_conj_type;
static PyObject *__pyx_n_u_connegative;
static PyObject *__pyx_n_s_create_class_map;
static PyObject *__pyx_n_u_definite;
static PyObject *__pyx_n_u_degree;
static PyObject *__pyx_n_u_derivation;
static PyObject *__pyx_n_s_do_deprecated;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_u_echo;
static PyObject *__pyx_n_s_ensure_path;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_exc;
static PyObject *__pyx_n_s_feat;
static PyObject *__pyx_n_s_feat2field;
static PyObject *__pyx_n_s_feat2offset;
static PyObject *__pyx_n_s_feat_id;
static PyObject *__pyx_n_s_feature;
static PyObject *__pyx_n_s_features;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_field2col;
static PyObject *__pyx_n_s_field2feats;
static PyObject *__pyx_n_s_field2id;
static PyObject *__pyx_n_s_field_id;
static PyObject *__pyx_n_s_field_sizes;
static PyObject *__pyx_n_s_fieldid2field;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_force;
static PyObject *__pyx_n_u_foreign;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_u_gender;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_field_offset;
static PyObject *__pyx_n_s_get_string_id;
static PyObject *__pyx_n_u_hyph;
static PyObject *__pyx_n_s_id2feat;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_u_inf_form;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_intify_attrs;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_lemmatize;
static PyObject *__pyx_n_s_lemmatizer;
static PyObject *__pyx_n_s_load_from_tag_map;
static PyObject *__pyx_n_s_lookup;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_u_mood;
static PyObject *__pyx_n_s_morph;
static PyObject *__pyx_n_u_morph;
static PyObject *__pyx_n_s_morphology;
static PyObject *__pyx_kp_s_morphology_pyx;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_name_type;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_u_negative;
static PyObject *__pyx_n_s_normalize_props;
static PyObject *__pyx_n_u_noun_type;
static PyObject *__pyx_n_u_num_form;
static PyObject *__pyx_n_u_num_type;
static PyObject *__pyx_n_u_num_value;
static PyObject *__pyx_n_u_number;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_n_s_orth;
static PyObject *__pyx_n_s_orth_str;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_u_part_form;
static PyObject *__pyx_n_u_part_type;
static PyObject *__pyx_n_s_parts_of_speech;
static PyObject *__pyx_n_u_person;
static PyObject *__pyx_n_u_polarity;
static PyObject *__pyx_n_u_polite;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_u_pos;
static PyObject *__pyx_n_u_poss;
static PyObject *__pyx_n_u_prefix;
static PyObject *__pyx_n_u_prep_case;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_u_pron_type;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_props;
static PyObject *__pyx_n_u_punct_side;
static PyObject *__pyx_n_u_punct_type;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_u_reflex;
static PyObject *__pyx_n_s_seen_fields;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setdefault;
static PyObject *__pyx_n_s_spacy_morphology;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_srsly;
static PyObject *__pyx_n_s_string_store;
static PyObject *__pyx_n_s_strings;
static PyObject *__pyx_n_u_style;
static PyObject *__pyx_n_u_style_variant;
static PyObject *__pyx_n_s_symbols;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_tag_map;
static PyObject *__pyx_n_s_tag_str;
static PyObject *__pyx_n_u_tense;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_u_typo;
static PyObject *__pyx_n_s_univ_pos;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_u_upper;
static PyObject *__pyx_n_s_util;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_u_verb_form;
static PyObject *__pyx_n_u_verb_type;
static PyObject *__pyx_n_u_voice;
static PyObject *__pyx_pf_5spacy_10morphology__normalize_props(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_props); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_18MorphologyClassMap___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_features); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_18MorphologyClassMap_2field_sizes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_18MorphologyClassMap_4get_field_offset(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_field); /* proto */
static int __pyx_pf_5spacy_10morphology_10Morphology___init__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_string_store, PyObject *__pyx_v_tag_map, PyObject *__pyx_v_lemmatizer, PyObject *__pyx_v_exc); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_2_load_from_tag_map(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_tag_map); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_4__reduce__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_6add(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_features); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_8get(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_10update(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph, PyObject *__pyx_v_features); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_12lemmatize(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_v_univ_pos, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_orth, PyObject *__pyx_v_morphology); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_14add_special_case(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_tag_str, PyObject *__pyx_v_orth_str, PyObject *__pyx_v_attrs, CYTHON_UNUSED PyObject *__pyx_v_force); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_16load_morph_exceptions(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_exc); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_18create_class_map(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_3mem___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_7strings___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static int __pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer_2__set__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer_4__del__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_7tag_map___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_9tag_names___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_13reverse_index___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_3exc___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_9_feat_map___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_6_cache___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_6n_tags___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_2get_int_tag(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pos_); /* proto */
static PyObject *__pyx_pf_5spacy_10morphology_4intify_features(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_features); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5spacy_10morphology_Morphology(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
/* Late includes */

/* "spacy/morphology.pyx":68
 * 
 * 
 * def _normalize_props(props):             # <<<<<<<<<<<<<<
 *     """Transform deprecated string keys to correct names."""
 *     out = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_1_normalize_props(PyObject *__pyx_self, PyObject *__pyx_v_props); /*proto*/
static char __pyx_doc_5spacy_10morphology__normalize_props[] = "Transform deprecated string keys to correct names.";
static PyMethodDef __pyx_mdef_5spacy_10morphology_1_normalize_props = {"_normalize_props", (PyCFunction)__pyx_pw_5spacy_10morphology_1_normalize_props, METH_O, __pyx_doc_5spacy_10morphology__normalize_props};
static PyObject *__pyx_pw_5spacy_10morphology_1_normalize_props(PyObject *__pyx_self, PyObject *__pyx_v_props) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_normalize_props (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology__normalize_props(__pyx_self, ((PyObject *)__pyx_v_props));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology__normalize_props(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_props) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_attr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  __Pyx_RefNannySetupContext("_normalize_props", 0);
  __Pyx_INCREF(__pyx_v_props);

  /* "spacy/morphology.pyx":70
 * def _normalize_props(props):
 *     """Transform deprecated string keys to correct names."""
 *     out = {}             # <<<<<<<<<<<<<<
 *     props = dict(props)
 *     for key in FIELDS:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":71
 *     """Transform deprecated string keys to correct names."""
 *     out = {}
 *     props = dict(props)             # <<<<<<<<<<<<<<
 *     for key in FIELDS:
 *         if key in props:
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_props, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":72
 *     out = {}
 *     props = dict(props)
 *     for key in FIELDS:             # <<<<<<<<<<<<<<
 *         if key in props:
 *             value = str(props[key]).lower()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FIELDS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 72, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":73
 *     props = dict(props)
 *     for key in FIELDS:
 *         if key in props:             # <<<<<<<<<<<<<<
 *             value = str(props[key]).lower()
 *             # We don't have support for disjunctive int|rel features, so
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_props, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":74
 *     for key in FIELDS:
 *         if key in props:
 *             value = str(props[key]).lower()             # <<<<<<<<<<<<<<
 *             # We don't have support for disjunctive int|rel features, so
 *             # just take the first one :(
 */
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_props, __pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "spacy/morphology.pyx":77
 *             # We don't have support for disjunctive int|rel features, so
 *             # just take the first one :(
 *             if "|" in value:             # <<<<<<<<<<<<<<
 *                 value = value.split("|")[0]
 *             attr = '%s_%s' % (key, value)
 */
      __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u_, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 77, __pyx_L1_error)
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "spacy/morphology.pyx":78
 *             # just take the first one :(
 *             if "|" in value:
 *                 value = value.split("|")[0]             # <<<<<<<<<<<<<<
 *             attr = '%s_%s' % (key, value)
 *             if attr in FEATURES:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_kp_u_) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "spacy/morphology.pyx":77
 *             # We don't have support for disjunctive int|rel features, so
 *             # just take the first one :(
 *             if "|" in value:             # <<<<<<<<<<<<<<
 *                 value = value.split("|")[0]
 *             attr = '%s_%s' % (key, value)
 */
      }

      /* "spacy/morphology.pyx":79
 *             if "|" in value:
 *                 value = value.split("|")[0]
 *             attr = '%s_%s' % (key, value)             # <<<<<<<<<<<<<<
 *             if attr in FEATURES:
 *                 props.pop(key)
 */
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __pyx_t_1 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_key), __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_n_u__2);
      __pyx_t_9 += 1;
      __Pyx_GIVEREF(__pyx_n_u__2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_n_u__2);
      __pyx_t_1 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_value), __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_attr, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "spacy/morphology.pyx":80
 *                 value = value.split("|")[0]
 *             attr = '%s_%s' % (key, value)
 *             if attr in FEATURES:             # <<<<<<<<<<<<<<
 *                 props.pop(key)
 *                 props[attr] = True
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FEATURES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_attr, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "spacy/morphology.pyx":81
 *             attr = '%s_%s' % (key, value)
 *             if attr in FEATURES:
 *                 props.pop(key)             # <<<<<<<<<<<<<<
 *                 props[attr] = True
 *     for key, value in props.items():
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_props, __pyx_n_s_pop); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "spacy/morphology.pyx":82
 *             if attr in FEATURES:
 *                 props.pop(key)
 *                 props[attr] = True             # <<<<<<<<<<<<<<
 *     for key, value in props.items():
 *         if key == POS:
 */
        if (unlikely(PyObject_SetItem(__pyx_v_props, __pyx_v_attr, Py_True) < 0)) __PYX_ERR(0, 82, __pyx_L1_error)

        /* "spacy/morphology.pyx":80
 *                 value = value.split("|")[0]
 *             attr = '%s_%s' % (key, value)
 *             if attr in FEATURES:             # <<<<<<<<<<<<<<
 *                 props.pop(key)
 *                 props[attr] = True
 */
      }

      /* "spacy/morphology.pyx":73
 *     props = dict(props)
 *     for key in FIELDS:
 *         if key in props:             # <<<<<<<<<<<<<<
 *             value = str(props[key]).lower()
 *             # We don't have support for disjunctive int|rel features, so
 */
    }

    /* "spacy/morphology.pyx":72
 *     out = {}
 *     props = dict(props)
 *     for key in FIELDS:             # <<<<<<<<<<<<<<
 *         if key in props:
 *             value = str(props[key]).lower()
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":83
 *                 props.pop(key)
 *                 props[attr] = True
 *     for key, value in props.items():             # <<<<<<<<<<<<<<
 *         if key == POS:
 *             if hasattr(value, 'upper'):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_props, __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 83, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 83, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 83, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 83, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_8)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 83, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "spacy/morphology.pyx":84
 *                 props[attr] = True
 *     for key, value in props.items():
 *         if key == POS:             # <<<<<<<<<<<<<<
 *             if hasattr(value, 'upper'):
 *                 value = value.upper()
 */
    __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(__pyx_e_5spacy_5attrs_POS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyObject_RichCompare(__pyx_v_key, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":85
 *     for key, value in props.items():
 *         if key == POS:
 *             if hasattr(value, 'upper'):             # <<<<<<<<<<<<<<
 *                 value = value.upper()
 *             if value in POS_IDS:
 */
      __pyx_t_6 = __Pyx_HasAttr(__pyx_v_value, __pyx_n_u_upper); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 85, __pyx_L1_error)
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "spacy/morphology.pyx":86
 *         if key == POS:
 *             if hasattr(value, 'upper'):
 *                 value = value.upper()             # <<<<<<<<<<<<<<
 *             if value in POS_IDS:
 *                 value = POS_IDS[value]
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_upper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 86, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "spacy/morphology.pyx":85
 *     for key, value in props.items():
 *         if key == POS:
 *             if hasattr(value, 'upper'):             # <<<<<<<<<<<<<<
 *                 value = value.upper()
 *             if value in POS_IDS:
 */
      }

      /* "spacy/morphology.pyx":87
 *             if hasattr(value, 'upper'):
 *                 value = value.upper()
 *             if value in POS_IDS:             # <<<<<<<<<<<<<<
 *                 value = POS_IDS[value]
 *             out[key] = value
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_POS_IDS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "spacy/morphology.pyx":88
 *                 value = value.upper()
 *             if value in POS_IDS:
 *                 value = POS_IDS[value]             # <<<<<<<<<<<<<<
 *             out[key] = value
 *         elif isinstance(key, int):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_POS_IDS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "spacy/morphology.pyx":87
 *             if hasattr(value, 'upper'):
 *                 value = value.upper()
 *             if value in POS_IDS:             # <<<<<<<<<<<<<<
 *                 value = POS_IDS[value]
 *             out[key] = value
 */
      }

      /* "spacy/morphology.pyx":89
 *             if value in POS_IDS:
 *                 value = POS_IDS[value]
 *             out[key] = value             # <<<<<<<<<<<<<<
 *         elif isinstance(key, int):
 *             out[key] = value
 */
      if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_v_key, __pyx_v_value) < 0)) __PYX_ERR(0, 89, __pyx_L1_error)

      /* "spacy/morphology.pyx":84
 *                 props[attr] = True
 *     for key, value in props.items():
 *         if key == POS:             # <<<<<<<<<<<<<<
 *             if hasattr(value, 'upper'):
 *                 value = value.upper()
 */
      goto __pyx_L12;
    }

    /* "spacy/morphology.pyx":90
 *                 value = POS_IDS[value]
 *             out[key] = value
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             out[key] = value
 *         elif value is True:
 */
    __pyx_t_6 = PyInt_Check(__pyx_v_key); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "spacy/morphology.pyx":91
 *             out[key] = value
 *         elif isinstance(key, int):
 *             out[key] = value             # <<<<<<<<<<<<<<
 *         elif value is True:
 *             out[key] = value
 */
      if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_v_key, __pyx_v_value) < 0)) __PYX_ERR(0, 91, __pyx_L1_error)

      /* "spacy/morphology.pyx":90
 *                 value = POS_IDS[value]
 *             out[key] = value
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             out[key] = value
 *         elif value is True:
 */
      goto __pyx_L12;
    }

    /* "spacy/morphology.pyx":92
 *         elif isinstance(key, int):
 *             out[key] = value
 *         elif value is True:             # <<<<<<<<<<<<<<
 *             out[key] = value
 *         elif key.lower() == 'pos':
 */
    __pyx_t_5 = (__pyx_v_value == Py_True);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":93
 *             out[key] = value
 *         elif value is True:
 *             out[key] = value             # <<<<<<<<<<<<<<
 *         elif key.lower() == 'pos':
 *             out[POS] = POS_IDS[value.upper()]
 */
      if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_v_key, __pyx_v_value) < 0)) __PYX_ERR(0, 93, __pyx_L1_error)

      /* "spacy/morphology.pyx":92
 *         elif isinstance(key, int):
 *             out[key] = value
 *         elif value is True:             # <<<<<<<<<<<<<<
 *             out[key] = value
 *         elif key.lower() == 'pos':
 */
      goto __pyx_L12;
    }

    /* "spacy/morphology.pyx":94
 *         elif value is True:
 *             out[key] = value
 *         elif key.lower() == 'pos':             # <<<<<<<<<<<<<<
 *             out[POS] = POS_IDS[value.upper()]
 *         elif key.lower() != 'morph':
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_lower); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_pos, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":95
 *             out[key] = value
 *         elif key.lower() == 'pos':
 *             out[POS] = POS_IDS[value.upper()]             # <<<<<<<<<<<<<<
 *         elif key.lower() != 'morph':
 *             out[key] = value
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_POS_IDS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(__pyx_e_5spacy_5attrs_POS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_t_8, __pyx_t_7) < 0)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "spacy/morphology.pyx":94
 *         elif value is True:
 *             out[key] = value
 *         elif key.lower() == 'pos':             # <<<<<<<<<<<<<<
 *             out[POS] = POS_IDS[value.upper()]
 *         elif key.lower() != 'morph':
 */
      goto __pyx_L12;
    }

    /* "spacy/morphology.pyx":96
 *         elif key.lower() == 'pos':
 *             out[POS] = POS_IDS[value.upper()]
 *         elif key.lower() != 'morph':             # <<<<<<<<<<<<<<
 *             out[key] = value
 *     return out
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_lower); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_n_u_morph, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":97
 *             out[POS] = POS_IDS[value.upper()]
 *         elif key.lower() != 'morph':
 *             out[key] = value             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
      if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_v_key, __pyx_v_value) < 0)) __PYX_ERR(0, 97, __pyx_L1_error)

      /* "spacy/morphology.pyx":96
 *         elif key.lower() == 'pos':
 *             out[POS] = POS_IDS[value.upper()]
 *         elif key.lower() != 'morph':             # <<<<<<<<<<<<<<
 *             out[key] = value
 *     return out
 */
    }
    __pyx_L12:;

    /* "spacy/morphology.pyx":83
 *                 props.pop(key)
 *                 props[attr] = True
 *     for key, value in props.items():             # <<<<<<<<<<<<<<
 *         if key == POS:
 *             if hasattr(value, 'upper'):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":98
 *         elif key.lower() != 'morph':
 *             out[key] = value
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":68
 * 
 * 
 * def _normalize_props(props):             # <<<<<<<<<<<<<<
 *     """Transform deprecated string keys to correct names."""
 *     out = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("spacy.morphology._normalize_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_attr);
  __Pyx_XDECREF(__pyx_v_props);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":102
 * 
 * class MorphologyClassMap(object):
 *     def __init__(self, features):             # <<<<<<<<<<<<<<
 *         self.features = tuple(features)
 *         self.fields = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_18MorphologyClassMap_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_10morphology_18MorphologyClassMap_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5spacy_10morphology_18MorphologyClassMap_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5spacy_10morphology_18MorphologyClassMap_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_features = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_features,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_features)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 102, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_features = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.morphology.MorphologyClassMap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_10morphology_18MorphologyClassMap___init__(__pyx_self, __pyx_v_self, __pyx_v_features);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_18MorphologyClassMap___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_features) {
  PyObject *__pyx_v_seen_fields = NULL;
  PyObject *__pyx_v_feature = NULL;
  PyObject *__pyx_v_field = NULL;
  Py_ssize_t __pyx_v_offset;
  PyObject *__pyx_7genexpr__pyx_v_name = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_field = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_field_id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "spacy/morphology.pyx":103
 * class MorphologyClassMap(object):
 *     def __init__(self, features):
 *         self.features = tuple(features)             # <<<<<<<<<<<<<<
 *         self.fields = []
 *         self.feat2field = {}
 */
  __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_features, __pyx_t_1) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":104
 *     def __init__(self, features):
 *         self.features = tuple(features)
 *         self.fields = []             # <<<<<<<<<<<<<<
 *         self.feat2field = {}
 *         seen_fields = set()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_fields, __pyx_t_1) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":105
 *         self.features = tuple(features)
 *         self.fields = []
 *         self.feat2field = {}             # <<<<<<<<<<<<<<
 *         seen_fields = set()
 *         for feature in features:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_feat2field, __pyx_t_1) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":106
 *         self.fields = []
 *         self.feat2field = {}
 *         seen_fields = set()             # <<<<<<<<<<<<<<
 *         for feature in features:
 *             field = feature.split("_", 1)[0]
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seen_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":107
 *         self.feat2field = {}
 *         seen_fields = set()
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             field = feature.split("_", 1)[0]
 *             if field not in seen_fields:
 */
  if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
    __pyx_t_1 = __pyx_v_features; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 107, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/morphology.pyx":108
 *         seen_fields = set()
 *         for feature in features:
 *             field = feature.split("_", 1)[0]             # <<<<<<<<<<<<<<
 *             if field not in seen_fields:
 *                 self.fields.append(field)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/morphology.pyx":109
 *         for feature in features:
 *             field = feature.split("_", 1)[0]
 *             if field not in seen_fields:             # <<<<<<<<<<<<<<
 *                 self.fields.append(field)
 *                 seen_fields.add(field)
 */
    __pyx_t_6 = (__Pyx_PySet_ContainsTF(__pyx_v_field, __pyx_v_seen_fields, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "spacy/morphology.pyx":110
 *             field = feature.split("_", 1)[0]
 *             if field not in seen_fields:
 *                 self.fields.append(field)             # <<<<<<<<<<<<<<
 *                 seen_fields.add(field)
 *             self.feat2field[feature] = FIELDS[field]
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fields); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_v_field); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "spacy/morphology.pyx":111
 *             if field not in seen_fields:
 *                 self.fields.append(field)
 *                 seen_fields.add(field)             # <<<<<<<<<<<<<<
 *             self.feat2field[feature] = FIELDS[field]
 *         self.id2feat = {get_string_id(name): name for name in features}
 */
      __pyx_t_8 = PySet_Add(__pyx_v_seen_fields, __pyx_v_field); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 111, __pyx_L1_error)

      /* "spacy/morphology.pyx":109
 *         for feature in features:
 *             field = feature.split("_", 1)[0]
 *             if field not in seen_fields:             # <<<<<<<<<<<<<<
 *                 self.fields.append(field)
 *                 seen_fields.add(field)
 */
    }

    /* "spacy/morphology.pyx":112
 *                 self.fields.append(field)
 *                 seen_fields.add(field)
 *             self.feat2field[feature] = FIELDS[field]             # <<<<<<<<<<<<<<
 *         self.id2feat = {get_string_id(name): name for name in features}
 *         self.field2feats = {"POS": []}
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FIELDS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_field); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feat2field); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_v_feature, __pyx_t_5) < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "spacy/morphology.pyx":107
 *         self.feat2field = {}
 *         seen_fields = set()
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             field = feature.split("_", 1)[0]
 *             if field not in seen_fields:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":113
 *                 seen_fields.add(field)
 *             self.feat2field[feature] = FIELDS[field]
 *         self.id2feat = {get_string_id(name): name for name in features}             # <<<<<<<<<<<<<<
 *         self.field2feats = {"POS": []}
 *         self.col2info = []
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
      __pyx_t_5 = __pyx_v_features; __Pyx_INCREF(__pyx_t_5); __pyx_t_2 = 0;
      __pyx_t_3 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L8_error)
    }
    for (;;) {
      if (likely(!__pyx_t_3)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 113, __pyx_L8_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 113, __pyx_L8_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_3(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 113, __pyx_L8_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_name, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_get_string_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 113, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_7genexpr__pyx_v_name) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_7genexpr__pyx_v_name);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_4, (PyObject*)__pyx_7genexpr__pyx_v_name))) __PYX_ERR(0, 113, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_name); __pyx_7genexpr__pyx_v_name = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L8_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_name); __pyx_7genexpr__pyx_v_name = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_id2feat, __pyx_t_1) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":114
 *             self.feat2field[feature] = FIELDS[field]
 *         self.id2feat = {get_string_id(name): name for name in features}
 *         self.field2feats = {"POS": []}             # <<<<<<<<<<<<<<
 *         self.col2info = []
 *         self.attr2field = dict(LOWER_FIELDS.items())
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_POS, __pyx_t_5) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_field2feats, __pyx_t_1) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":115
 *         self.id2feat = {get_string_id(name): name for name in features}
 *         self.field2feats = {"POS": []}
 *         self.col2info = []             # <<<<<<<<<<<<<<
 *         self.attr2field = dict(LOWER_FIELDS.items())
 *         self.feat2offset = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_col2info, __pyx_t_1) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":116
 *         self.field2feats = {"POS": []}
 *         self.col2info = []
 *         self.attr2field = dict(LOWER_FIELDS.items())             # <<<<<<<<<<<<<<
 *         self.feat2offset = {}
 *         self.field2col = {}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LOWER_FIELDS); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_attr2field, __pyx_t_4) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":117
 *         self.col2info = []
 *         self.attr2field = dict(LOWER_FIELDS.items())
 *         self.feat2offset = {}             # <<<<<<<<<<<<<<
 *         self.field2col = {}
 *         self.field2id = dict(FIELDS.items())
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_feat2offset, __pyx_t_4) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":118
 *         self.attr2field = dict(LOWER_FIELDS.items())
 *         self.feat2offset = {}
 *         self.field2col = {}             # <<<<<<<<<<<<<<
 *         self.field2id = dict(FIELDS.items())
 *         self.fieldid2field = {field_id: field for field, field_id in FIELDS.items()}
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_field2col, __pyx_t_4) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":119
 *         self.feat2offset = {}
 *         self.field2col = {}
 *         self.field2id = dict(FIELDS.items())             # <<<<<<<<<<<<<<
 *         self.fieldid2field = {field_id: field for field, field_id in FIELDS.items()}
 *         for feature in features:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FIELDS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_items); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_field2id, __pyx_t_5) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "spacy/morphology.pyx":120
 *         self.field2col = {}
 *         self.field2id = dict(FIELDS.items())
 *         self.fieldid2field = {field_id: field for field, field_id in FIELDS.items()}             # <<<<<<<<<<<<<<
 *         for feature in features:
 *             field = self.fields[self.feat2field[feature]]
 */
  { /* enter inner scope */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L14_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FIELDS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L14_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_items); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 120, __pyx_L14_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L14_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_9 = __pyx_t_4; __Pyx_INCREF(__pyx_t_9); __pyx_t_2 = 0;
      __pyx_t_3 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 120, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L14_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_3)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 120, __pyx_L14_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 120, __pyx_L14_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_3(__pyx_t_9);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 120, __pyx_L14_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 120, __pyx_L14_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 120, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 120, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_1)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(0, 120, __pyx_L14_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L18_unpacking_done;
        __pyx_L17_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 120, __pyx_L14_error)
        __pyx_L18_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_field, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_field_id, __pyx_t_10);
      __pyx_t_10 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_5, (PyObject*)__pyx_8genexpr1__pyx_v_field_id, (PyObject*)__pyx_8genexpr1__pyx_v_field))) __PYX_ERR(0, 120, __pyx_L14_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_field); __pyx_8genexpr1__pyx_v_field = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_field_id); __pyx_8genexpr1__pyx_v_field_id = 0;
    goto __pyx_L19_exit_scope;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_field); __pyx_8genexpr1__pyx_v_field = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_field_id); __pyx_8genexpr1__pyx_v_field_id = 0;
    goto __pyx_L1_error;
    __pyx_L19_exit_scope:;
  } /* exit inner scope */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_fieldid2field, __pyx_t_5) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "spacy/morphology.pyx":121
 *         self.field2id = dict(FIELDS.items())
 *         self.fieldid2field = {field_id: field for field, field_id in FIELDS.items()}
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             field = self.fields[self.feat2field[feature]]
 *             if field not in self.field2col:
 */
  if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
    __pyx_t_5 = __pyx_v_features; __Pyx_INCREF(__pyx_t_5); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_2); __Pyx_INCREF(__pyx_t_9); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_2); __Pyx_INCREF(__pyx_t_9); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_3(__pyx_t_5);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 121, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "spacy/morphology.pyx":122
 *         self.fieldid2field = {field_id: field for field, field_id in FIELDS.items()}
 *         for feature in features:
 *             field = self.fields[self.feat2field[feature]]             # <<<<<<<<<<<<<<
 *             if field not in self.field2col:
 *                 self.field2col[field] = len(self.col2info)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fields); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feat2field); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_feature); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/morphology.pyx":123
 *         for feature in features:
 *             field = self.fields[self.feat2field[feature]]
 *             if field not in self.field2col:             # <<<<<<<<<<<<<<
 *                 self.field2col[field] = len(self.col2info)
 *             if field != "POS" and field not in self.field2feats:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2col); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_field, __pyx_t_4, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":124
 *             field = self.fields[self.feat2field[feature]]
 *             if field not in self.field2col:
 *                 self.field2col[field] = len(self.col2info)             # <<<<<<<<<<<<<<
 *             if field != "POS" and field not in self.field2feats:
 *                 self.col2info.append((field, 0, "NIL"))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_col2info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2col); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (unlikely(PyObject_SetItem(__pyx_t_10, __pyx_v_field, __pyx_t_4) < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "spacy/morphology.pyx":123
 *         for feature in features:
 *             field = self.fields[self.feat2field[feature]]
 *             if field not in self.field2col:             # <<<<<<<<<<<<<<
 *                 self.field2col[field] = len(self.col2info)
 *             if field != "POS" and field not in self.field2feats:
 */
    }

    /* "spacy/morphology.pyx":125
 *             if field not in self.field2col:
 *                 self.field2col[field] = len(self.col2info)
 *             if field != "POS" and field not in self.field2feats:             # <<<<<<<<<<<<<<
 *                 self.col2info.append((field, 0, "NIL"))
 *             self.field2feats.setdefault(field, ["NIL"])
 */
    __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_field, __pyx_n_u_POS, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2feats); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_field, __pyx_t_4, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_14 = (__pyx_t_7 != 0);
    __pyx_t_6 = __pyx_t_14;
    __pyx_L24_bool_binop_done:;
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":126
 *                 self.field2col[field] = len(self.col2info)
 *             if field != "POS" and field not in self.field2feats:
 *                 self.col2info.append((field, 0, "NIL"))             # <<<<<<<<<<<<<<
 *             self.field2feats.setdefault(field, ["NIL"])
 *             offset = len(self.field2feats[field])
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_col2info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_field);
      __Pyx_GIVEREF(__pyx_v_field);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_field);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_int_0);
      __Pyx_INCREF(__pyx_n_u_NIL);
      __Pyx_GIVEREF(__pyx_n_u_NIL);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_n_u_NIL);
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_10); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "spacy/morphology.pyx":125
 *             if field not in self.field2col:
 *                 self.field2col[field] = len(self.col2info)
 *             if field != "POS" and field not in self.field2feats:             # <<<<<<<<<<<<<<
 *                 self.col2info.append((field, 0, "NIL"))
 *             self.field2feats.setdefault(field, ["NIL"])
 */
    }

    /* "spacy/morphology.pyx":127
 *             if field != "POS" and field not in self.field2feats:
 *                 self.col2info.append((field, 0, "NIL"))
 *             self.field2feats.setdefault(field, ["NIL"])             # <<<<<<<<<<<<<<
 *             offset = len(self.field2feats[field])
 *             self.field2feats[field].append(feature)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2feats); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_setdefault); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_u_NIL);
    __Pyx_GIVEREF(__pyx_n_u_NIL);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_NIL);
    __pyx_t_1 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_field, __pyx_t_4};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_field, __pyx_t_4};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_field);
      __Pyx_GIVEREF(__pyx_v_field);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_15, __pyx_v_field);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_15, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "spacy/morphology.pyx":128
 *                 self.col2info.append((field, 0, "NIL"))
 *             self.field2feats.setdefault(field, ["NIL"])
 *             offset = len(self.field2feats[field])             # <<<<<<<<<<<<<<
 *             self.field2feats[field].append(feature)
 *             self.col2info.append((field, offset, feature))
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2feats); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_v_field); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_13 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_offset = __pyx_t_13;

    /* "spacy/morphology.pyx":129
 *             self.field2feats.setdefault(field, ["NIL"])
 *             offset = len(self.field2feats[field])
 *             self.field2feats[field].append(feature)             # <<<<<<<<<<<<<<
 *             self.col2info.append((field, offset, feature))
 *             self.feat2offset[feature] = offset
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2feats); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_field); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_10, __pyx_v_feature); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "spacy/morphology.pyx":130
 *             offset = len(self.field2feats[field])
 *             self.field2feats[field].append(feature)
 *             self.col2info.append((field, offset, feature))             # <<<<<<<<<<<<<<
 *             self.feat2offset[feature] = offset
 * 
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_col2info); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_v_field);
    __Pyx_GIVEREF(__pyx_v_field);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_field);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
    __Pyx_INCREF(__pyx_v_feature);
    __Pyx_GIVEREF(__pyx_v_feature);
    PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_v_feature);
    __pyx_t_9 = 0;
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_10, __pyx_t_11); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "spacy/morphology.pyx":131
 *             self.field2feats[field].append(feature)
 *             self.col2info.append((field, offset, feature))
 *             self.feat2offset[feature] = offset             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_offset); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feat2offset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(PyObject_SetItem(__pyx_t_10, __pyx_v_feature, __pyx_t_11) < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "spacy/morphology.pyx":121
 *         self.field2id = dict(FIELDS.items())
 *         self.fieldid2field = {field_id: field for field, field_id in FIELDS.items()}
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             field = self.fields[self.feat2field[feature]]
 *             if field not in self.field2col:
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "spacy/morphology.pyx":102
 * 
 * class MorphologyClassMap(object):
 *     def __init__(self, features):             # <<<<<<<<<<<<<<
 *         self.features = tuple(features)
 *         self.fields = []
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("spacy.morphology.MorphologyClassMap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_seen_fields);
  __Pyx_XDECREF(__pyx_v_feature);
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_name);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_field);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_field_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":134
 * 
 *     @property
 *     def field_sizes(self):             # <<<<<<<<<<<<<<
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_18MorphologyClassMap_3field_sizes(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_10morphology_18MorphologyClassMap_3field_sizes = {"field_sizes", (PyCFunction)__pyx_pw_5spacy_10morphology_18MorphologyClassMap_3field_sizes, METH_O, 0};
static PyObject *__pyx_pw_5spacy_10morphology_18MorphologyClassMap_3field_sizes(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("field_sizes (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_18MorphologyClassMap_2field_sizes(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_18MorphologyClassMap_2field_sizes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_field = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("field_sizes", 0);

  /* "spacy/morphology.pyx":135
 *     @property
 *     def field_sizes(self):
 *         return [len(self.field2feats[field]) for field in self.fields]             # <<<<<<<<<<<<<<
 * 
 *     def get_field_offset(self, field):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fields); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 135, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2feats); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_field); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":134
 * 
 *     @property
 *     def field_sizes(self):             # <<<<<<<<<<<<<<
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("spacy.morphology.MorphologyClassMap.field_sizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":137
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 *     def get_field_offset(self, field):             # <<<<<<<<<<<<<<
 *         return self.field2col[field]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_18MorphologyClassMap_5get_field_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_10morphology_18MorphologyClassMap_5get_field_offset = {"get_field_offset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5spacy_10morphology_18MorphologyClassMap_5get_field_offset, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5spacy_10morphology_18MorphologyClassMap_5get_field_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_field = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_field_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_field_offset", 1, 2, 2, 1); __PYX_ERR(0, 137, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_field_offset") < 0)) __PYX_ERR(0, 137, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_field = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_field_offset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 137, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.morphology.MorphologyClassMap.get_field_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_10morphology_18MorphologyClassMap_4get_field_offset(__pyx_self, __pyx_v_self, __pyx_v_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_18MorphologyClassMap_4get_field_offset(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_field_offset", 0);

  /* "spacy/morphology.pyx":138
 * 
 *     def get_field_offset(self, field):
 *         return self.field2col[field]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field2col); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":137
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 *     def get_field_offset(self, field):             # <<<<<<<<<<<<<<
 *         return self.field2col[field]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.morphology.MorphologyClassMap.get_field_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":149
 *     to this class.
 *     '''
 *     def __init__(self, StringStore string_store, tag_map, lemmatizer, exc=None):             # <<<<<<<<<<<<<<
 *         self.mem = Pool()
 *         self.strings = string_store
 */

/* Python wrapper */
static int __pyx_pw_5spacy_10morphology_10Morphology_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5spacy_10morphology_10Morphology_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_string_store = 0;
  PyObject *__pyx_v_tag_map = 0;
  PyObject *__pyx_v_lemmatizer = 0;
  PyObject *__pyx_v_exc = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string_store,&__pyx_n_s_tag_map,&__pyx_n_s_lemmatizer,&__pyx_n_s_exc,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string_store)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tag_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(0, 149, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lemmatizer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(0, 149, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 149, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string_store = ((struct __pyx_obj_5spacy_7strings_StringStore *)values[0]);
    __pyx_v_tag_map = values[1];
    __pyx_v_lemmatizer = values[2];
    __pyx_v_exc = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 149, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.morphology.Morphology.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_string_store), __pyx_ptype_5spacy_7strings_StringStore, 1, "string_store", 0))) __PYX_ERR(0, 149, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology___init__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), __pyx_v_string_store, __pyx_v_tag_map, __pyx_v_lemmatizer, __pyx_v_exc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5spacy_10morphology_10Morphology___init__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_string_store, PyObject *__pyx_v_tag_map, PyObject *__pyx_v_lemmatizer, PyObject *__pyx_v_exc) {
  PyObject *__pyx_v_space_attrs = NULL;
  PyObject *__pyx_v_tag = NULL;
  PyObject *__pyx_v_orth = NULL;
  PyObject *__pyx_v_attrs = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_tag_map);

  /* "spacy/morphology.pyx":150
 *     '''
 *     def __init__(self, StringStore string_store, tag_map, lemmatizer, exc=None):
 *         self.mem = Pool()             # <<<<<<<<<<<<<<
 *         self.strings = string_store
 *         self.tags = PreshMap()
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5cymem_5cymem_Pool)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mem));
  __pyx_v_self->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":151
 *     def __init__(self, StringStore string_store, tag_map, lemmatizer, exc=None):
 *         self.mem = Pool()
 *         self.strings = string_store             # <<<<<<<<<<<<<<
 *         self.tags = PreshMap()
 *         # Add special space symbol. We prefix with underscore, to make sure it
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_string_store));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_string_store));
  __Pyx_GOTREF(__pyx_v_self->strings);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->strings));
  __pyx_v_self->strings = __pyx_v_string_store;

  /* "spacy/morphology.pyx":152
 *         self.mem = Pool()
 *         self.strings = string_store
 *         self.tags = PreshMap()             # <<<<<<<<<<<<<<
 *         # Add special space symbol. We prefix with underscore, to make sure it
 *         # always sorts to the end.
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7preshed_4maps_PreshMap)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tags);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tags));
  __pyx_v_self->tags = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":155
 *         # Add special space symbol. We prefix with underscore, to make sure it
 *         # always sorts to the end.
 *         space_attrs = tag_map.get('SP', {POS: SPACE})             # <<<<<<<<<<<<<<
 *         if '_SP' not in tag_map:
 *             self.strings.add('_SP')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tag_map, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(__pyx_e_5spacy_5attrs_POS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_e_5spacy_15parts_of_speech_SPACE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_4, __pyx_t_5) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_SP, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_SP, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_SP);
    __Pyx_GIVEREF(__pyx_n_u_SP);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_n_u_SP);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_space_attrs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":156
 *         # always sorts to the end.
 *         space_attrs = tag_map.get('SP', {POS: SPACE})
 *         if '_SP' not in tag_map:             # <<<<<<<<<<<<<<
 *             self.strings.add('_SP')
 *             tag_map = dict(tag_map)
 */
  __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_SP_2, __pyx_v_tag_map, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "spacy/morphology.pyx":157
 *         space_attrs = tag_map.get('SP', {POS: SPACE})
 *         if '_SP' not in tag_map:
 *             self.strings.add('_SP')             # <<<<<<<<<<<<<<
 *             tag_map = dict(tag_map)
 *             tag_map['_SP'] = space_attrs
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_n_u_SP_2) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_SP_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":158
 *         if '_SP' not in tag_map:
 *             self.strings.add('_SP')
 *             tag_map = dict(tag_map)             # <<<<<<<<<<<<<<
 *             tag_map['_SP'] = space_attrs
 *         self.tag_names = tuple(sorted(tag_map.keys()))
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_tag_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_tag_map, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":159
 *             self.strings.add('_SP')
 *             tag_map = dict(tag_map)
 *             tag_map['_SP'] = space_attrs             # <<<<<<<<<<<<<<
 *         self.tag_names = tuple(sorted(tag_map.keys()))
 *         self.tag_map = {}
 */
    if (unlikely(PyObject_SetItem(__pyx_v_tag_map, __pyx_n_u_SP_2, __pyx_v_space_attrs) < 0)) __PYX_ERR(0, 159, __pyx_L1_error)

    /* "spacy/morphology.pyx":156
 *         # always sorts to the end.
 *         space_attrs = tag_map.get('SP', {POS: SPACE})
 *         if '_SP' not in tag_map:             # <<<<<<<<<<<<<<
 *             self.strings.add('_SP')
 *             tag_map = dict(tag_map)
 */
  }

  /* "spacy/morphology.pyx":160
 *             tag_map = dict(tag_map)
 *             tag_map['_SP'] = space_attrs
 *         self.tag_names = tuple(sorted(tag_map.keys()))             # <<<<<<<<<<<<<<
 *         self.tag_map = {}
 *         self.lemmatizer = lemmatizer
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tag_map, __pyx_n_s_keys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_9 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 160, __pyx_L1_error)
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 160, __pyx_L1_error)
  }
  __pyx_t_4 = PyList_AsTuple(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->tag_names);
  __Pyx_DECREF(__pyx_v_self->tag_names);
  __pyx_v_self->tag_names = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":161
 *             tag_map['_SP'] = space_attrs
 *         self.tag_names = tuple(sorted(tag_map.keys()))
 *         self.tag_map = {}             # <<<<<<<<<<<<<<
 *         self.lemmatizer = lemmatizer
 *         self.n_tags = len(tag_map)
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->tag_map);
  __Pyx_DECREF(__pyx_v_self->tag_map);
  __pyx_v_self->tag_map = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":162
 *         self.tag_names = tuple(sorted(tag_map.keys()))
 *         self.tag_map = {}
 *         self.lemmatizer = lemmatizer             # <<<<<<<<<<<<<<
 *         self.n_tags = len(tag_map)
 *         self.reverse_index = {}
 */
  __Pyx_INCREF(__pyx_v_lemmatizer);
  __Pyx_GIVEREF(__pyx_v_lemmatizer);
  __Pyx_GOTREF(__pyx_v_self->lemmatizer);
  __Pyx_DECREF(__pyx_v_self->lemmatizer);
  __pyx_v_self->lemmatizer = __pyx_v_lemmatizer;

  /* "spacy/morphology.pyx":163
 *         self.tag_map = {}
 *         self.lemmatizer = lemmatizer
 *         self.n_tags = len(tag_map)             # <<<<<<<<<<<<<<
 *         self.reverse_index = {}
 *         self._feat_map = MorphologyClassMap(FEATURES)
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_tag_map); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_v_self->n_tags = __pyx_t_10;

  /* "spacy/morphology.pyx":164
 *         self.lemmatizer = lemmatizer
 *         self.n_tags = len(tag_map)
 *         self.reverse_index = {}             # <<<<<<<<<<<<<<
 *         self._feat_map = MorphologyClassMap(FEATURES)
 *         self._load_from_tag_map(tag_map)
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->reverse_index);
  __Pyx_DECREF(__pyx_v_self->reverse_index);
  __pyx_v_self->reverse_index = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":165
 *         self.n_tags = len(tag_map)
 *         self.reverse_index = {}
 *         self._feat_map = MorphologyClassMap(FEATURES)             # <<<<<<<<<<<<<<
 *         self._load_from_tag_map(tag_map)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MorphologyClassMap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FEATURES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_feat_map);
  __Pyx_DECREF(__pyx_v_self->_feat_map);
  __pyx_v_self->_feat_map = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":166
 *         self.reverse_index = {}
 *         self._feat_map = MorphologyClassMap(FEATURES)
 *         self._load_from_tag_map(tag_map)             # <<<<<<<<<<<<<<
 * 
 *         self._cache = PreshMapArray(self.n_tags)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_load_from_tag_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_tag_map) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_tag_map);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":168
 *         self._load_from_tag_map(tag_map)
 * 
 *         self._cache = PreshMapArray(self.n_tags)             # <<<<<<<<<<<<<<
 *         self.exc = {}
 *         if exc is not None:
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->n_tags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7preshed_4maps_PreshMapArray), __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_cache);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_cache));
  __pyx_v_self->_cache = ((struct __pyx_obj_7preshed_4maps_PreshMapArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":169
 * 
 *         self._cache = PreshMapArray(self.n_tags)
 *         self.exc = {}             # <<<<<<<<<<<<<<
 *         if exc is not None:
 *             for (tag, orth), attrs in exc.items():
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->exc);
  __Pyx_DECREF(__pyx_v_self->exc);
  __pyx_v_self->exc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":170
 *         self._cache = PreshMapArray(self.n_tags)
 *         self.exc = {}
 *         if exc is not None:             # <<<<<<<<<<<<<<
 *             for (tag, orth), attrs in exc.items():
 *                 attrs = _normalize_props(attrs)
 */
  __pyx_t_8 = (__pyx_v_exc != Py_None);
  __pyx_t_7 = (__pyx_t_8 != 0);
  if (__pyx_t_7) {

    /* "spacy/morphology.pyx":171
 *         self.exc = {}
 *         if exc is not None:
 *             for (tag, orth), attrs in exc.items():             # <<<<<<<<<<<<<<
 *                 attrs = _normalize_props(attrs)
 *                 self.add_special_case(
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_exc, __pyx_n_s_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 171, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 171, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 171, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_11(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 171, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 171, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_5)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_12(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_5), 2) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 171, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 171, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_13);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_12(__pyx_t_14); if (unlikely(!__pyx_t_5)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_13 = __pyx_t_12(__pyx_t_14); if (unlikely(!__pyx_t_13)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_13);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_14), 2) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 171, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_orth, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_XDECREF_SET(__pyx_v_attrs, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "spacy/morphology.pyx":172
 *         if exc is not None:
 *             for (tag, orth), attrs in exc.items():
 *                 attrs = _normalize_props(attrs)             # <<<<<<<<<<<<<<
 *                 self.add_special_case(
 *                     self.strings.as_string(tag), self.strings.as_string(orth), attrs)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_normalize_props); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_attrs) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_attrs);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "spacy/morphology.pyx":173
 *             for (tag, orth), attrs in exc.items():
 *                 attrs = _normalize_props(attrs)
 *                 self.add_special_case(             # <<<<<<<<<<<<<<
 *                     self.strings.as_string(tag), self.strings.as_string(orth), attrs)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_special_case); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "spacy/morphology.pyx":174
 *                 attrs = _normalize_props(attrs)
 *                 self.add_special_case(
 *                     self.strings.as_string(tag), self.strings.as_string(orth), attrs)             # <<<<<<<<<<<<<<
 * 
 *     def _load_from_tag_map(self, tag_map):
 */
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_as_string); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_5, __pyx_v_tag) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_tag);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_as_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_13 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_14, __pyx_v_orth) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_orth);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_2, __pyx_t_13, __pyx_v_attrs};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_2, __pyx_t_13, __pyx_v_attrs};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_6, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_6, __pyx_t_13);
        __Pyx_INCREF(__pyx_v_attrs);
        __Pyx_GIVEREF(__pyx_v_attrs);
        PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_6, __pyx_v_attrs);
        __pyx_t_2 = 0;
        __pyx_t_13 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "spacy/morphology.pyx":171
 *         self.exc = {}
 *         if exc is not None:
 *             for (tag, orth), attrs in exc.items():             # <<<<<<<<<<<<<<
 *                 attrs = _normalize_props(attrs)
 *                 self.add_special_case(
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "spacy/morphology.pyx":170
 *         self._cache = PreshMapArray(self.n_tags)
 *         self.exc = {}
 *         if exc is not None:             # <<<<<<<<<<<<<<
 *             for (tag, orth), attrs in exc.items():
 *                 attrs = _normalize_props(attrs)
 */
  }

  /* "spacy/morphology.pyx":149
 *     to this class.
 *     '''
 *     def __init__(self, StringStore string_store, tag_map, lemmatizer, exc=None):             # <<<<<<<<<<<<<<
 *         self.mem = Pool()
 *         self.strings = string_store
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("spacy.morphology.Morphology.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_space_attrs);
  __Pyx_XDECREF(__pyx_v_tag);
  __Pyx_XDECREF(__pyx_v_orth);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XDECREF(__pyx_v_tag_map);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":176
 *                     self.strings.as_string(tag), self.strings.as_string(orth), attrs)
 * 
 *     def _load_from_tag_map(self, tag_map):             # <<<<<<<<<<<<<<
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):
 *             attrs = _normalize_props(attrs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_3_load_from_tag_map(PyObject *__pyx_v_self, PyObject *__pyx_v_tag_map); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_3_load_from_tag_map(PyObject *__pyx_v_self, PyObject *__pyx_v_tag_map) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_load_from_tag_map (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_2_load_from_tag_map(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), ((PyObject *)__pyx_v_tag_map));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_2_load_from_tag_map(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_tag_map) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_tag_str = NULL;
  PyObject *__pyx_v_attrs = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_feat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("_load_from_tag_map", 0);

  /* "spacy/morphology.pyx":177
 * 
 *     def _load_from_tag_map(self, tag_map):
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):             # <<<<<<<<<<<<<<
 *             attrs = _normalize_props(attrs)
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tag_map, __pyx_n_s_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_2); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 177, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 177, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 177, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_tag_str, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_attrs, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "spacy/morphology.pyx":178
 *     def _load_from_tag_map(self, tag_map):
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):
 *             attrs = _normalize_props(attrs)             # <<<<<<<<<<<<<<
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                       if feat in self._feat_map.id2feat})
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_normalize_props); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_v_attrs) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_attrs);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "spacy/morphology.pyx":179
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):
 *             attrs = _normalize_props(attrs)
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs             # <<<<<<<<<<<<<<
 *                       if feat in self._feat_map.id2feat})
 *             self.tag_map[tag_str] = dict(attrs)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    { /* enter inner scope */
      __pyx_t_3 = PySet_New(NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_attrs)) || PyTuple_CheckExact(__pyx_v_attrs)) {
        __pyx_t_8 = __pyx_v_attrs; __Pyx_INCREF(__pyx_t_8); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_attrs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 179, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 179, __pyx_L9_error)
      }
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_12 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_12); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 179, __pyx_L9_error)
            #else
            __pyx_t_12 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 179, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_12);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_12); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 179, __pyx_L9_error)
            #else
            __pyx_t_12 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 179, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_12);
            #endif
          }
        } else {
          __pyx_t_12 = __pyx_t_11(__pyx_t_8);
          if (unlikely(!__pyx_t_12)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 179, __pyx_L9_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_12);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_feat, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "spacy/morphology.pyx":180
 *             attrs = _normalize_props(attrs)
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                       if feat in self._feat_map.id2feat})             # <<<<<<<<<<<<<<
 *             self.tag_map[tag_str] = dict(attrs)
 *             self.reverse_index[self.strings.add(tag_str)] = i
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_feat_map, __pyx_n_s_id2feat); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 180, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_8genexpr2__pyx_v_feat, __pyx_t_12, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 180, __pyx_L9_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_14 = (__pyx_t_13 != 0);
        if (__pyx_t_14) {

          /* "spacy/morphology.pyx":179
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):
 *             attrs = _normalize_props(attrs)
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs             # <<<<<<<<<<<<<<
 *                       if feat in self._feat_map.id2feat})
 *             self.tag_map[tag_str] = dict(attrs)
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_feat_map, __pyx_n_s_id2feat); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 179, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_8genexpr2__pyx_v_feat); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 179, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(PySet_Add(__pyx_t_3, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 179, __pyx_L9_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "spacy/morphology.pyx":180
 *             attrs = _normalize_props(attrs)
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                       if feat in self._feat_map.id2feat})             # <<<<<<<<<<<<<<
 *             self.tag_map[tag_str] = dict(attrs)
 *             self.reverse_index[self.strings.add(tag_str)] = i
 */
        }

        /* "spacy/morphology.pyx":179
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):
 *             attrs = _normalize_props(attrs)
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs             # <<<<<<<<<<<<<<
 *                       if feat in self._feat_map.id2feat})
 *             self.tag_map[tag_str] = dict(attrs)
 */
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_feat); __pyx_8genexpr2__pyx_v_feat = 0;
      goto __pyx_L13_exit_scope;
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_feat); __pyx_8genexpr2__pyx_v_feat = 0;
      goto __pyx_L1_error;
      __pyx_L13_exit_scope:;
    } /* exit inner scope */
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "spacy/morphology.pyx":181
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                       if feat in self._feat_map.id2feat})
 *             self.tag_map[tag_str] = dict(attrs)             # <<<<<<<<<<<<<<
 *             self.reverse_index[self.strings.add(tag_str)] = i
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_attrs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->tag_map, __pyx_v_tag_str, __pyx_t_2) < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "spacy/morphology.pyx":182
 *                       if feat in self._feat_map.id2feat})
 *             self.tag_map[tag_str] = dict(attrs)
 *             self.reverse_index[self.strings.add(tag_str)] = i             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_v_tag_str) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_tag_str);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_self->reverse_index, __pyx_t_2, __pyx_v_i) < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "spacy/morphology.pyx":177
 * 
 *     def _load_from_tag_map(self, tag_map):
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):             # <<<<<<<<<<<<<<
 *             attrs = _normalize_props(attrs)
 *             self.add({self._feat_map.id2feat[feat] for feat in attrs
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":176
 *                     self.strings.as_string(tag), self.strings.as_string(orth), attrs)
 * 
 *     def _load_from_tag_map(self, tag_map):             # <<<<<<<<<<<<<<
 *         for i, (tag_str, attrs) in enumerate(sorted(tag_map.items())):
 *             attrs = _normalize_props(attrs)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("spacy.morphology.Morphology._load_from_tag_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_tag_str);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_feat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":184
 *             self.reverse_index[self.strings.add(tag_str)] = i
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (Morphology, (self.strings, self.tag_map, self.lemmatizer,
 *                 self.exc), None, None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_4__reduce__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_4__reduce__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "spacy/morphology.pyx":185
 * 
 *     def __reduce__(self):
 *         return (Morphology, (self.strings, self.tag_map, self.lemmatizer,             # <<<<<<<<<<<<<<
 *                 self.exc), None, None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "spacy/morphology.pyx":186
 *     def __reduce__(self):
 *         return (Morphology, (self.strings, self.tag_map, self.lemmatizer,
 *                 self.exc), None, None)             # <<<<<<<<<<<<<<
 * 
 *     def add(self, features):
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->strings));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->strings));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->strings));
  __Pyx_INCREF(__pyx_v_self->tag_map);
  __Pyx_GIVEREF(__pyx_v_self->tag_map);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->tag_map);
  __Pyx_INCREF(__pyx_v_self->lemmatizer);
  __Pyx_GIVEREF(__pyx_v_self->lemmatizer);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_self->lemmatizer);
  __Pyx_INCREF(__pyx_v_self->exc);
  __Pyx_GIVEREF(__pyx_v_self->exc);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_self->exc);

  /* "spacy/morphology.pyx":185
 * 
 *     def __reduce__(self):
 *         return (Morphology, (self.strings, self.tag_map, self.lemmatizer,             # <<<<<<<<<<<<<<
 *                 self.exc), None, None)
 * 
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5spacy_10morphology_Morphology));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5spacy_10morphology_Morphology));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5spacy_10morphology_Morphology));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 3, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":184
 *             self.reverse_index[self.strings.add(tag_str)] = i
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (Morphology, (self.strings, self.tag_map, self.lemmatizer,
 *                 self.exc), None, None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.morphology.Morphology.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":188
 *                 self.exc), None, None)
 * 
 *     def add(self, features):             # <<<<<<<<<<<<<<
 *         """Insert a morphological analysis in the morphology table, if not already
 *         present. Returns the hash of the new analysis.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_7add(PyObject *__pyx_v_self, PyObject *__pyx_v_features); /*proto*/
static char __pyx_doc_5spacy_10morphology_10Morphology_6add[] = "Insert a morphological analysis in the morphology table, if not already\n        present. Returns the hash of the new analysis.\n        ";
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_7add(PyObject *__pyx_v_self, PyObject *__pyx_v_features) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_6add(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), ((PyObject *)__pyx_v_features));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_6add(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_features) {
  PyObject *__pyx_v_f = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_string_features = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_feature;
  struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_v_tag;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_9;
  int __pyx_t_10;
  struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_t_11;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_12;
  __Pyx_RefNannySetupContext("add", 0);
  __Pyx_INCREF(__pyx_v_features);

  /* "spacy/morphology.pyx":192
 *         present. Returns the hash of the new analysis.
 *         """
 *         for f in features:             # <<<<<<<<<<<<<<
 *             if isinstance(f, basestring_):
 *                 self.strings.add(f)
 */
  if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
    __pyx_t_1 = __pyx_v_features; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 192, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/morphology.pyx":193
 *         """
 *         for f in features:
 *             if isinstance(f, basestring_):             # <<<<<<<<<<<<<<
 *                 self.strings.add(f)
 *         string_features = features
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_basestring); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_f, __pyx_t_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "spacy/morphology.pyx":194
 *         for f in features:
 *             if isinstance(f, basestring_):
 *                 self.strings.add(f)             # <<<<<<<<<<<<<<
 *         string_features = features
 *         features = intify_features(features)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_f) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_f);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "spacy/morphology.pyx":193
 *         """
 *         for f in features:
 *             if isinstance(f, basestring_):             # <<<<<<<<<<<<<<
 *                 self.strings.add(f)
 *         string_features = features
 */
    }

    /* "spacy/morphology.pyx":192
 *         present. Returns the hash of the new analysis.
 *         """
 *         for f in features:             # <<<<<<<<<<<<<<
 *             if isinstance(f, basestring_):
 *                 self.strings.add(f)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":195
 *             if isinstance(f, basestring_):
 *                 self.strings.add(f)
 *         string_features = features             # <<<<<<<<<<<<<<
 *         features = intify_features(features)
 *         cdef attr_t feature
 */
  __Pyx_INCREF(__pyx_v_features);
  __pyx_v_string_features = __pyx_v_features;

  /* "spacy/morphology.pyx":196
 *                 self.strings.add(f)
 *         string_features = features
 *         features = intify_features(features)             # <<<<<<<<<<<<<<
 *         cdef attr_t feature
 *         for feature in features:
 */
  __pyx_t_1 = __pyx_f_5spacy_10morphology_intify_features(__pyx_v_features, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_features, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":198
 *         features = intify_features(features)
 *         cdef attr_t feature
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             if feature != 0 and feature not in self._feat_map.id2feat:
 *                 raise ValueError(Errors.E167.format(feat=self.strings[feature], feat_id=feature))
 */
  if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
    __pyx_t_1 = __pyx_v_features; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 198, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_feature = __pyx_t_9;

    /* "spacy/morphology.pyx":199
 *         cdef attr_t feature
 *         for feature in features:
 *             if feature != 0 and feature not in self._feat_map.id2feat:             # <<<<<<<<<<<<<<
 *                 raise ValueError(Errors.E167.format(feat=self.strings[feature], feat_id=feature))
 *         cdef MorphAnalysisC tag
 */
    __pyx_t_5 = ((__pyx_v_feature != 0) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_feature); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_feat_map, __pyx_n_s_id2feat); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_t_7, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = (__pyx_t_5 != 0);
    __pyx_t_6 = __pyx_t_10;
    __pyx_L9_bool_binop_done:;
    if (unlikely(__pyx_t_6)) {

      /* "spacy/morphology.pyx":200
 *         for feature in features:
 *             if feature != 0 and feature not in self._feat_map.id2feat:
 *                 raise ValueError(Errors.E167.format(feat=self.strings[feature], feat_id=feature))             # <<<<<<<<<<<<<<
 *         cdef MorphAnalysisC tag
 *         tag = create_rich_tag(features)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_E167); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->strings), __pyx_v_feature, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_feat, __pyx_t_8) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_From_uint64_t(__pyx_v_feature); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_feat_id, __pyx_t_8) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 200, __pyx_L1_error)

      /* "spacy/morphology.pyx":199
 *         cdef attr_t feature
 *         for feature in features:
 *             if feature != 0 and feature not in self._feat_map.id2feat:             # <<<<<<<<<<<<<<
 *                 raise ValueError(Errors.E167.format(feat=self.strings[feature], feat_id=feature))
 *         cdef MorphAnalysisC tag
 */
    }

    /* "spacy/morphology.pyx":198
 *         features = intify_features(features)
 *         cdef attr_t feature
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             if feature != 0 and feature not in self._feat_map.id2feat:
 *                 raise ValueError(Errors.E167.format(feat=self.strings[feature], feat_id=feature))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":202
 *                 raise ValueError(Errors.E167.format(feat=self.strings[feature], feat_id=feature))
 *         cdef MorphAnalysisC tag
 *         tag = create_rich_tag(features)             # <<<<<<<<<<<<<<
 *         cdef hash_t key = self.insert(tag)
 *         return key
 */
  __pyx_t_11 = __pyx_f_5spacy_10morphology_create_rich_tag(__pyx_v_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_v_tag = __pyx_t_11;

  /* "spacy/morphology.pyx":203
 *         cdef MorphAnalysisC tag
 *         tag = create_rich_tag(features)
 *         cdef hash_t key = self.insert(tag)             # <<<<<<<<<<<<<<
 *         return key
 * 
 */
  __pyx_t_12 = ((struct __pyx_vtabstruct_5spacy_10morphology_Morphology *)__pyx_v_self->__pyx_vtab)->insert(__pyx_v_self, __pyx_v_tag); if (unlikely(__pyx_t_12 == ((__pyx_t_5spacy_8typedefs_hash_t)0))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_v_key = __pyx_t_12;

  /* "spacy/morphology.pyx":204
 *         tag = create_rich_tag(features)
 *         cdef hash_t key = self.insert(tag)
 *         return key             # <<<<<<<<<<<<<<
 * 
 *     def get(self, hash_t morph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":188
 *                 self.exc), None, None)
 * 
 *     def add(self, features):             # <<<<<<<<<<<<<<
 *         """Insert a morphological analysis in the morphology table, if not already
 *         present. Returns the hash of the new analysis.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("spacy.morphology.Morphology.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_string_features);
  __Pyx_XDECREF(__pyx_v_features);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":206
 *         return key
 * 
 *     def get(self, hash_t morph):             # <<<<<<<<<<<<<<
 *         tag = <MorphAnalysisC*>self.tags.get(morph)
 *         if tag == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_9get(PyObject *__pyx_v_self, PyObject *__pyx_arg_morph); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_9get(PyObject *__pyx_v_self, PyObject *__pyx_arg_morph) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  assert(__pyx_arg_morph); {
    __pyx_v_morph = __Pyx_PyInt_As_uint64_t(__pyx_arg_morph); if (unlikely((__pyx_v_morph == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.morphology.Morphology.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_8get(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), ((__pyx_t_5spacy_8typedefs_hash_t)__pyx_v_morph));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_8get(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph) {
  struct __pyx_t_5spacy_7structs_MorphAnalysisC *__pyx_v_tag;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get", 0);

  /* "spacy/morphology.pyx":207
 * 
 *     def get(self, hash_t morph):
 *         tag = <MorphAnalysisC*>self.tags.get(morph)             # <<<<<<<<<<<<<<
 *         if tag == NULL:
 *             return []
 */
  __pyx_v_tag = ((struct __pyx_t_5spacy_7structs_MorphAnalysisC *)((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->tags->__pyx_vtab)->get(__pyx_v_self->tags, __pyx_v_morph));

  /* "spacy/morphology.pyx":208
 *     def get(self, hash_t morph):
 *         tag = <MorphAnalysisC*>self.tags.get(morph)
 *         if tag == NULL:             # <<<<<<<<<<<<<<
 *             return []
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_tag == NULL) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":209
 *         tag = <MorphAnalysisC*>self.tags.get(morph)
 *         if tag == NULL:
 *             return []             # <<<<<<<<<<<<<<
 *         else:
 *             return tag_to_json(tag)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":208
 *     def get(self, hash_t morph):
 *         tag = <MorphAnalysisC*>self.tags.get(morph)
 *         if tag == NULL:             # <<<<<<<<<<<<<<
 *             return []
 *         else:
 */
  }

  /* "spacy/morphology.pyx":211
 *             return []
 *         else:
 *             return tag_to_json(tag)             # <<<<<<<<<<<<<<
 * 
 *     cpdef update(self, hash_t morph, features):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5spacy_10morphology_tag_to_json(__pyx_v_tag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "spacy/morphology.pyx":206
 *         return key
 * 
 *     def get(self, hash_t morph):             # <<<<<<<<<<<<<<
 *         tag = <MorphAnalysisC*>self.tags.get(morph)
 *         if tag == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.morphology.Morphology.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":213
 *             return tag_to_json(tag)
 * 
 *     cpdef update(self, hash_t morph, features):             # <<<<<<<<<<<<<<
 *         """Update a morphological analysis with new feature values."""
 *         tag = (<MorphAnalysisC*>self.tags.get(morph))[0]
 */

static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_11update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5spacy_10morphology_10Morphology_update(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph, PyObject *__pyx_v_features, int __pyx_skip_dispatch) {
  struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_v_tag;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_feature;
  PyObject *__pyx_v_field = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_10;
  enum __pyx_t_5spacy_10morphology_univ_field_t __pyx_t_11;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_12;
  __Pyx_RefNannySetupContext("update", 0);
  __Pyx_INCREF(__pyx_v_features);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5spacy_10morphology_10Morphology_11update)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_morph); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_v_features};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_v_features};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 213, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
          __Pyx_INCREF(__pyx_v_features);
          __Pyx_GIVEREF(__pyx_v_features);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_features);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "spacy/morphology.pyx":215
 *     cpdef update(self, hash_t morph, features):
 *         """Update a morphological analysis with new feature values."""
 *         tag = (<MorphAnalysisC*>self.tags.get(morph))[0]             # <<<<<<<<<<<<<<
 *         features = intify_features(features)
 *         cdef attr_t feature
 */
  __pyx_v_tag = (((struct __pyx_t_5spacy_7structs_MorphAnalysisC *)((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->tags->__pyx_vtab)->get(__pyx_v_self->tags, __pyx_v_morph))[0]);

  /* "spacy/morphology.pyx":216
 *         """Update a morphological analysis with new feature values."""
 *         tag = (<MorphAnalysisC*>self.tags.get(morph))[0]
 *         features = intify_features(features)             # <<<<<<<<<<<<<<
 *         cdef attr_t feature
 *         for feature in features:
 */
  __pyx_t_1 = __pyx_f_5spacy_10morphology_intify_features(__pyx_v_features, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_features, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":218
 *         features = intify_features(features)
 *         cdef attr_t feature
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *             set_feature(&tag, field, feature, 1)
 */
  if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
    __pyx_t_1 = __pyx_v_features; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 218, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 218, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 218, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 218, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_feature = __pyx_t_10;

    /* "spacy/morphology.pyx":219
 *         cdef attr_t feature
 *         for feature in features:
 *             field = FEATURE_FIELDS[FEATURE_NAMES[feature]]             # <<<<<<<<<<<<<<
 *             set_feature(&tag, field, feature, 1)
 *         morph = self.insert(tag)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FEATURE_FIELDS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FEATURE_NAMES); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_feature, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/morphology.pyx":220
 *         for feature in features:
 *             field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *             set_feature(&tag, field, feature, 1)             # <<<<<<<<<<<<<<
 *         morph = self.insert(tag)
 *         return morph
 */
    __pyx_t_11 = ((enum __pyx_t_5spacy_10morphology_univ_field_t)__Pyx_PyInt_As_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_v_field)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_5spacy_10morphology_set_feature((&__pyx_v_tag), __pyx_t_11, __pyx_v_feature, 1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 220, __pyx_L1_error)

    /* "spacy/morphology.pyx":218
 *         features = intify_features(features)
 *         cdef attr_t feature
 *         for feature in features:             # <<<<<<<<<<<<<<
 *             field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *             set_feature(&tag, field, feature, 1)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":221
 *             field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *             set_feature(&tag, field, feature, 1)
 *         morph = self.insert(tag)             # <<<<<<<<<<<<<<
 *         return morph
 * 
 */
  __pyx_t_12 = ((struct __pyx_vtabstruct_5spacy_10morphology_Morphology *)__pyx_v_self->__pyx_vtab)->insert(__pyx_v_self, __pyx_v_tag); if (unlikely(__pyx_t_12 == ((__pyx_t_5spacy_8typedefs_hash_t)0))) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_v_morph = __pyx_t_12;

  /* "spacy/morphology.pyx":222
 *             set_feature(&tag, field, feature, 1)
 *         morph = self.insert(tag)
 *         return morph             # <<<<<<<<<<<<<<
 * 
 *     def lemmatize(self, const univ_pos_t univ_pos, attr_t orth, morphology):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_morph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":213
 *             return tag_to_json(tag)
 * 
 *     cpdef update(self, hash_t morph, features):             # <<<<<<<<<<<<<<
 *         """Update a morphological analysis with new feature values."""
 *         tag = (<MorphAnalysisC*>self.tags.get(morph))[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.morphology.Morphology.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_features);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_11update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5spacy_10morphology_10Morphology_10update[] = "Update a morphological analysis with new feature values.";
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_11update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph;
  PyObject *__pyx_v_features = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_morph,&__pyx_n_s_features,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_morph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_features)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 2, 2, 1); __PYX_ERR(0, 213, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update") < 0)) __PYX_ERR(0, 213, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_morph = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_morph == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L3_error)
    __pyx_v_features = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 213, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.morphology.Morphology.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_10update(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), __pyx_v_morph, __pyx_v_features);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_10update(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_morph, PyObject *__pyx_v_features) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("update", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5spacy_10morphology_10Morphology_update(__pyx_v_self, __pyx_v_morph, __pyx_v_features, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.morphology.Morphology.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":224
 *         return morph
 * 
 *     def lemmatize(self, const univ_pos_t univ_pos, attr_t orth, morphology):             # <<<<<<<<<<<<<<
 *         if orth not in self.strings:
 *             return orth
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_13lemmatize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_13lemmatize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_v_univ_pos;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_orth;
  PyObject *__pyx_v_morphology = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lemmatize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_univ_pos,&__pyx_n_s_orth,&__pyx_n_s_morphology,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_univ_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lemmatize", 1, 3, 3, 1); __PYX_ERR(0, 224, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_morphology)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lemmatize", 1, 3, 3, 2); __PYX_ERR(0, 224, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lemmatize") < 0)) __PYX_ERR(0, 224, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_univ_pos = ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)__Pyx_PyInt_As_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(values[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
    __pyx_v_orth = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_orth == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
    __pyx_v_morphology = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lemmatize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.morphology.Morphology.lemmatize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_12lemmatize(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), __pyx_v_univ_pos, __pyx_v_orth, __pyx_v_morphology);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_12lemmatize(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_v_univ_pos, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_orth, PyObject *__pyx_v_morphology) {
  PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_v_lemma_strings = 0;
  PyObject *__pyx_v_lemma_string = 0;
  PyObject *__pyx_v_string_feats = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_lemma = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("lemmatize", 0);

  /* "spacy/morphology.pyx":225
 * 
 *     def lemmatize(self, const univ_pos_t univ_pos, attr_t orth, morphology):
 *         if orth not in self.strings:             # <<<<<<<<<<<<<<
 *             return orth
 *         cdef unicode py_string = self.strings[orth]
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_orth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->strings), Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "spacy/morphology.pyx":226
 *     def lemmatize(self, const univ_pos_t univ_pos, attr_t orth, morphology):
 *         if orth not in self.strings:
 *             return orth             # <<<<<<<<<<<<<<
 *         cdef unicode py_string = self.strings[orth]
 *         if self.lemmatizer is None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_orth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":225
 * 
 *     def lemmatize(self, const univ_pos_t univ_pos, attr_t orth, morphology):
 *         if orth not in self.strings:             # <<<<<<<<<<<<<<
 *             return orth
 *         cdef unicode py_string = self.strings[orth]
 */
  }

  /* "spacy/morphology.pyx":227
 *         if orth not in self.strings:
 *             return orth
 *         cdef unicode py_string = self.strings[orth]             # <<<<<<<<<<<<<<
 *         if self.lemmatizer is None:
 *             return self.strings.add(py_string.lower())
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->strings), __pyx_v_orth, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_v_py_string = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":228
 *             return orth
 *         cdef unicode py_string = self.strings[orth]
 *         if self.lemmatizer is None:             # <<<<<<<<<<<<<<
 *             return self.strings.add(py_string.lower())
 *         cdef list lemma_strings
 */
  __pyx_t_3 = (__pyx_v_self->lemmatizer == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":229
 *         cdef unicode py_string = self.strings[orth]
 *         if self.lemmatizer is None:
 *             return self.strings.add(py_string.lower())             # <<<<<<<<<<<<<<
 *         cdef list lemma_strings
 *         cdef unicode lemma_string
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_string, __pyx_n_s_lower); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":228
 *             return orth
 *         cdef unicode py_string = self.strings[orth]
 *         if self.lemmatizer is None:             # <<<<<<<<<<<<<<
 *             return self.strings.add(py_string.lower())
 *         cdef list lemma_strings
 */
  }

  /* "spacy/morphology.pyx":234
 *         # Normalize features into a dict keyed by the field, to make life easier
 *         # for the lemmatizer. Handles string-to-int conversion too.
 *         string_feats = {}             # <<<<<<<<<<<<<<
 *         for key, value in morphology.items():
 *             if value is True:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_string_feats = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":235
 *         # for the lemmatizer. Handles string-to-int conversion too.
 *         string_feats = {}
 *         for key, value in morphology.items():             # <<<<<<<<<<<<<<
 *             if value is True:
 *                 name, value = self.strings.as_string(key).split('_', 1)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_morphology, __pyx_n_s_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 235, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 235, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 235, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_7), 2) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 235, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "spacy/morphology.pyx":236
 *         string_feats = {}
 *         for key, value in morphology.items():
 *             if value is True:             # <<<<<<<<<<<<<<
 *                 name, value = self.strings.as_string(key).split('_', 1)
 *                 string_feats[name] = value
 */
    __pyx_t_2 = (__pyx_v_value == Py_True);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "spacy/morphology.pyx":237
 *         for key, value in morphology.items():
 *             if value is True:
 *                 name, value = self.strings.as_string(key).split('_', 1)             # <<<<<<<<<<<<<<
 *                 string_feats[name] = value
 *             else:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_as_string); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_key);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 237, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_5 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_7), 2) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L11_unpacking_done;
        __pyx_L10_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 237, __pyx_L1_error)
        __pyx_L11_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "spacy/morphology.pyx":238
 *             if value is True:
 *                 name, value = self.strings.as_string(key).split('_', 1)
 *                 string_feats[name] = value             # <<<<<<<<<<<<<<
 *             else:
 *                 string_feats[self.strings.as_string(key)] = self.strings.as_string(value)
 */
      if (unlikely(PyDict_SetItem(__pyx_v_string_feats, __pyx_v_name, __pyx_v_value) < 0)) __PYX_ERR(0, 238, __pyx_L1_error)

      /* "spacy/morphology.pyx":236
 *         string_feats = {}
 *         for key, value in morphology.items():
 *             if value is True:             # <<<<<<<<<<<<<<
 *                 name, value = self.strings.as_string(key).split('_', 1)
 *                 string_feats[name] = value
 */
      goto __pyx_L9;
    }

    /* "spacy/morphology.pyx":240
 *                 string_feats[name] = value
 *             else:
 *                 string_feats[self.strings.as_string(key)] = self.strings.as_string(value)             # <<<<<<<<<<<<<<
 *         lemma_strings = self.lemmatizer(py_string, univ_pos, string_feats)
 *         lemma_string = lemma_strings[0]
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_as_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_value);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_as_string); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_key);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(PyDict_SetItem(__pyx_v_string_feats, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L9:;

    /* "spacy/morphology.pyx":235
 *         # for the lemmatizer. Handles string-to-int conversion too.
 *         string_feats = {}
 *         for key, value in morphology.items():             # <<<<<<<<<<<<<<
 *             if value is True:
 *                 name, value = self.strings.as_string(key).split('_', 1)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":241
 *             else:
 *                 string_feats[self.strings.as_string(key)] = self.strings.as_string(value)
 *         lemma_strings = self.lemmatizer(py_string, univ_pos, string_feats)             # <<<<<<<<<<<<<<
 *         lemma_string = lemma_strings[0]
 *         lemma = self.strings.add(lemma_string)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_v_univ_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->lemmatizer);
  __pyx_t_5 = __pyx_v_self->lemmatizer; __pyx_t_6 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_py_string, __pyx_t_1, __pyx_v_string_feats};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_py_string, __pyx_t_1, __pyx_v_string_feats};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_py_string);
    __Pyx_GIVEREF(__pyx_v_py_string);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_v_py_string);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_string_feats);
    __Pyx_GIVEREF(__pyx_v_string_feats);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_11, __pyx_v_string_feats);
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_v_lemma_strings = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":242
 *                 string_feats[self.strings.as_string(key)] = self.strings.as_string(value)
 *         lemma_strings = self.lemmatizer(py_string, univ_pos, string_feats)
 *         lemma_string = lemma_strings[0]             # <<<<<<<<<<<<<<
 *         lemma = self.strings.add(lemma_string)
 *         return lemma
 */
  if (unlikely(__pyx_v_lemma_strings == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 242, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_lemma_strings, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_v_lemma_string = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":243
 *         lemma_strings = self.lemmatizer(py_string, univ_pos, string_feats)
 *         lemma_string = lemma_strings[0]
 *         lemma = self.strings.add(lemma_string)             # <<<<<<<<<<<<<<
 *         return lemma
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_v_lemma_string) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_lemma_string);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_lemma = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":244
 *         lemma_string = lemma_strings[0]
 *         lemma = self.strings.add(lemma_string)
 *         return lemma             # <<<<<<<<<<<<<<
 * 
 *     def add_special_case(self, unicode tag_str, unicode orth_str, attrs,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_lemma);
  __pyx_r = __pyx_v_lemma;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":224
 *         return morph
 * 
 *     def lemmatize(self, const univ_pos_t univ_pos, attr_t orth, morphology):             # <<<<<<<<<<<<<<
 *         if orth not in self.strings:
 *             return orth
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.morphology.Morphology.lemmatize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XDECREF(__pyx_v_lemma_strings);
  __Pyx_XDECREF(__pyx_v_lemma_string);
  __Pyx_XDECREF(__pyx_v_string_feats);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_lemma);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":246
 *         return lemma
 * 
 *     def add_special_case(self, unicode tag_str, unicode orth_str, attrs,             # <<<<<<<<<<<<<<
 *                          force=False):
 *         """Add a special-case rule to the morphological analyser. Tokens whose
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_15add_special_case(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5spacy_10morphology_10Morphology_14add_special_case[] = "Add a special-case rule to the morphological analyser. Tokens whose\n        tag and orth match the rule will receive the specified properties.\n\n        tag (unicode): The part-of-speech tag to key the exception.\n        orth (unicode): The word-form to key the exception.\n        ";
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_15add_special_case(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tag_str = 0;
  PyObject *__pyx_v_orth_str = 0;
  PyObject *__pyx_v_attrs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_force = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_special_case (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tag_str,&__pyx_n_s_orth_str,&__pyx_n_s_attrs,&__pyx_n_s_force,0};
    PyObject* values[4] = {0,0,0,0};

    /* "spacy/morphology.pyx":247
 * 
 *     def add_special_case(self, unicode tag_str, unicode orth_str, attrs,
 *                          force=False):             # <<<<<<<<<<<<<<
 *         """Add a special-case rule to the morphological analyser. Tokens whose
 *         tag and orth match the rule will receive the specified properties.
 */
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tag_str)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orth_str)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_special_case", 0, 3, 4, 1); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attrs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_special_case", 0, 3, 4, 2); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_force);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_special_case") < 0)) __PYX_ERR(0, 246, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tag_str = ((PyObject*)values[0]);
    __pyx_v_orth_str = ((PyObject*)values[1]);
    __pyx_v_attrs = values[2];
    __pyx_v_force = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_special_case", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.morphology.Morphology.add_special_case", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tag_str), (&PyUnicode_Type), 1, "tag_str", 1))) __PYX_ERR(0, 246, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orth_str), (&PyUnicode_Type), 1, "orth_str", 1))) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_14add_special_case(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), __pyx_v_tag_str, __pyx_v_orth_str, __pyx_v_attrs, __pyx_v_force);

  /* "spacy/morphology.pyx":246
 *         return lemma
 * 
 *     def add_special_case(self, unicode tag_str, unicode orth_str, attrs,             # <<<<<<<<<<<<<<
 *                          force=False):
 *         """Add a special-case rule to the morphological analyser. Tokens whose
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_14add_special_case(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_tag_str, PyObject *__pyx_v_orth_str, PyObject *__pyx_v_attrs, CYTHON_UNUSED PyObject *__pyx_v_force) {
  PyObject *__pyx_8genexpr3__pyx_v_feat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("add_special_case", 0);
  __Pyx_INCREF(__pyx_v_attrs);

  /* "spacy/morphology.pyx":254
 *         orth (unicode): The word-form to key the exception.
 *         """
 *         attrs = dict(attrs)             # <<<<<<<<<<<<<<
 *         attrs = _normalize_props(attrs)
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":255
 *         """
 *         attrs = dict(attrs)
 *         attrs = _normalize_props(attrs)             # <<<<<<<<<<<<<<
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                  if feat in self._feat_map.id2feat})
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_normalize_props); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_attrs) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_attrs);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":256
 *         attrs = dict(attrs)
 *         attrs = _normalize_props(attrs)
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs             # <<<<<<<<<<<<<<
 *                  if feat in self._feat_map.id2feat})
 *         attrs = intify_attrs(attrs, self.strings, _do_deprecated=True)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { /* enter inner scope */
    __pyx_t_3 = PySet_New(NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_attrs)) || PyTuple_CheckExact(__pyx_v_attrs)) {
      __pyx_t_4 = __pyx_v_attrs; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_attrs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 256, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 256, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 256, __pyx_L5_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 256, __pyx_L5_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 256, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_feat, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "spacy/morphology.pyx":257
 *         attrs = _normalize_props(attrs)
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                  if feat in self._feat_map.id2feat})             # <<<<<<<<<<<<<<
 *         attrs = intify_attrs(attrs, self.strings, _do_deprecated=True)
 *         self.exc[(tag_str, self.strings.add(orth_str))] = attrs
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_feat_map, __pyx_n_s_id2feat); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 257, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_8genexpr3__pyx_v_feat, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 257, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = (__pyx_t_8 != 0);
      if (__pyx_t_9) {

        /* "spacy/morphology.pyx":256
 *         attrs = dict(attrs)
 *         attrs = _normalize_props(attrs)
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs             # <<<<<<<<<<<<<<
 *                  if feat in self._feat_map.id2feat})
 *         attrs = intify_attrs(attrs, self.strings, _do_deprecated=True)
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_feat_map, __pyx_n_s_id2feat); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_8genexpr3__pyx_v_feat); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 256, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(PySet_Add(__pyx_t_3, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 256, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "spacy/morphology.pyx":257
 *         attrs = _normalize_props(attrs)
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                  if feat in self._feat_map.id2feat})             # <<<<<<<<<<<<<<
 *         attrs = intify_attrs(attrs, self.strings, _do_deprecated=True)
 *         self.exc[(tag_str, self.strings.add(orth_str))] = attrs
 */
      }

      /* "spacy/morphology.pyx":256
 *         attrs = dict(attrs)
 *         attrs = _normalize_props(attrs)
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs             # <<<<<<<<<<<<<<
 *                  if feat in self._feat_map.id2feat})
 *         attrs = intify_attrs(attrs, self.strings, _do_deprecated=True)
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_feat); __pyx_8genexpr3__pyx_v_feat = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_feat); __pyx_8genexpr3__pyx_v_feat = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":258
 *         self.add({self._feat_map.id2feat[feat] for feat in attrs
 *                  if feat in self._feat_map.id2feat})
 *         attrs = intify_attrs(attrs, self.strings, _do_deprecated=True)             # <<<<<<<<<<<<<<
 *         self.exc[(tag_str, self.strings.add(orth_str))] = attrs
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_intify_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_attrs);
  __Pyx_GIVEREF(__pyx_v_attrs);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_attrs);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->strings));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->strings));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->strings));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_do_deprecated, Py_True) < 0) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":259
 *                  if feat in self._feat_map.id2feat})
 *         attrs = intify_attrs(attrs, self.strings, _do_deprecated=True)
 *         self.exc[(tag_str, self.strings.add(orth_str))] = attrs             # <<<<<<<<<<<<<<
 * 
 *     cdef hash_t insert(self, MorphAnalysisC tag) except 0:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_orth_str) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_orth_str);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_tag_str);
  __Pyx_GIVEREF(__pyx_v_tag_str);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_tag_str);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_self->exc, __pyx_t_3, __pyx_v_attrs) < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy/morphology.pyx":246
 *         return lemma
 * 
 *     def add_special_case(self, unicode tag_str, unicode orth_str, attrs,             # <<<<<<<<<<<<<<
 *                          force=False):
 *         """Add a special-case rule to the morphological analyser. Tokens whose
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("spacy.morphology.Morphology.add_special_case", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_feat);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":261
 *         self.exc[(tag_str, self.strings.add(orth_str))] = attrs
 * 
 *     cdef hash_t insert(self, MorphAnalysisC tag) except 0:             # <<<<<<<<<<<<<<
 *         cdef hash_t key = hash_tag(tag)
 *         if self.tags.get(key) == NULL:
 */

static __pyx_t_5spacy_8typedefs_hash_t __pyx_f_5spacy_10morphology_10Morphology_insert(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_v_tag) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_key;
  struct __pyx_t_5spacy_7structs_MorphAnalysisC *__pyx_v_tag_ptr;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  void *__pyx_t_2;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "spacy/morphology.pyx":262
 * 
 *     cdef hash_t insert(self, MorphAnalysisC tag) except 0:
 *         cdef hash_t key = hash_tag(tag)             # <<<<<<<<<<<<<<
 *         if self.tags.get(key) == NULL:
 *             tag_ptr = <MorphAnalysisC*>self.mem.alloc(1, sizeof(MorphAnalysisC))
 */
  __pyx_v_key = __pyx_f_5spacy_10morphology_hash_tag(__pyx_v_tag);

  /* "spacy/morphology.pyx":263
 *     cdef hash_t insert(self, MorphAnalysisC tag) except 0:
 *         cdef hash_t key = hash_tag(tag)
 *         if self.tags.get(key) == NULL:             # <<<<<<<<<<<<<<
 *             tag_ptr = <MorphAnalysisC*>self.mem.alloc(1, sizeof(MorphAnalysisC))
 *             tag_ptr[0] = tag
 */
  __pyx_t_1 = ((((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->tags->__pyx_vtab)->get(__pyx_v_self->tags, __pyx_v_key) == NULL) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":264
 *         cdef hash_t key = hash_tag(tag)
 *         if self.tags.get(key) == NULL:
 *             tag_ptr = <MorphAnalysisC*>self.mem.alloc(1, sizeof(MorphAnalysisC))             # <<<<<<<<<<<<<<
 *             tag_ptr[0] = tag
 *             self.tags.set(key, <void*>tag_ptr)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, 1, (sizeof(struct __pyx_t_5spacy_7structs_MorphAnalysisC))); if (unlikely(__pyx_t_2 == ((void *)NULL))) __PYX_ERR(0, 264, __pyx_L1_error)
    __pyx_v_tag_ptr = ((struct __pyx_t_5spacy_7structs_MorphAnalysisC *)__pyx_t_2);

    /* "spacy/morphology.pyx":265
 *         if self.tags.get(key) == NULL:
 *             tag_ptr = <MorphAnalysisC*>self.mem.alloc(1, sizeof(MorphAnalysisC))
 *             tag_ptr[0] = tag             # <<<<<<<<<<<<<<
 *             self.tags.set(key, <void*>tag_ptr)
 *         return key
 */
    (__pyx_v_tag_ptr[0]) = __pyx_v_tag;

    /* "spacy/morphology.pyx":266
 *             tag_ptr = <MorphAnalysisC*>self.mem.alloc(1, sizeof(MorphAnalysisC))
 *             tag_ptr[0] = tag
 *             self.tags.set(key, <void*>tag_ptr)             # <<<<<<<<<<<<<<
 *         return key
 * 
 */
    ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->tags->__pyx_vtab)->set(__pyx_v_self->tags, __pyx_v_key, ((void *)__pyx_v_tag_ptr)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L1_error)

    /* "spacy/morphology.pyx":263
 *     cdef hash_t insert(self, MorphAnalysisC tag) except 0:
 *         cdef hash_t key = hash_tag(tag)
 *         if self.tags.get(key) == NULL:             # <<<<<<<<<<<<<<
 *             tag_ptr = <MorphAnalysisC*>self.mem.alloc(1, sizeof(MorphAnalysisC))
 *             tag_ptr[0] = tag
 */
  }

  /* "spacy/morphology.pyx":267
 *             tag_ptr[0] = tag
 *             self.tags.set(key, <void*>tag_ptr)
 *         return key             # <<<<<<<<<<<<<<
 * 
 *     cdef int assign_untagged(self, TokenC* token) except -1:
 */
  __pyx_r = __pyx_v_key;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":261
 *         self.exc[(tag_str, self.strings.add(orth_str))] = attrs
 * 
 *     cdef hash_t insert(self, MorphAnalysisC tag) except 0:             # <<<<<<<<<<<<<<
 *         cdef hash_t key = hash_tag(tag)
 *         if self.tags.get(key) == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("spacy.morphology.Morphology.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":269
 *         return key
 * 
 *     cdef int assign_untagged(self, TokenC* token) except -1:             # <<<<<<<<<<<<<<
 *         """Set morphological attributes on a token without a POS tag. Uses
 *         the lemmatizer's lookup() method, which looks up the string in the
 */

static int __pyx_f_5spacy_10morphology_10Morphology_assign_untagged(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token) {
  PyObject *__pyx_v_orth_str = NULL;
  PyObject *__pyx_v_lemma = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_6;
  __Pyx_RefNannySetupContext("assign_untagged", 0);

  /* "spacy/morphology.pyx":274
 *         table provided by the language data as lemma_lookup (if available).
 *         """
 *         if token.lemma == 0:             # <<<<<<<<<<<<<<
 *             orth_str = self.strings[token.lex.orth]
 *             lemma = self.lemmatizer.lookup(orth_str, orth=token.lex.orth)
 */
  __pyx_t_1 = ((__pyx_v_token->lemma == 0) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":275
 *         """
 *         if token.lemma == 0:
 *             orth_str = self.strings[token.lex.orth]             # <<<<<<<<<<<<<<
 *             lemma = self.lemmatizer.lookup(orth_str, orth=token.lex.orth)
 *             token.lemma = self.strings.add(lemma)
 */
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->strings), __pyx_v_token->lex->orth, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_orth_str = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "spacy/morphology.pyx":276
 *         if token.lemma == 0:
 *             orth_str = self.strings[token.lex.orth]
 *             lemma = self.lemmatizer.lookup(orth_str, orth=token.lex.orth)             # <<<<<<<<<<<<<<
 *             token.lemma = self.strings.add(lemma)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->lemmatizer, __pyx_n_s_lookup); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_orth_str);
    __Pyx_GIVEREF(__pyx_v_orth_str);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_orth_str);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_v_token->lex->orth); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_orth, __pyx_t_5) < 0) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_lemma = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "spacy/morphology.pyx":277
 *             orth_str = self.strings[token.lex.orth]
 *             lemma = self.lemmatizer.lookup(orth_str, orth=token.lex.orth)
 *             token.lemma = self.strings.add(lemma)             # <<<<<<<<<<<<<<
 * 
 *     cdef int assign_tag(self, TokenC* token, tag_str) except -1:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_lemma) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_lemma);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_token->lemma = __pyx_t_6;

    /* "spacy/morphology.pyx":274
 *         table provided by the language data as lemma_lookup (if available).
 *         """
 *         if token.lemma == 0:             # <<<<<<<<<<<<<<
 *             orth_str = self.strings[token.lex.orth]
 *             lemma = self.lemmatizer.lookup(orth_str, orth=token.lex.orth)
 */
  }

  /* "spacy/morphology.pyx":269
 *         return key
 * 
 *     cdef int assign_untagged(self, TokenC* token) except -1:             # <<<<<<<<<<<<<<
 *         """Set morphological attributes on a token without a POS tag. Uses
 *         the lemmatizer's lookup() method, which looks up the string in the
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.morphology.Morphology.assign_untagged", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_orth_str);
  __Pyx_XDECREF(__pyx_v_lemma);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":279
 *             token.lemma = self.strings.add(lemma)
 * 
 *     cdef int assign_tag(self, TokenC* token, tag_str) except -1:             # <<<<<<<<<<<<<<
 *         cdef attr_t tag = self.strings.as_int(tag_str)
 *         if tag in self.reverse_index:
 */

static int __pyx_f_5spacy_10morphology_10Morphology_assign_tag(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token, PyObject *__pyx_v_tag_str) {
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_tag;
  PyObject *__pyx_v_tag_id = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("assign_tag", 0);

  /* "spacy/morphology.pyx":280
 * 
 *     cdef int assign_tag(self, TokenC* token, tag_str) except -1:
 *         cdef attr_t tag = self.strings.as_int(tag_str)             # <<<<<<<<<<<<<<
 *         if tag in self.reverse_index:
 *             tag_id = self.reverse_index[tag]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_as_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_tag_str) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_tag_str);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tag = __pyx_t_4;

  /* "spacy/morphology.pyx":281
 *     cdef int assign_tag(self, TokenC* token, tag_str) except -1:
 *         cdef attr_t tag = self.strings.as_int(tag_str)
 *         if tag in self.reverse_index:             # <<<<<<<<<<<<<<
 *             tag_id = self.reverse_index[tag]
 *             self.assign_tag_id(token, tag_id)
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_self->reverse_index, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "spacy/morphology.pyx":282
 *         cdef attr_t tag = self.strings.as_int(tag_str)
 *         if tag in self.reverse_index:
 *             tag_id = self.reverse_index[tag]             # <<<<<<<<<<<<<<
 *             self.assign_tag_id(token, tag_id)
 *         else:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->reverse_index, __pyx_v_tag, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_tag_id = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":283
 *         if tag in self.reverse_index:
 *             tag_id = self.reverse_index[tag]
 *             self.assign_tag_id(token, tag_id)             # <<<<<<<<<<<<<<
 *         else:
 *             token.tag = tag
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_tag_id); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_5spacy_10morphology_Morphology *)__pyx_v_self->__pyx_vtab)->assign_tag_id(__pyx_v_self, __pyx_v_token, __pyx_t_7); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 283, __pyx_L1_error)

    /* "spacy/morphology.pyx":281
 *     cdef int assign_tag(self, TokenC* token, tag_str) except -1:
 *         cdef attr_t tag = self.strings.as_int(tag_str)
 *         if tag in self.reverse_index:             # <<<<<<<<<<<<<<
 *             tag_id = self.reverse_index[tag]
 *             self.assign_tag_id(token, tag_id)
 */
    goto __pyx_L3;
  }

  /* "spacy/morphology.pyx":285
 *             self.assign_tag_id(token, tag_id)
 *         else:
 *             token.tag = tag             # <<<<<<<<<<<<<<
 * 
 *     cdef int assign_tag_id(self, TokenC* token, int tag_id) except -1:
 */
  /*else*/ {
    __pyx_v_token->tag = __pyx_v_tag;
  }
  __pyx_L3:;

  /* "spacy/morphology.pyx":279
 *             token.lemma = self.strings.add(lemma)
 * 
 *     cdef int assign_tag(self, TokenC* token, tag_str) except -1:             # <<<<<<<<<<<<<<
 *         cdef attr_t tag = self.strings.as_int(tag_str)
 *         if tag in self.reverse_index:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("spacy.morphology.Morphology.assign_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tag_id);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":287
 *             token.tag = tag
 * 
 *     cdef int assign_tag_id(self, TokenC* token, int tag_id) except -1:             # <<<<<<<<<<<<<<
 *         if tag_id > self.n_tags:
 *             raise ValueError(Errors.E014.format(tag=tag_id))
 */

static int __pyx_f_5spacy_10morphology_10Morphology_assign_tag_id(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token, int __pyx_v_tag_id) {
  PyObject *__pyx_v_tag_str = NULL;
  PyObject *__pyx_v_features = NULL;
  PyObject *__pyx_v_pos = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_lemma;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_8;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_t_9;
  uint64_t __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("assign_tag_id", 0);

  /* "spacy/morphology.pyx":288
 * 
 *     cdef int assign_tag_id(self, TokenC* token, int tag_id) except -1:
 *         if tag_id > self.n_tags:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E014.format(tag=tag_id))
 *         # Ensure spaces get tagged as space.
 */
  __pyx_t_1 = ((__pyx_v_tag_id > __pyx_v_self->n_tags) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "spacy/morphology.pyx":289
 *     cdef int assign_tag_id(self, TokenC* token, int tag_id) except -1:
 *         if tag_id > self.n_tags:
 *             raise ValueError(Errors.E014.format(tag=tag_id))             # <<<<<<<<<<<<<<
 *         # Ensure spaces get tagged as space.
 *         # It seems pretty arbitrary to put this logic here, but there's really
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Errors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_E014); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_tag_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_tag, __pyx_t_4) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 289, __pyx_L1_error)

    /* "spacy/morphology.pyx":288
 * 
 *     cdef int assign_tag_id(self, TokenC* token, int tag_id) except -1:
 *         if tag_id > self.n_tags:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E014.format(tag=tag_id))
 *         # Ensure spaces get tagged as space.
 */
  }

  /* "spacy/morphology.pyx":296
 *         # way to enforce this rule, or figure out why the statistical model fails.
 *         # Related to Issue #220
 *         if Lexeme.c_check_flag(token.lex, IS_SPACE):             # <<<<<<<<<<<<<<
 *             tag_id = self.reverse_index[self.strings.add('_SP')]
 *         tag_str = self.tag_names[tag_id]
 */
  __pyx_t_1 = (__pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(__pyx_v_token->lex, __pyx_e_5spacy_5attrs_IS_SPACE) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":297
 *         # Related to Issue #220
 *         if Lexeme.c_check_flag(token.lex, IS_SPACE):
 *             tag_id = self.reverse_index[self.strings.add('_SP')]             # <<<<<<<<<<<<<<
 *         tag_str = self.tag_names[tag_id]
 *         features = dict(self.tag_map.get(tag_str, {}))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_n_u_SP_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_SP_2);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_self->reverse_index, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_tag_id = __pyx_t_5;

    /* "spacy/morphology.pyx":296
 *         # way to enforce this rule, or figure out why the statistical model fails.
 *         # Related to Issue #220
 *         if Lexeme.c_check_flag(token.lex, IS_SPACE):             # <<<<<<<<<<<<<<
 *             tag_id = self.reverse_index[self.strings.add('_SP')]
 *         tag_str = self.tag_names[tag_id]
 */
  }

  /* "spacy/morphology.pyx":298
 *         if Lexeme.c_check_flag(token.lex, IS_SPACE):
 *             tag_id = self.reverse_index[self.strings.add('_SP')]
 *         tag_str = self.tag_names[tag_id]             # <<<<<<<<<<<<<<
 *         features = dict(self.tag_map.get(tag_str, {}))
 *         if features:
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_self->tag_names, __pyx_v_tag_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_tag_str = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":299
 *             tag_id = self.reverse_index[self.strings.add('_SP')]
 *         tag_str = self.tag_names[tag_id]
 *         features = dict(self.tag_map.get(tag_str, {}))             # <<<<<<<<<<<<<<
 *         if features:
 *             pos = self.strings.as_int(features.pop(POS))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->tag_map, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_tag_str, __pyx_t_2};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_tag_str, __pyx_t_2};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_tag_str);
    __Pyx_GIVEREF(__pyx_v_tag_str);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_5, __pyx_v_tag_str);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_features = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "spacy/morphology.pyx":300
 *         tag_str = self.tag_names[tag_id]
 *         features = dict(self.tag_map.get(tag_str, {}))
 *         if features:             # <<<<<<<<<<<<<<
 *             pos = self.strings.as_int(features.pop(POS))
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_features); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 300, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":301
 *         features = dict(self.tag_map.get(tag_str, {}))
 *         if features:
 *             pos = self.strings.as_int(features.pop(POS))             # <<<<<<<<<<<<<<
 *         else:
 *             pos = 0
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->strings), __pyx_n_s_as_int); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(__pyx_e_5spacy_5attrs_POS); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyDict_Pop(__pyx_v_features, __pyx_t_7, ((PyObject *)NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_pos = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "spacy/morphology.pyx":300
 *         tag_str = self.tag_names[tag_id]
 *         features = dict(self.tag_map.get(tag_str, {}))
 *         if features:             # <<<<<<<<<<<<<<
 *             pos = self.strings.as_int(features.pop(POS))
 *         else:
 */
    goto __pyx_L5;
  }

  /* "spacy/morphology.pyx":303
 *             pos = self.strings.as_int(features.pop(POS))
 *         else:
 *             pos = 0             # <<<<<<<<<<<<<<
 *         cdef attr_t lemma = <attr_t>self._cache.get(tag_id, token.lex.orth)
 *         if lemma == 0:
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_pos = __pyx_int_0;
  }
  __pyx_L5:;

  /* "spacy/morphology.pyx":304
 *         else:
 *             pos = 0
 *         cdef attr_t lemma = <attr_t>self._cache.get(tag_id, token.lex.orth)             # <<<<<<<<<<<<<<
 *         if lemma == 0:
 *             # Ugh, self.lemmatize has opposite arg order from self.lemmatizer :(
 */
  __pyx_v_lemma = ((__pyx_t_5spacy_8typedefs_attr_t)((struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *)__pyx_v_self->_cache->__pyx_vtab)->get(__pyx_v_self->_cache, __pyx_v_tag_id, __pyx_v_token->lex->orth));

  /* "spacy/morphology.pyx":305
 *             pos = 0
 *         cdef attr_t lemma = <attr_t>self._cache.get(tag_id, token.lex.orth)
 *         if lemma == 0:             # <<<<<<<<<<<<<<
 *             # Ugh, self.lemmatize has opposite arg order from self.lemmatizer :(
 *             lemma = self.lemmatize(pos, token.lex.orth, features)
 */
  __pyx_t_1 = ((__pyx_v_lemma == 0) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":307
 *         if lemma == 0:
 *             # Ugh, self.lemmatize has opposite arg order from self.lemmatizer :(
 *             lemma = self.lemmatize(pos, token.lex.orth, features)             # <<<<<<<<<<<<<<
 *             self._cache.set(tag_id, token.lex.orth, <void*>lemma)
 *         token.lemma = lemma
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lemmatize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_token->lex->orth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_pos, __pyx_t_2, __pyx_v_features};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_pos, __pyx_t_2, __pyx_v_features};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_pos);
      __Pyx_GIVEREF(__pyx_v_pos);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_pos);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
      __Pyx_INCREF(__pyx_v_features);
      __Pyx_GIVEREF(__pyx_v_features);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_features);
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_lemma = __pyx_t_8;

    /* "spacy/morphology.pyx":308
 *             # Ugh, self.lemmatize has opposite arg order from self.lemmatizer :(
 *             lemma = self.lemmatize(pos, token.lex.orth, features)
 *             self._cache.set(tag_id, token.lex.orth, <void*>lemma)             # <<<<<<<<<<<<<<
 *         token.lemma = lemma
 *         token.pos = <univ_pos_t>pos
 */
    ((struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *)__pyx_v_self->_cache->__pyx_vtab)->set(__pyx_v_self->_cache, __pyx_v_tag_id, __pyx_v_token->lex->orth, ((void *)__pyx_v_lemma)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)

    /* "spacy/morphology.pyx":305
 *             pos = 0
 *         cdef attr_t lemma = <attr_t>self._cache.get(tag_id, token.lex.orth)
 *         if lemma == 0:             # <<<<<<<<<<<<<<
 *             # Ugh, self.lemmatize has opposite arg order from self.lemmatizer :(
 *             lemma = self.lemmatize(pos, token.lex.orth, features)
 */
  }

  /* "spacy/morphology.pyx":309
 *             lemma = self.lemmatize(pos, token.lex.orth, features)
 *             self._cache.set(tag_id, token.lex.orth, <void*>lemma)
 *         token.lemma = lemma             # <<<<<<<<<<<<<<
 *         token.pos = <univ_pos_t>pos
 *         token.tag = self.strings[tag_str]
 */
  __pyx_v_token->lemma = __pyx_v_lemma;

  /* "spacy/morphology.pyx":310
 *             self._cache.set(tag_id, token.lex.orth, <void*>lemma)
 *         token.lemma = lemma
 *         token.pos = <univ_pos_t>pos             # <<<<<<<<<<<<<<
 *         token.tag = self.strings[tag_str]
 *         token.morph = self.add(features)
 */
  __pyx_t_9 = ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)__Pyx_PyInt_As_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_v_pos)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_v_token->pos = ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)__pyx_t_9);

  /* "spacy/morphology.pyx":311
 *         token.lemma = lemma
 *         token.pos = <univ_pos_t>pos
 *         token.tag = self.strings[tag_str]             # <<<<<<<<<<<<<<
 *         token.morph = self.add(features)
 *         if (self.tag_names[tag_id], token.lex.orth) in self.exc:
 */
  __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->strings), __pyx_v_tag_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_token->tag = __pyx_t_8;

  /* "spacy/morphology.pyx":312
 *         token.pos = <univ_pos_t>pos
 *         token.tag = self.strings[tag_str]
 *         token.morph = self.add(features)             # <<<<<<<<<<<<<<
 *         if (self.tag_names[tag_id], token.lex.orth) in self.exc:
 *             self._assign_tag_from_exceptions(token, tag_id)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_v_features) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_features);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_token->morph = __pyx_t_10;

  /* "spacy/morphology.pyx":313
 *         token.tag = self.strings[tag_str]
 *         token.morph = self.add(features)
 *         if (self.tag_names[tag_id], token.lex.orth) in self.exc:             # <<<<<<<<<<<<<<
 *             self._assign_tag_from_exceptions(token, tag_id)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->tag_names, __pyx_v_tag_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_token->lex->orth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_6, __pyx_v_self->exc, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_11 = (__pyx_t_1 != 0);
  if (__pyx_t_11) {

    /* "spacy/morphology.pyx":314
 *         token.morph = self.add(features)
 *         if (self.tag_names[tag_id], token.lex.orth) in self.exc:
 *             self._assign_tag_from_exceptions(token, tag_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef int _assign_tag_from_exceptions(self, TokenC* token, int tag_id) except -1:
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_5spacy_10morphology_Morphology *)__pyx_v_self->__pyx_vtab)->_assign_tag_from_exceptions(__pyx_v_self, __pyx_v_token, __pyx_v_tag_id); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 314, __pyx_L1_error)

    /* "spacy/morphology.pyx":313
 *         token.tag = self.strings[tag_str]
 *         token.morph = self.add(features)
 *         if (self.tag_names[tag_id], token.lex.orth) in self.exc:             # <<<<<<<<<<<<<<
 *             self._assign_tag_from_exceptions(token, tag_id)
 * 
 */
  }

  /* "spacy/morphology.pyx":287
 *             token.tag = tag
 * 
 *     cdef int assign_tag_id(self, TokenC* token, int tag_id) except -1:             # <<<<<<<<<<<<<<
 *         if tag_id > self.n_tags:
 *             raise ValueError(Errors.E014.format(tag=tag_id))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.morphology.Morphology.assign_tag_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tag_str);
  __Pyx_XDECREF(__pyx_v_features);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":316
 *             self._assign_tag_from_exceptions(token, tag_id)
 * 
 *     cdef int _assign_tag_from_exceptions(self, TokenC* token, int tag_id) except -1:             # <<<<<<<<<<<<<<
 *         key = (self.tag_names[tag_id], token.lex.orth)
 *         cdef dict attrs
 */

static int __pyx_f_5spacy_10morphology_10Morphology__assign_tag_from_exceptions(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_token, int __pyx_v_tag_id) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_attrs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_t_4;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_assign_tag_from_exceptions", 0);

  /* "spacy/morphology.pyx":317
 * 
 *     cdef int _assign_tag_from_exceptions(self, TokenC* token, int tag_id) except -1:
 *         key = (self.tag_names[tag_id], token.lex.orth)             # <<<<<<<<<<<<<<
 *         cdef dict attrs
 *         attrs = self.exc[key]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->tag_names, __pyx_v_tag_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_token->lex->orth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_key = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "spacy/morphology.pyx":319
 *         key = (self.tag_names[tag_id], token.lex.orth)
 *         cdef dict attrs
 *         attrs = self.exc[key]             # <<<<<<<<<<<<<<
 *         token.pos = attrs.get(POS, token.pos)
 *         token.lemma = attrs.get(LEMMA, token.lemma)
 */
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_self->exc, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 319, __pyx_L1_error)
  __pyx_v_attrs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "spacy/morphology.pyx":320
 *         cdef dict attrs
 *         attrs = self.exc[key]
 *         token.pos = attrs.get(POS, token.pos)             # <<<<<<<<<<<<<<
 *         token.lemma = attrs.get(LEMMA, token.lemma)
 * 
 */
  if (unlikely(__pyx_v_attrs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 320, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(__pyx_e_5spacy_5attrs_POS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_v_token->pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)__Pyx_PyInt_As_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_token->pos = __pyx_t_4;

  /* "spacy/morphology.pyx":321
 *         attrs = self.exc[key]
 *         token.pos = attrs.get(POS, token.pos)
 *         token.lemma = attrs.get(LEMMA, token.lemma)             # <<<<<<<<<<<<<<
 * 
 *     def load_morph_exceptions(self, dict exc):
 */
  if (unlikely(__pyx_v_attrs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 321, __pyx_L1_error)
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LEMMA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_token->lemma); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_token->lemma = __pyx_t_5;

  /* "spacy/morphology.pyx":316
 *             self._assign_tag_from_exceptions(token, tag_id)
 * 
 *     cdef int _assign_tag_from_exceptions(self, TokenC* token, int tag_id) except -1:             # <<<<<<<<<<<<<<
 *         key = (self.tag_names[tag_id], token.lex.orth)
 *         cdef dict attrs
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("spacy.morphology.Morphology._assign_tag_from_exceptions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":323
 *         token.lemma = attrs.get(LEMMA, token.lemma)
 * 
 *     def load_morph_exceptions(self, dict exc):             # <<<<<<<<<<<<<<
 *         # Map (form, pos) to attributes
 *         for tag_str, entries in exc.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_17load_morph_exceptions(PyObject *__pyx_v_self, PyObject *__pyx_v_exc); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_17load_morph_exceptions(PyObject *__pyx_v_self, PyObject *__pyx_v_exc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_morph_exceptions (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exc), (&PyDict_Type), 1, "exc", 1))) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_16load_morph_exceptions(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), ((PyObject*)__pyx_v_exc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_16load_morph_exceptions(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_exc) {
  PyObject *__pyx_v_tag_str = NULL;
  PyObject *__pyx_v_entries = NULL;
  PyObject *__pyx_v_form_str = NULL;
  PyObject *__pyx_v_attrs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("load_morph_exceptions", 0);

  /* "spacy/morphology.pyx":325
 *     def load_morph_exceptions(self, dict exc):
 *         # Map (form, pos) to attributes
 *         for tag_str, entries in exc.items():             # <<<<<<<<<<<<<<
 *             for form_str, attrs in entries.items():
 *                 self.add_special_case(tag_str, form_str, attrs)
 */
  if (unlikely(__pyx_v_exc == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 325, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_exc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 325, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 325, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 325, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 325, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_tag_str, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_entries, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "spacy/morphology.pyx":326
 *         # Map (form, pos) to attributes
 *         for tag_str, entries in exc.items():
 *             for form_str, attrs in entries.items():             # <<<<<<<<<<<<<<
 *                 self.add_special_case(tag_str, form_str, attrs)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_entries, __pyx_n_s_items); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 326, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 326, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 326, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_6);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 326, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 326, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_11); if (unlikely(!__pyx_t_5)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_11), 2) < 0) __PYX_ERR(0, 326, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 326, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_form_str, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_attrs, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "spacy/morphology.pyx":327
 *         for tag_str, entries in exc.items():
 *             for form_str, attrs in entries.items():
 *                 self.add_special_case(tag_str, form_str, attrs)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_special_case); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_tag_str, __pyx_v_form_str, __pyx_v_attrs};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_tag_str, __pyx_v_form_str, __pyx_v_attrs};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_v_tag_str);
        __Pyx_GIVEREF(__pyx_v_tag_str);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_v_tag_str);
        __Pyx_INCREF(__pyx_v_form_str);
        __Pyx_GIVEREF(__pyx_v_form_str);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_v_form_str);
        __Pyx_INCREF(__pyx_v_attrs);
        __Pyx_GIVEREF(__pyx_v_attrs);
        PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_12, __pyx_v_attrs);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "spacy/morphology.pyx":326
 *         # Map (form, pos) to attributes
 *         for tag_str, entries in exc.items():
 *             for form_str, attrs in entries.items():             # <<<<<<<<<<<<<<
 *                 self.add_special_case(tag_str, form_str, attrs)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "spacy/morphology.pyx":325
 *     def load_morph_exceptions(self, dict exc):
 *         # Map (form, pos) to attributes
 *         for tag_str, entries in exc.items():             # <<<<<<<<<<<<<<
 *             for form_str, attrs in entries.items():
 *                 self.add_special_case(tag_str, form_str, attrs)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":323
 *         token.lemma = attrs.get(LEMMA, token.lemma)
 * 
 *     def load_morph_exceptions(self, dict exc):             # <<<<<<<<<<<<<<
 *         # Map (form, pos) to attributes
 *         for tag_str, entries in exc.items():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("spacy.morphology.Morphology.load_morph_exceptions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tag_str);
  __Pyx_XDECREF(__pyx_v_entries);
  __Pyx_XDECREF(__pyx_v_form_str);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":330
 * 
 *     @classmethod
 *     def create_class_map(cls):             # <<<<<<<<<<<<<<
 *         return MorphologyClassMap(FEATURES)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_19create_class_map(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_19create_class_map(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_class_map (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_18create_class_map(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_18create_class_map(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("create_class_map", 0);

  /* "spacy/morphology.pyx":331
 *     @classmethod
 *     def create_class_map(cls):
 *         return MorphologyClassMap(FEATURES)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MorphologyClassMap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FEATURES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":330
 * 
 *     @classmethod
 *     def create_class_map(cls):             # <<<<<<<<<<<<<<
 *         return MorphologyClassMap(FEATURES)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.morphology.Morphology.create_class_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":14
 * 
 * cdef class Morphology:
 *     cdef readonly Pool mem             # <<<<<<<<<<<<<<
 *     cdef readonly StringStore strings
 *     cdef PreshMap tags # Keyed by hash, value is pointer to tag
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_3mem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_3mem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_3mem___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_3mem___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __pyx_r = ((PyObject *)__pyx_v_self->mem);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":15
 * cdef class Morphology:
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings             # <<<<<<<<<<<<<<
 *     cdef PreshMap tags # Keyed by hash, value is pointer to tag
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_7strings_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_7strings_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_7strings___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_7strings___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->strings));
  __pyx_r = ((PyObject *)__pyx_v_self->strings);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":18
 *     cdef PreshMap tags # Keyed by hash, value is pointer to tag
 * 
 *     cdef public object lemmatizer             # <<<<<<<<<<<<<<
 *     cdef readonly object tag_map
 *     cdef readonly object tag_names
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->lemmatizer);
  __pyx_r = __pyx_v_self->lemmatizer;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer_2__set__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer_2__set__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->lemmatizer);
  __Pyx_DECREF(__pyx_v_self->lemmatizer);
  __pyx_v_self->lemmatizer = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer_4__del__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5spacy_10morphology_10Morphology_10lemmatizer_4__del__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->lemmatizer);
  __Pyx_DECREF(__pyx_v_self->lemmatizer);
  __pyx_v_self->lemmatizer = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":19
 * 
 *     cdef public object lemmatizer
 *     cdef readonly object tag_map             # <<<<<<<<<<<<<<
 *     cdef readonly object tag_names
 *     cdef readonly object reverse_index
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_7tag_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_7tag_map_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_7tag_map___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_7tag_map___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tag_map);
  __pyx_r = __pyx_v_self->tag_map;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":20
 *     cdef public object lemmatizer
 *     cdef readonly object tag_map
 *     cdef readonly object tag_names             # <<<<<<<<<<<<<<
 *     cdef readonly object reverse_index
 *     cdef readonly object exc
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_9tag_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_9tag_names_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_9tag_names___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_9tag_names___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tag_names);
  __pyx_r = __pyx_v_self->tag_names;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":21
 *     cdef readonly object tag_map
 *     cdef readonly object tag_names
 *     cdef readonly object reverse_index             # <<<<<<<<<<<<<<
 *     cdef readonly object exc
 *     cdef readonly object _feat_map
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_13reverse_index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_13reverse_index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_13reverse_index___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_13reverse_index___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->reverse_index);
  __pyx_r = __pyx_v_self->reverse_index;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":22
 *     cdef readonly object tag_names
 *     cdef readonly object reverse_index
 *     cdef readonly object exc             # <<<<<<<<<<<<<<
 *     cdef readonly object _feat_map
 *     cdef readonly PreshMapArray _cache
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_3exc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_3exc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_3exc___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_3exc___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->exc);
  __pyx_r = __pyx_v_self->exc;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":23
 *     cdef readonly object reverse_index
 *     cdef readonly object exc
 *     cdef readonly object _feat_map             # <<<<<<<<<<<<<<
 *     cdef readonly PreshMapArray _cache
 *     cdef readonly int n_tags
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_9_feat_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_9_feat_map_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_9_feat_map___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_9_feat_map___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_feat_map);
  __pyx_r = __pyx_v_self->_feat_map;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":24
 *     cdef readonly object exc
 *     cdef readonly object _feat_map
 *     cdef readonly PreshMapArray _cache             # <<<<<<<<<<<<<<
 *     cdef readonly int n_tags
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_6_cache_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_6_cache_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_6_cache___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_6_cache___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_cache));
  __pyx_r = ((PyObject *)__pyx_v_self->_cache);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pxd":25
 *     cdef readonly object _feat_map
 *     cdef readonly PreshMapArray _cache
 *     cdef readonly int n_tags             # <<<<<<<<<<<<<<
 * 
 *     cpdef update(self, hash_t morph, features)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_6n_tags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_10Morphology_6n_tags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_10Morphology_6n_tags___get__(((struct __pyx_obj_5spacy_10morphology_Morphology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_10Morphology_6n_tags___get__(struct __pyx_obj_5spacy_10morphology_Morphology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->n_tags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.morphology.Morphology.n_tags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":334
 * 
 * 
 * cpdef univ_pos_t get_int_tag(pos_):             # <<<<<<<<<<<<<<
 *     return <univ_pos_t>0
 * 
 */

static PyObject *__pyx_pw_5spacy_10morphology_3get_int_tag(PyObject *__pyx_self, PyObject *__pyx_v_pos_); /*proto*/
static enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_f_5spacy_10morphology_get_int_tag(CYTHON_UNUSED PyObject *__pyx_v_pos_, CYTHON_UNUSED int __pyx_skip_dispatch) {
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_int_tag", 0);

  /* "spacy/morphology.pyx":335
 * 
 * cpdef univ_pos_t get_int_tag(pos_):
 *     return <univ_pos_t>0             # <<<<<<<<<<<<<<
 * 
 * cpdef intify_features(features):
 */
  __pyx_r = ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)0);
  goto __pyx_L0;

  /* "spacy/morphology.pyx":334
 * 
 * 
 * cpdef univ_pos_t get_int_tag(pos_):             # <<<<<<<<<<<<<<
 *     return <univ_pos_t>0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_3get_int_tag(PyObject *__pyx_self, PyObject *__pyx_v_pos_); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_3get_int_tag(PyObject *__pyx_self, PyObject *__pyx_v_pos_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_int_tag (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_2get_int_tag(__pyx_self, ((PyObject *)__pyx_v_pos_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_2get_int_tag(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pos_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_int_tag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_f_5spacy_10morphology_get_int_tag(__pyx_v_pos_, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.morphology.get_int_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":337
 *     return <univ_pos_t>0
 * 
 * cpdef intify_features(features):             # <<<<<<<<<<<<<<
 *     return {get_string_id(feature) for feature in features}
 * 
 */

static PyObject *__pyx_pw_5spacy_10morphology_5intify_features(PyObject *__pyx_self, PyObject *__pyx_v_features); /*proto*/
static PyObject *__pyx_f_5spacy_10morphology_intify_features(PyObject *__pyx_v_features, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_8genexpr4__pyx_v_feature = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("intify_features", 0);

  /* "spacy/morphology.pyx":338
 * 
 * cpdef intify_features(features):
 *     return {get_string_id(feature) for feature in features}             # <<<<<<<<<<<<<<
 * 
 * cdef hash_t hash_tag(MorphAnalysisC tag) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PySet_New(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
      __pyx_t_2 = __pyx_v_features; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 338, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 338, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 338, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_feature, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_get_string_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 338, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_8genexpr4__pyx_v_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_8genexpr4__pyx_v_feature);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(PySet_Add(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 338, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_feature); __pyx_8genexpr4__pyx_v_feature = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_feature); __pyx_8genexpr4__pyx_v_feature = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":337
 *     return <univ_pos_t>0
 * 
 * cpdef intify_features(features):             # <<<<<<<<<<<<<<
 *     return {get_string_id(feature) for feature in features}
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.morphology.intify_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_feature);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_10morphology_5intify_features(PyObject *__pyx_self, PyObject *__pyx_v_features); /*proto*/
static PyObject *__pyx_pw_5spacy_10morphology_5intify_features(PyObject *__pyx_self, PyObject *__pyx_v_features) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intify_features (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_10morphology_4intify_features(__pyx_self, ((PyObject *)__pyx_v_features));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_10morphology_4intify_features(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_features) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("intify_features", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5spacy_10morphology_intify_features(__pyx_v_features, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.morphology.intify_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":340
 *     return {get_string_id(feature) for feature in features}
 * 
 * cdef hash_t hash_tag(MorphAnalysisC tag) nogil:             # <<<<<<<<<<<<<<
 *     return mrmr.hash64(&tag, sizeof(tag), 0)
 * 
 */

static __pyx_t_5spacy_8typedefs_hash_t __pyx_f_5spacy_10morphology_hash_tag(struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_v_tag) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_r;

  /* "spacy/morphology.pyx":341
 * 
 * cdef hash_t hash_tag(MorphAnalysisC tag) nogil:
 *     return mrmr.hash64(&tag, sizeof(tag), 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_10murmurhash_4mrmr_hash64((&__pyx_v_tag), (sizeof(__pyx_v_tag)), 0);
  goto __pyx_L0;

  /* "spacy/morphology.pyx":340
 *     return {get_string_id(feature) for feature in features}
 * 
 * cdef hash_t hash_tag(MorphAnalysisC tag) nogil:             # <<<<<<<<<<<<<<
 *     return mrmr.hash64(&tag, sizeof(tag), 0)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/morphology.pyx":344
 * 
 * 
 * cdef MorphAnalysisC create_rich_tag(features) except *:             # <<<<<<<<<<<<<<
 *     cdef MorphAnalysisC tag
 *     cdef attr_t feature
 */

static struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_f_5spacy_10morphology_create_rich_tag(PyObject *__pyx_v_features) {
  struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_v_tag;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_feature;
  PyObject *__pyx_v_field = NULL;
  struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  enum __pyx_t_5spacy_10morphology_univ_field_t __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("create_rich_tag", 0);

  /* "spacy/morphology.pyx":347
 *     cdef MorphAnalysisC tag
 *     cdef attr_t feature
 *     memset(&tag, 0, sizeof(tag))             # <<<<<<<<<<<<<<
 *     for feature in features:
 *         field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 */
  (void)(memset((&__pyx_v_tag), 0, (sizeof(__pyx_v_tag))));

  /* "spacy/morphology.pyx":348
 *     cdef attr_t feature
 *     memset(&tag, 0, sizeof(tag))
 *     for feature in features:             # <<<<<<<<<<<<<<
 *         field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *         set_feature(&tag, field, feature, 1)
 */
  if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
    __pyx_t_1 = __pyx_v_features; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 348, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_feature = __pyx_t_5;

    /* "spacy/morphology.pyx":349
 *     memset(&tag, 0, sizeof(tag))
 *     for feature in features:
 *         field = FEATURE_FIELDS[FEATURE_NAMES[feature]]             # <<<<<<<<<<<<<<
 *         set_feature(&tag, field, feature, 1)
 *     return tag
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FEATURE_FIELDS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_FEATURE_NAMES); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_feature, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "spacy/morphology.pyx":350
 *     for feature in features:
 *         field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *         set_feature(&tag, field, feature, 1)             # <<<<<<<<<<<<<<
 *     return tag
 * 
 */
    __pyx_t_8 = ((enum __pyx_t_5spacy_10morphology_univ_field_t)__Pyx_PyInt_As_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_v_field)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __pyx_t_9 = __pyx_f_5spacy_10morphology_set_feature((&__pyx_v_tag), __pyx_t_8, __pyx_v_feature, 1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 350, __pyx_L1_error)

    /* "spacy/morphology.pyx":348
 *     cdef attr_t feature
 *     memset(&tag, 0, sizeof(tag))
 *     for feature in features:             # <<<<<<<<<<<<<<
 *         field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *         set_feature(&tag, field, feature, 1)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":351
 *         field = FEATURE_FIELDS[FEATURE_NAMES[feature]]
 *         set_feature(&tag, field, feature, 1)
 *     return tag             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_tag;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":344
 * 
 * 
 * cdef MorphAnalysisC create_rich_tag(features) except *:             # <<<<<<<<<<<<<<
 *     cdef MorphAnalysisC tag
 *     cdef attr_t feature
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.morphology.create_rich_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":354
 * 
 * 
 * cdef tag_to_json(const MorphAnalysisC* tag):             # <<<<<<<<<<<<<<
 *     return [FEATURE_NAMES[f] for f in list_features(tag)]
 * 
 */

static PyObject *__pyx_f_5spacy_10morphology_tag_to_json(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *__pyx_v_tag) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("tag_to_json", 0);

  /* "spacy/morphology.pyx":355
 * 
 * cdef tag_to_json(const MorphAnalysisC* tag):
 *     return [FEATURE_NAMES[f] for f in list_features(tag)]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5spacy_10morphology_list_features(__pyx_v_tag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 355, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 355, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FEATURE_NAMES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_f); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":354
 * 
 * 
 * cdef tag_to_json(const MorphAnalysisC* tag):             # <<<<<<<<<<<<<<
 *     return [FEATURE_NAMES[f] for f in list_features(tag)]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.morphology.tag_to_json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":358
 * 
 * 
 * cdef MorphAnalysisC tag_from_json(json_tag):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */

static struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_f_5spacy_10morphology_tag_from_json(CYTHON_UNUSED PyObject *__pyx_v_json_tag) {
  struct __pyx_t_5spacy_7structs_MorphAnalysisC __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag_from_json", 0);

  /* "spacy/morphology.pyx":359
 * 
 * cdef MorphAnalysisC tag_from_json(json_tag):
 *     raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 359, __pyx_L1_error)

  /* "spacy/morphology.pyx":358
 * 
 * 
 * cdef MorphAnalysisC tag_from_json(json_tag):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.morphology.tag_from_json", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":362
 * 
 * 
 * cdef list list_features(const MorphAnalysisC* tag):             # <<<<<<<<<<<<<<
 *     output = []
 *     if tag.abbr != 0:
 */

static PyObject *__pyx_f_5spacy_10morphology_list_features(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *__pyx_v_tag) {
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("list_features", 0);

  /* "spacy/morphology.pyx":363
 * 
 * cdef list list_features(const MorphAnalysisC* tag):
 *     output = []             # <<<<<<<<<<<<<<
 *     if tag.abbr != 0:
 *         output.append(tag.abbr)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_output = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":364
 * cdef list list_features(const MorphAnalysisC* tag):
 *     output = []
 *     if tag.abbr != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.abbr)
 *     if tag.adp_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->abbr != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":365
 *     output = []
 *     if tag.abbr != 0:
 *         output.append(tag.abbr)             # <<<<<<<<<<<<<<
 *     if tag.adp_type != 0:
 *         output.append(tag.adp_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->abbr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":364
 * cdef list list_features(const MorphAnalysisC* tag):
 *     output = []
 *     if tag.abbr != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.abbr)
 *     if tag.adp_type != 0:
 */
  }

  /* "spacy/morphology.pyx":366
 *     if tag.abbr != 0:
 *         output.append(tag.abbr)
 *     if tag.adp_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.adp_type)
 *     if tag.adv_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->adp_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":367
 *         output.append(tag.abbr)
 *     if tag.adp_type != 0:
 *         output.append(tag.adp_type)             # <<<<<<<<<<<<<<
 *     if tag.adv_type != 0:
 *         output.append(tag.adv_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->adp_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":366
 *     if tag.abbr != 0:
 *         output.append(tag.abbr)
 *     if tag.adp_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.adp_type)
 *     if tag.adv_type != 0:
 */
  }

  /* "spacy/morphology.pyx":368
 *     if tag.adp_type != 0:
 *         output.append(tag.adp_type)
 *     if tag.adv_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.adv_type)
 *     if tag.animacy != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->adv_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":369
 *         output.append(tag.adp_type)
 *     if tag.adv_type != 0:
 *         output.append(tag.adv_type)             # <<<<<<<<<<<<<<
 *     if tag.animacy != 0:
 *         output.append(tag.animacy)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->adv_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":368
 *     if tag.adp_type != 0:
 *         output.append(tag.adp_type)
 *     if tag.adv_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.adv_type)
 *     if tag.animacy != 0:
 */
  }

  /* "spacy/morphology.pyx":370
 *     if tag.adv_type != 0:
 *         output.append(tag.adv_type)
 *     if tag.animacy != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.animacy)
 *     if tag.aspect != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->animacy != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":371
 *         output.append(tag.adv_type)
 *     if tag.animacy != 0:
 *         output.append(tag.animacy)             # <<<<<<<<<<<<<<
 *     if tag.aspect != 0:
 *         output.append(tag.aspect)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->animacy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":370
 *     if tag.adv_type != 0:
 *         output.append(tag.adv_type)
 *     if tag.animacy != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.animacy)
 *     if tag.aspect != 0:
 */
  }

  /* "spacy/morphology.pyx":372
 *     if tag.animacy != 0:
 *         output.append(tag.animacy)
 *     if tag.aspect != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.aspect)
 *     if tag.case != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->aspect != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":373
 *         output.append(tag.animacy)
 *     if tag.aspect != 0:
 *         output.append(tag.aspect)             # <<<<<<<<<<<<<<
 *     if tag.case != 0:
 *         output.append(tag.case)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->aspect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":372
 *     if tag.animacy != 0:
 *         output.append(tag.animacy)
 *     if tag.aspect != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.aspect)
 *     if tag.case != 0:
 */
  }

  /* "spacy/morphology.pyx":374
 *     if tag.aspect != 0:
 *         output.append(tag.aspect)
 *     if tag.case != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.case)
 *     if tag.conj_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->__pyx_case != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":375
 *         output.append(tag.aspect)
 *     if tag.case != 0:
 *         output.append(tag.case)             # <<<<<<<<<<<<<<
 *     if tag.conj_type != 0:
 *         output.append(tag.conj_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->__pyx_case); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":374
 *     if tag.aspect != 0:
 *         output.append(tag.aspect)
 *     if tag.case != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.case)
 *     if tag.conj_type != 0:
 */
  }

  /* "spacy/morphology.pyx":376
 *     if tag.case != 0:
 *         output.append(tag.case)
 *     if tag.conj_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.conj_type)
 *     if tag.connegative != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->conj_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":377
 *         output.append(tag.case)
 *     if tag.conj_type != 0:
 *         output.append(tag.conj_type)             # <<<<<<<<<<<<<<
 *     if tag.connegative != 0:
 *         output.append(tag.connegative)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->conj_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":376
 *     if tag.case != 0:
 *         output.append(tag.case)
 *     if tag.conj_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.conj_type)
 *     if tag.connegative != 0:
 */
  }

  /* "spacy/morphology.pyx":378
 *     if tag.conj_type != 0:
 *         output.append(tag.conj_type)
 *     if tag.connegative != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.connegative)
 *     if tag.definite != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->connegative != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":379
 *         output.append(tag.conj_type)
 *     if tag.connegative != 0:
 *         output.append(tag.connegative)             # <<<<<<<<<<<<<<
 *     if tag.definite != 0:
 *         output.append(tag.definite)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->connegative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":378
 *     if tag.conj_type != 0:
 *         output.append(tag.conj_type)
 *     if tag.connegative != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.connegative)
 *     if tag.definite != 0:
 */
  }

  /* "spacy/morphology.pyx":380
 *     if tag.connegative != 0:
 *         output.append(tag.connegative)
 *     if tag.definite != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.definite)
 *     if tag.degree != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->definite != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":381
 *         output.append(tag.connegative)
 *     if tag.definite != 0:
 *         output.append(tag.definite)             # <<<<<<<<<<<<<<
 *     if tag.degree != 0:
 *         output.append(tag.degree)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->definite); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":380
 *     if tag.connegative != 0:
 *         output.append(tag.connegative)
 *     if tag.definite != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.definite)
 *     if tag.degree != 0:
 */
  }

  /* "spacy/morphology.pyx":382
 *     if tag.definite != 0:
 *         output.append(tag.definite)
 *     if tag.degree != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.degree)
 *     if tag.derivation != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->degree != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":383
 *         output.append(tag.definite)
 *     if tag.degree != 0:
 *         output.append(tag.degree)             # <<<<<<<<<<<<<<
 *     if tag.derivation != 0:
 *         output.append(tag.derivation)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->degree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":382
 *     if tag.definite != 0:
 *         output.append(tag.definite)
 *     if tag.degree != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.degree)
 *     if tag.derivation != 0:
 */
  }

  /* "spacy/morphology.pyx":384
 *     if tag.degree != 0:
 *         output.append(tag.degree)
 *     if tag.derivation != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.derivation)
 *     if tag.echo != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->derivation != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":385
 *         output.append(tag.degree)
 *     if tag.derivation != 0:
 *         output.append(tag.derivation)             # <<<<<<<<<<<<<<
 *     if tag.echo != 0:
 *         output.append(tag.echo)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->derivation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":384
 *     if tag.degree != 0:
 *         output.append(tag.degree)
 *     if tag.derivation != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.derivation)
 *     if tag.echo != 0:
 */
  }

  /* "spacy/morphology.pyx":386
 *     if tag.derivation != 0:
 *         output.append(tag.derivation)
 *     if tag.echo != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.echo)
 *     if tag.foreign != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->echo != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":387
 *         output.append(tag.derivation)
 *     if tag.echo != 0:
 *         output.append(tag.echo)             # <<<<<<<<<<<<<<
 *     if tag.foreign != 0:
 *         output.append(tag.foreign)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->echo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":386
 *     if tag.derivation != 0:
 *         output.append(tag.derivation)
 *     if tag.echo != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.echo)
 *     if tag.foreign != 0:
 */
  }

  /* "spacy/morphology.pyx":388
 *     if tag.echo != 0:
 *         output.append(tag.echo)
 *     if tag.foreign != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.foreign)
 *     if tag.gender != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->foreign != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":389
 *         output.append(tag.echo)
 *     if tag.foreign != 0:
 *         output.append(tag.foreign)             # <<<<<<<<<<<<<<
 *     if tag.gender != 0:
 *         output.append(tag.gender)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->foreign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":388
 *     if tag.echo != 0:
 *         output.append(tag.echo)
 *     if tag.foreign != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.foreign)
 *     if tag.gender != 0:
 */
  }

  /* "spacy/morphology.pyx":390
 *     if tag.foreign != 0:
 *         output.append(tag.foreign)
 *     if tag.gender != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.gender)
 *     if tag.hyph != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->gender != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":391
 *         output.append(tag.foreign)
 *     if tag.gender != 0:
 *         output.append(tag.gender)             # <<<<<<<<<<<<<<
 *     if tag.hyph != 0:
 *         output.append(tag.hyph)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->gender); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":390
 *     if tag.foreign != 0:
 *         output.append(tag.foreign)
 *     if tag.gender != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.gender)
 *     if tag.hyph != 0:
 */
  }

  /* "spacy/morphology.pyx":392
 *     if tag.gender != 0:
 *         output.append(tag.gender)
 *     if tag.hyph != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.hyph)
 *     if tag.inf_form != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->hyph != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":393
 *         output.append(tag.gender)
 *     if tag.hyph != 0:
 *         output.append(tag.hyph)             # <<<<<<<<<<<<<<
 *     if tag.inf_form != 0:
 *         output.append(tag.inf_form)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->hyph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":392
 *     if tag.gender != 0:
 *         output.append(tag.gender)
 *     if tag.hyph != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.hyph)
 *     if tag.inf_form != 0:
 */
  }

  /* "spacy/morphology.pyx":394
 *     if tag.hyph != 0:
 *         output.append(tag.hyph)
 *     if tag.inf_form != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.inf_form)
 *     if tag.mood != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->inf_form != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":395
 *         output.append(tag.hyph)
 *     if tag.inf_form != 0:
 *         output.append(tag.inf_form)             # <<<<<<<<<<<<<<
 *     if tag.mood != 0:
 *         output.append(tag.mood)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->inf_form); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":394
 *     if tag.hyph != 0:
 *         output.append(tag.hyph)
 *     if tag.inf_form != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.inf_form)
 *     if tag.mood != 0:
 */
  }

  /* "spacy/morphology.pyx":396
 *     if tag.inf_form != 0:
 *         output.append(tag.inf_form)
 *     if tag.mood != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.mood)
 *     if tag.negative != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->mood != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":397
 *         output.append(tag.inf_form)
 *     if tag.mood != 0:
 *         output.append(tag.mood)             # <<<<<<<<<<<<<<
 *     if tag.negative != 0:
 *         output.append(tag.negative)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->mood); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":396
 *     if tag.inf_form != 0:
 *         output.append(tag.inf_form)
 *     if tag.mood != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.mood)
 *     if tag.negative != 0:
 */
  }

  /* "spacy/morphology.pyx":398
 *     if tag.mood != 0:
 *         output.append(tag.mood)
 *     if tag.negative != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.negative)
 *     if tag.number != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->negative != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":399
 *         output.append(tag.mood)
 *     if tag.negative != 0:
 *         output.append(tag.negative)             # <<<<<<<<<<<<<<
 *     if tag.number != 0:
 *         output.append(tag.number)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->negative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":398
 *     if tag.mood != 0:
 *         output.append(tag.mood)
 *     if tag.negative != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.negative)
 *     if tag.number != 0:
 */
  }

  /* "spacy/morphology.pyx":400
 *     if tag.negative != 0:
 *         output.append(tag.negative)
 *     if tag.number != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.number)
 *     if tag.name_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->number != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":401
 *         output.append(tag.negative)
 *     if tag.number != 0:
 *         output.append(tag.number)             # <<<<<<<<<<<<<<
 *     if tag.name_type != 0:
 *         output.append(tag.name_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":400
 *     if tag.negative != 0:
 *         output.append(tag.negative)
 *     if tag.number != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.number)
 *     if tag.name_type != 0:
 */
  }

  /* "spacy/morphology.pyx":402
 *     if tag.number != 0:
 *         output.append(tag.number)
 *     if tag.name_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.name_type)
 *     if tag.noun_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->name_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":403
 *         output.append(tag.number)
 *     if tag.name_type != 0:
 *         output.append(tag.name_type)             # <<<<<<<<<<<<<<
 *     if tag.noun_type != 0:
 *         output.append(tag.noun_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->name_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":402
 *     if tag.number != 0:
 *         output.append(tag.number)
 *     if tag.name_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.name_type)
 *     if tag.noun_type != 0:
 */
  }

  /* "spacy/morphology.pyx":404
 *     if tag.name_type != 0:
 *         output.append(tag.name_type)
 *     if tag.noun_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.noun_type)
 *     if tag.part_form != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->noun_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":405
 *         output.append(tag.name_type)
 *     if tag.noun_type != 0:
 *         output.append(tag.noun_type)             # <<<<<<<<<<<<<<
 *     if tag.part_form != 0:
 *         output.append(tag.part_form)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->noun_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":404
 *     if tag.name_type != 0:
 *         output.append(tag.name_type)
 *     if tag.noun_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.noun_type)
 *     if tag.part_form != 0:
 */
  }

  /* "spacy/morphology.pyx":406
 *     if tag.noun_type != 0:
 *         output.append(tag.noun_type)
 *     if tag.part_form != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.part_form)
 *     if tag.part_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->part_form != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":407
 *         output.append(tag.noun_type)
 *     if tag.part_form != 0:
 *         output.append(tag.part_form)             # <<<<<<<<<<<<<<
 *     if tag.part_type != 0:
 *         output.append(tag.part_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->part_form); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":406
 *     if tag.noun_type != 0:
 *         output.append(tag.noun_type)
 *     if tag.part_form != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.part_form)
 *     if tag.part_type != 0:
 */
  }

  /* "spacy/morphology.pyx":408
 *     if tag.part_form != 0:
 *         output.append(tag.part_form)
 *     if tag.part_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.part_type)
 *     if tag.person != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->part_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":409
 *         output.append(tag.part_form)
 *     if tag.part_type != 0:
 *         output.append(tag.part_type)             # <<<<<<<<<<<<<<
 *     if tag.person != 0:
 *         output.append(tag.person)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->part_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":408
 *     if tag.part_form != 0:
 *         output.append(tag.part_form)
 *     if tag.part_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.part_type)
 *     if tag.person != 0:
 */
  }

  /* "spacy/morphology.pyx":410
 *     if tag.part_type != 0:
 *         output.append(tag.part_type)
 *     if tag.person != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.person)
 *     if tag.polite != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->person != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":411
 *         output.append(tag.part_type)
 *     if tag.person != 0:
 *         output.append(tag.person)             # <<<<<<<<<<<<<<
 *     if tag.polite != 0:
 *         output.append(tag.polite)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->person); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":410
 *     if tag.part_type != 0:
 *         output.append(tag.part_type)
 *     if tag.person != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.person)
 *     if tag.polite != 0:
 */
  }

  /* "spacy/morphology.pyx":412
 *     if tag.person != 0:
 *         output.append(tag.person)
 *     if tag.polite != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.polite)
 *     if tag.polarity != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->polite != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":413
 *         output.append(tag.person)
 *     if tag.polite != 0:
 *         output.append(tag.polite)             # <<<<<<<<<<<<<<
 *     if tag.polarity != 0:
 *         output.append(tag.polarity)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->polite); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":412
 *     if tag.person != 0:
 *         output.append(tag.person)
 *     if tag.polite != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.polite)
 *     if tag.polarity != 0:
 */
  }

  /* "spacy/morphology.pyx":414
 *     if tag.polite != 0:
 *         output.append(tag.polite)
 *     if tag.polarity != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.polarity)
 *     if tag.poss != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->polarity != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":415
 *         output.append(tag.polite)
 *     if tag.polarity != 0:
 *         output.append(tag.polarity)             # <<<<<<<<<<<<<<
 *     if tag.poss != 0:
 *         output.append(tag.poss)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->polarity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":414
 *     if tag.polite != 0:
 *         output.append(tag.polite)
 *     if tag.polarity != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.polarity)
 *     if tag.poss != 0:
 */
  }

  /* "spacy/morphology.pyx":416
 *     if tag.polarity != 0:
 *         output.append(tag.polarity)
 *     if tag.poss != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.poss)
 *     if tag.prefix != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->poss != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":417
 *         output.append(tag.polarity)
 *     if tag.poss != 0:
 *         output.append(tag.poss)             # <<<<<<<<<<<<<<
 *     if tag.prefix != 0:
 *         output.append(tag.prefix)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->poss); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":416
 *     if tag.polarity != 0:
 *         output.append(tag.polarity)
 *     if tag.poss != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.poss)
 *     if tag.prefix != 0:
 */
  }

  /* "spacy/morphology.pyx":418
 *     if tag.poss != 0:
 *         output.append(tag.poss)
 *     if tag.prefix != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.prefix)
 *     if tag.prep_case != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->prefix != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":419
 *         output.append(tag.poss)
 *     if tag.prefix != 0:
 *         output.append(tag.prefix)             # <<<<<<<<<<<<<<
 *     if tag.prep_case != 0:
 *         output.append(tag.prep_case)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->prefix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":418
 *     if tag.poss != 0:
 *         output.append(tag.poss)
 *     if tag.prefix != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.prefix)
 *     if tag.prep_case != 0:
 */
  }

  /* "spacy/morphology.pyx":420
 *     if tag.prefix != 0:
 *         output.append(tag.prefix)
 *     if tag.prep_case != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.prep_case)
 *     if tag.pron_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->prep_case != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":421
 *         output.append(tag.prefix)
 *     if tag.prep_case != 0:
 *         output.append(tag.prep_case)             # <<<<<<<<<<<<<<
 *     if tag.pron_type != 0:
 *         output.append(tag.pron_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->prep_case); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":420
 *     if tag.prefix != 0:
 *         output.append(tag.prefix)
 *     if tag.prep_case != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.prep_case)
 *     if tag.pron_type != 0:
 */
  }

  /* "spacy/morphology.pyx":422
 *     if tag.prep_case != 0:
 *         output.append(tag.prep_case)
 *     if tag.pron_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.pron_type)
 *     if tag.punct_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->pron_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":423
 *         output.append(tag.prep_case)
 *     if tag.pron_type != 0:
 *         output.append(tag.pron_type)             # <<<<<<<<<<<<<<
 *     if tag.punct_type != 0:
 *         output.append(tag.punct_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->pron_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":422
 *     if tag.prep_case != 0:
 *         output.append(tag.prep_case)
 *     if tag.pron_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.pron_type)
 *     if tag.punct_type != 0:
 */
  }

  /* "spacy/morphology.pyx":424
 *     if tag.pron_type != 0:
 *         output.append(tag.pron_type)
 *     if tag.punct_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.punct_type)
 *     if tag.reflex != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->punct_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":425
 *         output.append(tag.pron_type)
 *     if tag.punct_type != 0:
 *         output.append(tag.punct_type)             # <<<<<<<<<<<<<<
 *     if tag.reflex != 0:
 *         output.append(tag.reflex)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->punct_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":424
 *     if tag.pron_type != 0:
 *         output.append(tag.pron_type)
 *     if tag.punct_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.punct_type)
 *     if tag.reflex != 0:
 */
  }

  /* "spacy/morphology.pyx":426
 *     if tag.punct_type != 0:
 *         output.append(tag.punct_type)
 *     if tag.reflex != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.reflex)
 *     if tag.style != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->reflex != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":427
 *         output.append(tag.punct_type)
 *     if tag.reflex != 0:
 *         output.append(tag.reflex)             # <<<<<<<<<<<<<<
 *     if tag.style != 0:
 *         output.append(tag.style)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->reflex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":426
 *     if tag.punct_type != 0:
 *         output.append(tag.punct_type)
 *     if tag.reflex != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.reflex)
 *     if tag.style != 0:
 */
  }

  /* "spacy/morphology.pyx":428
 *     if tag.reflex != 0:
 *         output.append(tag.reflex)
 *     if tag.style != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.style)
 *     if tag.style_variant != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->style != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":429
 *         output.append(tag.reflex)
 *     if tag.style != 0:
 *         output.append(tag.style)             # <<<<<<<<<<<<<<
 *     if tag.style_variant != 0:
 *         output.append(tag.style_variant)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->style); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":428
 *     if tag.reflex != 0:
 *         output.append(tag.reflex)
 *     if tag.style != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.style)
 *     if tag.style_variant != 0:
 */
  }

  /* "spacy/morphology.pyx":430
 *     if tag.style != 0:
 *         output.append(tag.style)
 *     if tag.style_variant != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.style_variant)
 *     if tag.typo != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->style_variant != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":431
 *         output.append(tag.style)
 *     if tag.style_variant != 0:
 *         output.append(tag.style_variant)             # <<<<<<<<<<<<<<
 *     if tag.typo != 0:
 *         output.append(tag.typo)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->style_variant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":430
 *     if tag.style != 0:
 *         output.append(tag.style)
 *     if tag.style_variant != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.style_variant)
 *     if tag.typo != 0:
 */
  }

  /* "spacy/morphology.pyx":432
 *     if tag.style_variant != 0:
 *         output.append(tag.style_variant)
 *     if tag.typo != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.typo)
 *     if tag.verb_form != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->typo != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":433
 *         output.append(tag.style_variant)
 *     if tag.typo != 0:
 *         output.append(tag.typo)             # <<<<<<<<<<<<<<
 *     if tag.verb_form != 0:
 *         output.append(tag.verb_form)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->typo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":432
 *     if tag.style_variant != 0:
 *         output.append(tag.style_variant)
 *     if tag.typo != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.typo)
 *     if tag.verb_form != 0:
 */
  }

  /* "spacy/morphology.pyx":434
 *     if tag.typo != 0:
 *         output.append(tag.typo)
 *     if tag.verb_form != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.verb_form)
 *     if tag.voice != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->verb_form != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":435
 *         output.append(tag.typo)
 *     if tag.verb_form != 0:
 *         output.append(tag.verb_form)             # <<<<<<<<<<<<<<
 *     if tag.voice != 0:
 *         output.append(tag.voice)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->verb_form); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":434
 *     if tag.typo != 0:
 *         output.append(tag.typo)
 *     if tag.verb_form != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.verb_form)
 *     if tag.voice != 0:
 */
  }

  /* "spacy/morphology.pyx":436
 *     if tag.verb_form != 0:
 *         output.append(tag.verb_form)
 *     if tag.voice != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.voice)
 *     if tag.verb_type != 0:
 */
  __pyx_t_2 = ((__pyx_v_tag->voice != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":437
 *         output.append(tag.verb_form)
 *     if tag.voice != 0:
 *         output.append(tag.voice)             # <<<<<<<<<<<<<<
 *     if tag.verb_type != 0:
 *         output.append(tag.verb_type)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->voice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":436
 *     if tag.verb_form != 0:
 *         output.append(tag.verb_form)
 *     if tag.voice != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.voice)
 *     if tag.verb_type != 0:
 */
  }

  /* "spacy/morphology.pyx":438
 *     if tag.voice != 0:
 *         output.append(tag.voice)
 *     if tag.verb_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.verb_type)
 *     return output
 */
  __pyx_t_2 = ((__pyx_v_tag->verb_type != 0) != 0);
  if (__pyx_t_2) {

    /* "spacy/morphology.pyx":439
 *         output.append(tag.voice)
 *     if tag.verb_type != 0:
 *         output.append(tag.verb_type)             # <<<<<<<<<<<<<<
 *     return output
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_tag->verb_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/morphology.pyx":438
 *     if tag.voice != 0:
 *         output.append(tag.voice)
 *     if tag.verb_type != 0:             # <<<<<<<<<<<<<<
 *         output.append(tag.verb_type)
 *     return output
 */
  }

  /* "spacy/morphology.pyx":440
 *     if tag.verb_type != 0:
 *         output.append(tag.verb_type)
 *     return output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "spacy/morphology.pyx":362
 * 
 * 
 * cdef list list_features(const MorphAnalysisC* tag):             # <<<<<<<<<<<<<<
 *     output = []
 *     if tag.abbr != 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.morphology.list_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/morphology.pyx":443
 * 
 * 
 * cdef attr_t get_field(const MorphAnalysisC* tag, int field_id) nogil:             # <<<<<<<<<<<<<<
 *     field = <univ_field_t>field_id
 *     if field == Field_POS:
 */

static __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_10morphology_get_field(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *__pyx_v_tag, int __pyx_v_field_id) {
  enum __pyx_t_5spacy_10morphology_univ_field_t __pyx_v_field;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_RefNannySetupContext("get_field", 1);

  /* "spacy/morphology.pyx":444
 * 
 * cdef attr_t get_field(const MorphAnalysisC* tag, int field_id) nogil:
 *     field = <univ_field_t>field_id             # <<<<<<<<<<<<<<
 *     if field == Field_POS:
 *         return tag.pos
 */
  /*try:*/ {
    __pyx_v_field = ((enum __pyx_t_5spacy_10morphology_univ_field_t)__pyx_v_field_id);

    /* "spacy/morphology.pyx":445
 * cdef attr_t get_field(const MorphAnalysisC* tag, int field_id) nogil:
 *     field = <univ_field_t>field_id
 *     if field == Field_POS:             # <<<<<<<<<<<<<<
 *         return tag.pos
 *     if field == Field_Abbr:
 */
    __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_POS) != 0);
    if (__pyx_t_1) {

      /* "spacy/morphology.pyx":446
 *     field = <univ_field_t>field_id
 *     if field == Field_POS:
 *         return tag.pos             # <<<<<<<<<<<<<<
 *     if field == Field_Abbr:
 *         return tag.abbr
 */
      __pyx_r = __pyx_v_tag->pos;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":445
 * cdef attr_t get_field(const MorphAnalysisC* tag, int field_id) nogil:
 *     field = <univ_field_t>field_id
 *     if field == Field_POS:             # <<<<<<<<<<<<<<
 *         return tag.pos
 *     if field == Field_Abbr:
 */
    }

    /* "spacy/morphology.pyx":447
 *     if field == Field_POS:
 *         return tag.pos
 *     if field == Field_Abbr:             # <<<<<<<<<<<<<<
 *         return tag.abbr
 *     elif field == Field_AdpType:
 */
    switch (__pyx_v_field) {
      case __pyx_e_5spacy_10morphology_Field_Abbr:

      /* "spacy/morphology.pyx":448
 *         return tag.pos
 *     if field == Field_Abbr:
 *         return tag.abbr             # <<<<<<<<<<<<<<
 *     elif field == Field_AdpType:
 *         return tag.adp_type
 */
      __pyx_r = __pyx_v_tag->abbr;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":447
 *     if field == Field_POS:
 *         return tag.pos
 *     if field == Field_Abbr:             # <<<<<<<<<<<<<<
 *         return tag.abbr
 *     elif field == Field_AdpType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_AdpType:

      /* "spacy/morphology.pyx":450
 *         return tag.abbr
 *     elif field == Field_AdpType:
 *         return tag.adp_type             # <<<<<<<<<<<<<<
 *     elif field == Field_AdvType:
 *         return tag.adv_type
 */
      __pyx_r = __pyx_v_tag->adp_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":449
 *     if field == Field_Abbr:
 *         return tag.abbr
 *     elif field == Field_AdpType:             # <<<<<<<<<<<<<<
 *         return tag.adp_type
 *     elif field == Field_AdvType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_AdvType:

      /* "spacy/morphology.pyx":452
 *         return tag.adp_type
 *     elif field == Field_AdvType:
 *         return tag.adv_type             # <<<<<<<<<<<<<<
 *     elif field == Field_Animacy:
 *         return tag.animacy
 */
      __pyx_r = __pyx_v_tag->adv_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":451
 *     elif field == Field_AdpType:
 *         return tag.adp_type
 *     elif field == Field_AdvType:             # <<<<<<<<<<<<<<
 *         return tag.adv_type
 *     elif field == Field_Animacy:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Animacy:

      /* "spacy/morphology.pyx":454
 *         return tag.adv_type
 *     elif field == Field_Animacy:
 *         return tag.animacy             # <<<<<<<<<<<<<<
 *     elif field == Field_Aspect:
 *         return tag.aspect
 */
      __pyx_r = __pyx_v_tag->animacy;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":453
 *     elif field == Field_AdvType:
 *         return tag.adv_type
 *     elif field == Field_Animacy:             # <<<<<<<<<<<<<<
 *         return tag.animacy
 *     elif field == Field_Aspect:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Aspect:

      /* "spacy/morphology.pyx":456
 *         return tag.animacy
 *     elif field == Field_Aspect:
 *         return tag.aspect             # <<<<<<<<<<<<<<
 *     elif field == Field_Case:
 *         return tag.case
 */
      __pyx_r = __pyx_v_tag->aspect;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":455
 *     elif field == Field_Animacy:
 *         return tag.animacy
 *     elif field == Field_Aspect:             # <<<<<<<<<<<<<<
 *         return tag.aspect
 *     elif field == Field_Case:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Case:

      /* "spacy/morphology.pyx":458
 *         return tag.aspect
 *     elif field == Field_Case:
 *         return tag.case             # <<<<<<<<<<<<<<
 *     elif field == Field_ConjType:
 *         return tag.conj_type
 */
      __pyx_r = __pyx_v_tag->__pyx_case;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":457
 *     elif field == Field_Aspect:
 *         return tag.aspect
 *     elif field == Field_Case:             # <<<<<<<<<<<<<<
 *         return tag.case
 *     elif field == Field_ConjType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_ConjType:

      /* "spacy/morphology.pyx":460
 *         return tag.case
 *     elif field == Field_ConjType:
 *         return tag.conj_type             # <<<<<<<<<<<<<<
 *     elif field == Field_Connegative:
 *         return tag.connegative
 */
      __pyx_r = __pyx_v_tag->conj_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":459
 *     elif field == Field_Case:
 *         return tag.case
 *     elif field == Field_ConjType:             # <<<<<<<<<<<<<<
 *         return tag.conj_type
 *     elif field == Field_Connegative:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Connegative:

      /* "spacy/morphology.pyx":462
 *         return tag.conj_type
 *     elif field == Field_Connegative:
 *         return tag.connegative             # <<<<<<<<<<<<<<
 *     elif field == Field_Definite:
 *         return tag.definite
 */
      __pyx_r = __pyx_v_tag->connegative;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":461
 *     elif field == Field_ConjType:
 *         return tag.conj_type
 *     elif field == Field_Connegative:             # <<<<<<<<<<<<<<
 *         return tag.connegative
 *     elif field == Field_Definite:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Definite:

      /* "spacy/morphology.pyx":464
 *         return tag.connegative
 *     elif field == Field_Definite:
 *         return tag.definite             # <<<<<<<<<<<<<<
 *     elif field == Field_Degree:
 *         return tag.degree
 */
      __pyx_r = __pyx_v_tag->definite;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":463
 *     elif field == Field_Connegative:
 *         return tag.connegative
 *     elif field == Field_Definite:             # <<<<<<<<<<<<<<
 *         return tag.definite
 *     elif field == Field_Degree:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Degree:

      /* "spacy/morphology.pyx":466
 *         return tag.definite
 *     elif field == Field_Degree:
 *         return tag.degree             # <<<<<<<<<<<<<<
 *     elif field == Field_Derivation:
 *         return tag.derivation
 */
      __pyx_r = __pyx_v_tag->degree;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":465
 *     elif field == Field_Definite:
 *         return tag.definite
 *     elif field == Field_Degree:             # <<<<<<<<<<<<<<
 *         return tag.degree
 *     elif field == Field_Derivation:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Derivation:

      /* "spacy/morphology.pyx":468
 *         return tag.degree
 *     elif field == Field_Derivation:
 *         return tag.derivation             # <<<<<<<<<<<<<<
 *     elif field == Field_Echo:
 *         return tag.echo
 */
      __pyx_r = __pyx_v_tag->derivation;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":467
 *     elif field == Field_Degree:
 *         return tag.degree
 *     elif field == Field_Derivation:             # <<<<<<<<<<<<<<
 *         return tag.derivation
 *     elif field == Field_Echo:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Echo:

      /* "spacy/morphology.pyx":470
 *         return tag.derivation
 *     elif field == Field_Echo:
 *         return tag.echo             # <<<<<<<<<<<<<<
 *     elif field == Field_Foreign:
 *         return tag.foreign
 */
      __pyx_r = __pyx_v_tag->echo;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":469
 *     elif field == Field_Derivation:
 *         return tag.derivation
 *     elif field == Field_Echo:             # <<<<<<<<<<<<<<
 *         return tag.echo
 *     elif field == Field_Foreign:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Foreign:

      /* "spacy/morphology.pyx":472
 *         return tag.echo
 *     elif field == Field_Foreign:
 *         return tag.foreign             # <<<<<<<<<<<<<<
 *     elif field == Field_Gender:
 *         return tag.gender
 */
      __pyx_r = __pyx_v_tag->foreign;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":471
 *     elif field == Field_Echo:
 *         return tag.echo
 *     elif field == Field_Foreign:             # <<<<<<<<<<<<<<
 *         return tag.foreign
 *     elif field == Field_Gender:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Gender:

      /* "spacy/morphology.pyx":474
 *         return tag.foreign
 *     elif field == Field_Gender:
 *         return tag.gender             # <<<<<<<<<<<<<<
 *     elif field == Field_Hyph:
 *         return tag.hyph
 */
      __pyx_r = __pyx_v_tag->gender;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":473
 *     elif field == Field_Foreign:
 *         return tag.foreign
 *     elif field == Field_Gender:             # <<<<<<<<<<<<<<
 *         return tag.gender
 *     elif field == Field_Hyph:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Hyph:

      /* "spacy/morphology.pyx":476
 *         return tag.gender
 *     elif field == Field_Hyph:
 *         return tag.hyph             # <<<<<<<<<<<<<<
 *     elif field == Field_InfForm:
 *         return tag.inf_form
 */
      __pyx_r = __pyx_v_tag->hyph;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":475
 *     elif field == Field_Gender:
 *         return tag.gender
 *     elif field == Field_Hyph:             # <<<<<<<<<<<<<<
 *         return tag.hyph
 *     elif field == Field_InfForm:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_InfForm:

      /* "spacy/morphology.pyx":478
 *         return tag.hyph
 *     elif field == Field_InfForm:
 *         return tag.inf_form             # <<<<<<<<<<<<<<
 *     elif field == Field_Mood:
 *         return tag.mood
 */
      __pyx_r = __pyx_v_tag->inf_form;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":477
 *     elif field == Field_Hyph:
 *         return tag.hyph
 *     elif field == Field_InfForm:             # <<<<<<<<<<<<<<
 *         return tag.inf_form
 *     elif field == Field_Mood:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Mood:

      /* "spacy/morphology.pyx":480
 *         return tag.inf_form
 *     elif field == Field_Mood:
 *         return tag.mood             # <<<<<<<<<<<<<<
 *     elif field == Field_Negative:
 *         return tag.negative
 */
      __pyx_r = __pyx_v_tag->mood;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":479
 *     elif field == Field_InfForm:
 *         return tag.inf_form
 *     elif field == Field_Mood:             # <<<<<<<<<<<<<<
 *         return tag.mood
 *     elif field == Field_Negative:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Negative:

      /* "spacy/morphology.pyx":482
 *         return tag.mood
 *     elif field == Field_Negative:
 *         return tag.negative             # <<<<<<<<<<<<<<
 *     elif field == Field_Number:
 *         return tag.number
 */
      __pyx_r = __pyx_v_tag->negative;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":481
 *     elif field == Field_Mood:
 *         return tag.mood
 *     elif field == Field_Negative:             # <<<<<<<<<<<<<<
 *         return tag.negative
 *     elif field == Field_Number:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Number:

      /* "spacy/morphology.pyx":484
 *         return tag.negative
 *     elif field == Field_Number:
 *         return tag.number             # <<<<<<<<<<<<<<
 *     elif field == Field_NameType:
 *         return tag.name_type
 */
      __pyx_r = __pyx_v_tag->number;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":483
 *     elif field == Field_Negative:
 *         return tag.negative
 *     elif field == Field_Number:             # <<<<<<<<<<<<<<
 *         return tag.number
 *     elif field == Field_NameType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_NameType:

      /* "spacy/morphology.pyx":486
 *         return tag.number
 *     elif field == Field_NameType:
 *         return tag.name_type             # <<<<<<<<<<<<<<
 *     elif field == Field_NounType:
 *         return tag.noun_type
 */
      __pyx_r = __pyx_v_tag->name_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":485
 *     elif field == Field_Number:
 *         return tag.number
 *     elif field == Field_NameType:             # <<<<<<<<<<<<<<
 *         return tag.name_type
 *     elif field == Field_NounType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_NounType:

      /* "spacy/morphology.pyx":488
 *         return tag.name_type
 *     elif field == Field_NounType:
 *         return tag.noun_type             # <<<<<<<<<<<<<<
 *     elif field == Field_NumForm:
 *         return tag.num_form
 */
      __pyx_r = __pyx_v_tag->noun_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":487
 *     elif field == Field_NameType:
 *         return tag.name_type
 *     elif field == Field_NounType:             # <<<<<<<<<<<<<<
 *         return tag.noun_type
 *     elif field == Field_NumForm:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_NumForm:

      /* "spacy/morphology.pyx":490
 *         return tag.noun_type
 *     elif field == Field_NumForm:
 *         return tag.num_form             # <<<<<<<<<<<<<<
 *     elif field == Field_NumType:
 *         return tag.num_type
 */
      __pyx_r = __pyx_v_tag->num_form;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":489
 *     elif field == Field_NounType:
 *         return tag.noun_type
 *     elif field == Field_NumForm:             # <<<<<<<<<<<<<<
 *         return tag.num_form
 *     elif field == Field_NumType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_NumType:

      /* "spacy/morphology.pyx":492
 *         return tag.num_form
 *     elif field == Field_NumType:
 *         return tag.num_type             # <<<<<<<<<<<<<<
 *     elif field == Field_NumValue:
 *         return tag.num_value
 */
      __pyx_r = __pyx_v_tag->num_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":491
 *     elif field == Field_NumForm:
 *         return tag.num_form
 *     elif field == Field_NumType:             # <<<<<<<<<<<<<<
 *         return tag.num_type
 *     elif field == Field_NumValue:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_NumValue:

      /* "spacy/morphology.pyx":494
 *         return tag.num_type
 *     elif field == Field_NumValue:
 *         return tag.num_value             # <<<<<<<<<<<<<<
 *     elif field == Field_PartForm:
 *         return tag.part_form
 */
      __pyx_r = __pyx_v_tag->num_value;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":493
 *     elif field == Field_NumType:
 *         return tag.num_type
 *     elif field == Field_NumValue:             # <<<<<<<<<<<<<<
 *         return tag.num_value
 *     elif field == Field_PartForm:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_PartForm:

      /* "spacy/morphology.pyx":496
 *         return tag.num_value
 *     elif field == Field_PartForm:
 *         return tag.part_form             # <<<<<<<<<<<<<<
 *     elif field == Field_PartType:
 *         return tag.part_type
 */
      __pyx_r = __pyx_v_tag->part_form;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":495
 *     elif field == Field_NumValue:
 *         return tag.num_value
 *     elif field == Field_PartForm:             # <<<<<<<<<<<<<<
 *         return tag.part_form
 *     elif field == Field_PartType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_PartType:

      /* "spacy/morphology.pyx":498
 *         return tag.part_form
 *     elif field == Field_PartType:
 *         return tag.part_type             # <<<<<<<<<<<<<<
 *     elif field == Field_Person:
 *         return tag.person
 */
      __pyx_r = __pyx_v_tag->part_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":497
 *     elif field == Field_PartForm:
 *         return tag.part_form
 *     elif field == Field_PartType:             # <<<<<<<<<<<<<<
 *         return tag.part_type
 *     elif field == Field_Person:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Person:

      /* "spacy/morphology.pyx":500
 *         return tag.part_type
 *     elif field == Field_Person:
 *         return tag.person             # <<<<<<<<<<<<<<
 *     elif field == Field_Polite:
 *         return tag.polite
 */
      __pyx_r = __pyx_v_tag->person;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":499
 *     elif field == Field_PartType:
 *         return tag.part_type
 *     elif field == Field_Person:             # <<<<<<<<<<<<<<
 *         return tag.person
 *     elif field == Field_Polite:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Polite:

      /* "spacy/morphology.pyx":502
 *         return tag.person
 *     elif field == Field_Polite:
 *         return tag.polite             # <<<<<<<<<<<<<<
 *     elif field == Field_Polarity:
 *         return tag.polarity
 */
      __pyx_r = __pyx_v_tag->polite;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":501
 *     elif field == Field_Person:
 *         return tag.person
 *     elif field == Field_Polite:             # <<<<<<<<<<<<<<
 *         return tag.polite
 *     elif field == Field_Polarity:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Polarity:

      /* "spacy/morphology.pyx":504
 *         return tag.polite
 *     elif field == Field_Polarity:
 *         return tag.polarity             # <<<<<<<<<<<<<<
 *     elif field == Field_Poss:
 *         return tag.poss
 */
      __pyx_r = __pyx_v_tag->polarity;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":503
 *     elif field == Field_Polite:
 *         return tag.polite
 *     elif field == Field_Polarity:             # <<<<<<<<<<<<<<
 *         return tag.polarity
 *     elif field == Field_Poss:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Poss:

      /* "spacy/morphology.pyx":506
 *         return tag.polarity
 *     elif field == Field_Poss:
 *         return tag.poss             # <<<<<<<<<<<<<<
 *     elif field == Field_Prefix:
 *         return tag.prefix
 */
      __pyx_r = __pyx_v_tag->poss;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":505
 *     elif field == Field_Polarity:
 *         return tag.polarity
 *     elif field == Field_Poss:             # <<<<<<<<<<<<<<
 *         return tag.poss
 *     elif field == Field_Prefix:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Prefix:

      /* "spacy/morphology.pyx":508
 *         return tag.poss
 *     elif field == Field_Prefix:
 *         return tag.prefix             # <<<<<<<<<<<<<<
 *     elif field == Field_PrepCase:
 *         return tag.prep_case
 */
      __pyx_r = __pyx_v_tag->prefix;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":507
 *     elif field == Field_Poss:
 *         return tag.poss
 *     elif field == Field_Prefix:             # <<<<<<<<<<<<<<
 *         return tag.prefix
 *     elif field == Field_PrepCase:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_PrepCase:

      /* "spacy/morphology.pyx":510
 *         return tag.prefix
 *     elif field == Field_PrepCase:
 *         return tag.prep_case             # <<<<<<<<<<<<<<
 *     elif field == Field_PronType:
 *         return tag.pron_type
 */
      __pyx_r = __pyx_v_tag->prep_case;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":509
 *     elif field == Field_Prefix:
 *         return tag.prefix
 *     elif field == Field_PrepCase:             # <<<<<<<<<<<<<<
 *         return tag.prep_case
 *     elif field == Field_PronType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_PronType:

      /* "spacy/morphology.pyx":512
 *         return tag.prep_case
 *     elif field == Field_PronType:
 *         return tag.pron_type             # <<<<<<<<<<<<<<
 *     elif field == Field_PunctSide:
 *         return tag.punct_side
 */
      __pyx_r = __pyx_v_tag->pron_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":511
 *     elif field == Field_PrepCase:
 *         return tag.prep_case
 *     elif field == Field_PronType:             # <<<<<<<<<<<<<<
 *         return tag.pron_type
 *     elif field == Field_PunctSide:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_PunctSide:

      /* "spacy/morphology.pyx":514
 *         return tag.pron_type
 *     elif field == Field_PunctSide:
 *         return tag.punct_side             # <<<<<<<<<<<<<<
 *     elif field == Field_PunctType:
 *         return tag.punct_type
 */
      __pyx_r = __pyx_v_tag->punct_side;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":513
 *     elif field == Field_PronType:
 *         return tag.pron_type
 *     elif field == Field_PunctSide:             # <<<<<<<<<<<<<<
 *         return tag.punct_side
 *     elif field == Field_PunctType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_PunctType:

      /* "spacy/morphology.pyx":516
 *         return tag.punct_side
 *     elif field == Field_PunctType:
 *         return tag.punct_type             # <<<<<<<<<<<<<<
 *     elif field == Field_Reflex:
 *         return tag.reflex
 */
      __pyx_r = __pyx_v_tag->punct_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":515
 *     elif field == Field_PunctSide:
 *         return tag.punct_side
 *     elif field == Field_PunctType:             # <<<<<<<<<<<<<<
 *         return tag.punct_type
 *     elif field == Field_Reflex:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Reflex:

      /* "spacy/morphology.pyx":518
 *         return tag.punct_type
 *     elif field == Field_Reflex:
 *         return tag.reflex             # <<<<<<<<<<<<<<
 *     elif field == Field_Style:
 *         return tag.style
 */
      __pyx_r = __pyx_v_tag->reflex;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":517
 *     elif field == Field_PunctType:
 *         return tag.punct_type
 *     elif field == Field_Reflex:             # <<<<<<<<<<<<<<
 *         return tag.reflex
 *     elif field == Field_Style:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Style:

      /* "spacy/morphology.pyx":520
 *         return tag.reflex
 *     elif field == Field_Style:
 *         return tag.style             # <<<<<<<<<<<<<<
 *     elif field == Field_StyleVariant:
 *         return tag.style_variant
 */
      __pyx_r = __pyx_v_tag->style;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":519
 *     elif field == Field_Reflex:
 *         return tag.reflex
 *     elif field == Field_Style:             # <<<<<<<<<<<<<<
 *         return tag.style
 *     elif field == Field_StyleVariant:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_StyleVariant:

      /* "spacy/morphology.pyx":522
 *         return tag.style
 *     elif field == Field_StyleVariant:
 *         return tag.style_variant             # <<<<<<<<<<<<<<
 *     elif field == Field_Tense:
 *         return tag.tense
 */
      __pyx_r = __pyx_v_tag->style_variant;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":521
 *     elif field == Field_Style:
 *         return tag.style
 *     elif field == Field_StyleVariant:             # <<<<<<<<<<<<<<
 *         return tag.style_variant
 *     elif field == Field_Tense:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Tense:

      /* "spacy/morphology.pyx":524
 *         return tag.style_variant
 *     elif field == Field_Tense:
 *         return tag.tense             # <<<<<<<<<<<<<<
 *     elif field == Field_Typo:
 *         return tag.typo
 */
      __pyx_r = __pyx_v_tag->tense;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":523
 *     elif field == Field_StyleVariant:
 *         return tag.style_variant
 *     elif field == Field_Tense:             # <<<<<<<<<<<<<<
 *         return tag.tense
 *     elif field == Field_Typo:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Typo:

      /* "spacy/morphology.pyx":526
 *         return tag.tense
 *     elif field == Field_Typo:
 *         return tag.typo             # <<<<<<<<<<<<<<
 *     elif field == Field_VerbForm:
 *         return tag.verb_form
 */
      __pyx_r = __pyx_v_tag->typo;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":525
 *     elif field == Field_Tense:
 *         return tag.tense
 *     elif field == Field_Typo:             # <<<<<<<<<<<<<<
 *         return tag.typo
 *     elif field == Field_VerbForm:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_VerbForm:

      /* "spacy/morphology.pyx":528
 *         return tag.typo
 *     elif field == Field_VerbForm:
 *         return tag.verb_form             # <<<<<<<<<<<<<<
 *     elif field == Field_Voice:
 *         return tag.voice
 */
      __pyx_r = __pyx_v_tag->verb_form;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":527
 *     elif field == Field_Typo:
 *         return tag.typo
 *     elif field == Field_VerbForm:             # <<<<<<<<<<<<<<
 *         return tag.verb_form
 *     elif field == Field_Voice:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_Voice:

      /* "spacy/morphology.pyx":530
 *         return tag.verb_form
 *     elif field == Field_Voice:
 *         return tag.voice             # <<<<<<<<<<<<<<
 *     elif field == Field_VerbType:
 *         return tag.verb_type
 */
      __pyx_r = __pyx_v_tag->voice;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":529
 *     elif field == Field_VerbForm:
 *         return tag.verb_form
 *     elif field == Field_Voice:             # <<<<<<<<<<<<<<
 *         return tag.voice
 *     elif field == Field_VerbType:
 */
      break;
      case __pyx_e_5spacy_10morphology_Field_VerbType:

      /* "spacy/morphology.pyx":532
 *         return tag.voice
 *     elif field == Field_VerbType:
 *         return tag.verb_type             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(Errors.E168.format(field=field_id))
 */
      __pyx_r = __pyx_v_tag->verb_type;
      goto __pyx_L3_return;

      /* "spacy/morphology.pyx":531
 *     elif field == Field_Voice:
 *         return tag.voice
 *     elif field == Field_VerbType:             # <<<<<<<<<<<<<<
 *         return tag.verb_type
 *     else:
 */
      break;
      default:

      /* "spacy/morphology.pyx":534
 *         return tag.verb_type
 *     else:
 *         raise ValueError(Errors.E168.format(field=field_id))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          /*try:*/ {
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Errors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_E168); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_field_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_field, __pyx_t_4) < 0) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_Raise(__pyx_t_3, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __PYX_ERR(0, 534, __pyx_L8_error)
          }
          /*finally:*/ {
            __pyx_L8_error: {
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L4_error;
            }
          }
      }
      break;
    }
  }

  /* "spacy/morphology.pyx":444
 * 
 * cdef attr_t get_field(const MorphAnalysisC* tag, int field_id) nogil:
 *     field = <univ_field_t>field_id             # <<<<<<<<<<<<<<
 *     if field == Field_POS:
 *         return tag.pos
 */
  /*finally:*/ {
    __pyx_L3_return: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L0;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
  }

  /* "spacy/morphology.pyx":443
 * 
 * 
 * cdef attr_t get_field(const MorphAnalysisC* tag, int field_id) nogil:             # <<<<<<<<<<<<<<
 *     field = <univ_field_t>field_id
 *     if field == Field_POS:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("spacy.morphology.get_field", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "spacy/morphology.pyx":537
 * 
 * 
 * cdef int check_feature(const MorphAnalysisC* tag, attr_t feature) nogil:             # <<<<<<<<<<<<<<
 *     if tag.abbr == feature:
 *         return 1
 */

static int __pyx_f_5spacy_10morphology_check_feature(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *__pyx_v_tag, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_feature) {
  int __pyx_r;
  int __pyx_t_1;

  /* "spacy/morphology.pyx":538
 * 
 * cdef int check_feature(const MorphAnalysisC* tag, attr_t feature) nogil:
 *     if tag.abbr == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.adp_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->abbr == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":539
 * cdef int check_feature(const MorphAnalysisC* tag, attr_t feature) nogil:
 *     if tag.abbr == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.adp_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":538
 * 
 * cdef int check_feature(const MorphAnalysisC* tag, attr_t feature) nogil:
 *     if tag.abbr == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.adp_type == feature:
 */
  }

  /* "spacy/morphology.pyx":540
 *     if tag.abbr == feature:
 *         return 1
 *     elif tag.adp_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.adv_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->adp_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":541
 *         return 1
 *     elif tag.adp_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.adv_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":540
 *     if tag.abbr == feature:
 *         return 1
 *     elif tag.adp_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.adv_type == feature:
 */
  }

  /* "spacy/morphology.pyx":542
 *     elif tag.adp_type == feature:
 *         return 1
 *     elif tag.adv_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.animacy == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->adv_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":543
 *         return 1
 *     elif tag.adv_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.animacy == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":542
 *     elif tag.adp_type == feature:
 *         return 1
 *     elif tag.adv_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.animacy == feature:
 */
  }

  /* "spacy/morphology.pyx":544
 *     elif tag.adv_type == feature:
 *         return 1
 *     elif tag.animacy == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.aspect == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->animacy == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":545
 *         return 1
 *     elif tag.animacy == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.aspect == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":544
 *     elif tag.adv_type == feature:
 *         return 1
 *     elif tag.animacy == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.aspect == feature:
 */
  }

  /* "spacy/morphology.pyx":546
 *     elif tag.animacy == feature:
 *         return 1
 *     elif tag.aspect == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.case == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->aspect == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":547
 *         return 1
 *     elif tag.aspect == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.case == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":546
 *     elif tag.animacy == feature:
 *         return 1
 *     elif tag.aspect == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.case == feature:
 */
  }

  /* "spacy/morphology.pyx":548
 *     elif tag.aspect == feature:
 *         return 1
 *     elif tag.case == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.conj_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->__pyx_case == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":549
 *         return 1
 *     elif tag.case == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.conj_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":548
 *     elif tag.aspect == feature:
 *         return 1
 *     elif tag.case == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.conj_type == feature:
 */
  }

  /* "spacy/morphology.pyx":550
 *     elif tag.case == feature:
 *         return 1
 *     elif tag.conj_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.connegative == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->conj_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":551
 *         return 1
 *     elif tag.conj_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.connegative == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":550
 *     elif tag.case == feature:
 *         return 1
 *     elif tag.conj_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.connegative == feature:
 */
  }

  /* "spacy/morphology.pyx":552
 *     elif tag.conj_type == feature:
 *         return 1
 *     elif tag.connegative == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.definite == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->connegative == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":553
 *         return 1
 *     elif tag.connegative == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.definite == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":552
 *     elif tag.conj_type == feature:
 *         return 1
 *     elif tag.connegative == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.definite == feature:
 */
  }

  /* "spacy/morphology.pyx":554
 *     elif tag.connegative == feature:
 *         return 1
 *     elif tag.definite == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.degree == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->definite == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":555
 *         return 1
 *     elif tag.definite == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.degree == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":554
 *     elif tag.connegative == feature:
 *         return 1
 *     elif tag.definite == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.degree == feature:
 */
  }

  /* "spacy/morphology.pyx":556
 *     elif tag.definite == feature:
 *         return 1
 *     elif tag.degree == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.derivation == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->degree == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":557
 *         return 1
 *     elif tag.degree == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.derivation == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":556
 *     elif tag.definite == feature:
 *         return 1
 *     elif tag.degree == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.derivation == feature:
 */
  }

  /* "spacy/morphology.pyx":558
 *     elif tag.degree == feature:
 *         return 1
 *     elif tag.derivation == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.echo == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->derivation == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":559
 *         return 1
 *     elif tag.derivation == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.echo == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":558
 *     elif tag.degree == feature:
 *         return 1
 *     elif tag.derivation == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.echo == feature:
 */
  }

  /* "spacy/morphology.pyx":560
 *     elif tag.derivation == feature:
 *         return 1
 *     elif tag.echo == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.foreign == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->echo == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":561
 *         return 1
 *     elif tag.echo == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.foreign == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":560
 *     elif tag.derivation == feature:
 *         return 1
 *     elif tag.echo == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.foreign == feature:
 */
  }

  /* "spacy/morphology.pyx":562
 *     elif tag.echo == feature:
 *         return 1
 *     elif tag.foreign == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.gender == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->foreign == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":563
 *         return 1
 *     elif tag.foreign == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.gender == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":562
 *     elif tag.echo == feature:
 *         return 1
 *     elif tag.foreign == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.gender == feature:
 */
  }

  /* "spacy/morphology.pyx":564
 *     elif tag.foreign == feature:
 *         return 1
 *     elif tag.gender == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.hyph == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->gender == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":565
 *         return 1
 *     elif tag.gender == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.hyph == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":564
 *     elif tag.foreign == feature:
 *         return 1
 *     elif tag.gender == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.hyph == feature:
 */
  }

  /* "spacy/morphology.pyx":566
 *     elif tag.gender == feature:
 *         return 1
 *     elif tag.hyph == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.inf_form == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->hyph == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":567
 *         return 1
 *     elif tag.hyph == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.inf_form == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":566
 *     elif tag.gender == feature:
 *         return 1
 *     elif tag.hyph == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.inf_form == feature:
 */
  }

  /* "spacy/morphology.pyx":568
 *     elif tag.hyph == feature:
 *         return 1
 *     elif tag.inf_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.mood == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->inf_form == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":569
 *         return 1
 *     elif tag.inf_form == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.mood == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":568
 *     elif tag.hyph == feature:
 *         return 1
 *     elif tag.inf_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.mood == feature:
 */
  }

  /* "spacy/morphology.pyx":570
 *     elif tag.inf_form == feature:
 *         return 1
 *     elif tag.mood == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.negative == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->mood == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":571
 *         return 1
 *     elif tag.mood == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.negative == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":570
 *     elif tag.inf_form == feature:
 *         return 1
 *     elif tag.mood == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.negative == feature:
 */
  }

  /* "spacy/morphology.pyx":572
 *     elif tag.mood == feature:
 *         return 1
 *     elif tag.negative == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.number == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->negative == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":573
 *         return 1
 *     elif tag.negative == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.number == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":572
 *     elif tag.mood == feature:
 *         return 1
 *     elif tag.negative == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.number == feature:
 */
  }

  /* "spacy/morphology.pyx":574
 *     elif tag.negative == feature:
 *         return 1
 *     elif tag.number == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.name_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->number == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":575
 *         return 1
 *     elif tag.number == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.name_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":574
 *     elif tag.negative == feature:
 *         return 1
 *     elif tag.number == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.name_type == feature:
 */
  }

  /* "spacy/morphology.pyx":576
 *     elif tag.number == feature:
 *         return 1
 *     elif tag.name_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.noun_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->name_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":577
 *         return 1
 *     elif tag.name_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.noun_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":576
 *     elif tag.number == feature:
 *         return 1
 *     elif tag.name_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.noun_type == feature:
 */
  }

  /* "spacy/morphology.pyx":578
 *     elif tag.name_type == feature:
 *         return 1
 *     elif tag.noun_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.num_form == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->noun_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":579
 *         return 1
 *     elif tag.noun_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.num_form == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":578
 *     elif tag.name_type == feature:
 *         return 1
 *     elif tag.noun_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.num_form == feature:
 */
  }

  /* "spacy/morphology.pyx":580
 *     elif tag.noun_type == feature:
 *         return 1
 *     elif tag.num_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.num_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->num_form == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":581
 *         return 1
 *     elif tag.num_form == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.num_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":580
 *     elif tag.noun_type == feature:
 *         return 1
 *     elif tag.num_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.num_type == feature:
 */
  }

  /* "spacy/morphology.pyx":582
 *     elif tag.num_form == feature:
 *         return 1
 *     elif tag.num_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.num_value == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->num_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":583
 *         return 1
 *     elif tag.num_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.num_value == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":582
 *     elif tag.num_form == feature:
 *         return 1
 *     elif tag.num_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.num_value == feature:
 */
  }

  /* "spacy/morphology.pyx":584
 *     elif tag.num_type == feature:
 *         return 1
 *     elif tag.num_value == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.part_form == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->num_value == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":585
 *         return 1
 *     elif tag.num_value == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.part_form == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":584
 *     elif tag.num_type == feature:
 *         return 1
 *     elif tag.num_value == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.part_form == feature:
 */
  }

  /* "spacy/morphology.pyx":586
 *     elif tag.num_value == feature:
 *         return 1
 *     elif tag.part_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.part_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->part_form == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":587
 *         return 1
 *     elif tag.part_form == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.part_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":586
 *     elif tag.num_value == feature:
 *         return 1
 *     elif tag.part_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.part_type == feature:
 */
  }

  /* "spacy/morphology.pyx":588
 *     elif tag.part_form == feature:
 *         return 1
 *     elif tag.part_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.person == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->part_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":589
 *         return 1
 *     elif tag.part_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.person == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":588
 *     elif tag.part_form == feature:
 *         return 1
 *     elif tag.part_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.person == feature:
 */
  }

  /* "spacy/morphology.pyx":590
 *     elif tag.part_type == feature:
 *         return 1
 *     elif tag.person == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.polite == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->person == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":591
 *         return 1
 *     elif tag.person == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.polite == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":590
 *     elif tag.part_type == feature:
 *         return 1
 *     elif tag.person == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.polite == feature:
 */
  }

  /* "spacy/morphology.pyx":592
 *     elif tag.person == feature:
 *         return 1
 *     elif tag.polite == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.polarity == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->polite == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":593
 *         return 1
 *     elif tag.polite == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.polarity == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":592
 *     elif tag.person == feature:
 *         return 1
 *     elif tag.polite == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.polarity == feature:
 */
  }

  /* "spacy/morphology.pyx":594
 *     elif tag.polite == feature:
 *         return 1
 *     elif tag.polarity == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.poss == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->polarity == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":595
 *         return 1
 *     elif tag.polarity == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.poss == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":594
 *     elif tag.polite == feature:
 *         return 1
 *     elif tag.polarity == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.poss == feature:
 */
  }

  /* "spacy/morphology.pyx":596
 *     elif tag.polarity == feature:
 *         return 1
 *     elif tag.poss == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.prefix == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->poss == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":597
 *         return 1
 *     elif tag.poss == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.prefix == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":596
 *     elif tag.polarity == feature:
 *         return 1
 *     elif tag.poss == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.prefix == feature:
 */
  }

  /* "spacy/morphology.pyx":598
 *     elif tag.poss == feature:
 *         return 1
 *     elif tag.prefix == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.prep_case == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->prefix == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":599
 *         return 1
 *     elif tag.prefix == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.prep_case == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":598
 *     elif tag.poss == feature:
 *         return 1
 *     elif tag.prefix == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.prep_case == feature:
 */
  }

  /* "spacy/morphology.pyx":600
 *     elif tag.prefix == feature:
 *         return 1
 *     elif tag.prep_case == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.pron_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->prep_case == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":601
 *         return 1
 *     elif tag.prep_case == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.pron_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":600
 *     elif tag.prefix == feature:
 *         return 1
 *     elif tag.prep_case == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.pron_type == feature:
 */
  }

  /* "spacy/morphology.pyx":602
 *     elif tag.prep_case == feature:
 *         return 1
 *     elif tag.pron_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.punct_side == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->pron_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":603
 *         return 1
 *     elif tag.pron_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.punct_side == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":602
 *     elif tag.prep_case == feature:
 *         return 1
 *     elif tag.pron_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.punct_side == feature:
 */
  }

  /* "spacy/morphology.pyx":604
 *     elif tag.pron_type == feature:
 *         return 1
 *     elif tag.punct_side == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.punct_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->punct_side == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":605
 *         return 1
 *     elif tag.punct_side == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.punct_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":604
 *     elif tag.pron_type == feature:
 *         return 1
 *     elif tag.punct_side == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.punct_type == feature:
 */
  }

  /* "spacy/morphology.pyx":606
 *     elif tag.punct_side == feature:
 *         return 1
 *     elif tag.punct_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.reflex == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->punct_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":607
 *         return 1
 *     elif tag.punct_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.reflex == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":606
 *     elif tag.punct_side == feature:
 *         return 1
 *     elif tag.punct_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.reflex == feature:
 */
  }

  /* "spacy/morphology.pyx":608
 *     elif tag.punct_type == feature:
 *         return 1
 *     elif tag.reflex == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.style == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->reflex == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":609
 *         return 1
 *     elif tag.reflex == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.style == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":608
 *     elif tag.punct_type == feature:
 *         return 1
 *     elif tag.reflex == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.style == feature:
 */
  }

  /* "spacy/morphology.pyx":610
 *     elif tag.reflex == feature:
 *         return 1
 *     elif tag.style == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.style_variant == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->style == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":611
 *         return 1
 *     elif tag.style == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.style_variant == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":610
 *     elif tag.reflex == feature:
 *         return 1
 *     elif tag.style == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.style_variant == feature:
 */
  }

  /* "spacy/morphology.pyx":612
 *     elif tag.style == feature:
 *         return 1
 *     elif tag.style_variant == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.tense == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->style_variant == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":613
 *         return 1
 *     elif tag.style_variant == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.tense == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":612
 *     elif tag.style == feature:
 *         return 1
 *     elif tag.style_variant == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.tense == feature:
 */
  }

  /* "spacy/morphology.pyx":614
 *     elif tag.style_variant == feature:
 *         return 1
 *     elif tag.tense == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.typo == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->tense == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":615
 *         return 1
 *     elif tag.tense == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.typo == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":614
 *     elif tag.style_variant == feature:
 *         return 1
 *     elif tag.tense == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.typo == feature:
 */
  }

  /* "spacy/morphology.pyx":616
 *     elif tag.tense == feature:
 *         return 1
 *     elif tag.typo == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.verb_form == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->typo == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":617
 *         return 1
 *     elif tag.typo == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.verb_form == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":616
 *     elif tag.tense == feature:
 *         return 1
 *     elif tag.typo == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.verb_form == feature:
 */
  }

  /* "spacy/morphology.pyx":618
 *     elif tag.typo == feature:
 *         return 1
 *     elif tag.verb_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.voice == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->verb_form == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":619
 *         return 1
 *     elif tag.verb_form == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.voice == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":618
 *     elif tag.typo == feature:
 *         return 1
 *     elif tag.verb_form == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.voice == feature:
 */
  }

  /* "spacy/morphology.pyx":620
 *     elif tag.verb_form == feature:
 *         return 1
 *     elif tag.voice == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.verb_type == feature:
 */
  __pyx_t_1 = ((__pyx_v_tag->voice == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":621
 *         return 1
 *     elif tag.voice == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     elif tag.verb_type == feature:
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":620
 *     elif tag.verb_form == feature:
 *         return 1
 *     elif tag.voice == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     elif tag.verb_type == feature:
 */
  }

  /* "spacy/morphology.pyx":622
 *     elif tag.voice == feature:
 *         return 1
 *     elif tag.verb_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_tag->verb_type == __pyx_v_feature) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":623
 *         return 1
 *     elif tag.verb_type == feature:
 *         return 1             # <<<<<<<<<<<<<<
 *     else:
 *         return 0
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy/morphology.pyx":622
 *     elif tag.voice == feature:
 *         return 1
 *     elif tag.verb_type == feature:             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
  }

  /* "spacy/morphology.pyx":625
 *         return 1
 *     else:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int set_feature(MorphAnalysisC* tag,
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "spacy/morphology.pyx":537
 * 
 * 
 * cdef int check_feature(const MorphAnalysisC* tag, attr_t feature) nogil:             # <<<<<<<<<<<<<<
 *     if tag.abbr == feature:
 *         return 1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/morphology.pyx":627
 *         return 0
 * 
 * cdef int set_feature(MorphAnalysisC* tag,             # <<<<<<<<<<<<<<
 *         univ_field_t field, attr_t feature, int value) except -1:
 *     if value == True:
 */

static int __pyx_f_5spacy_10morphology_set_feature(struct __pyx_t_5spacy_7structs_MorphAnalysisC *__pyx_v_tag, enum __pyx_t_5spacy_10morphology_univ_field_t __pyx_v_field, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_feature, int __pyx_v_value) {
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_value_;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_prev_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("set_feature", 0);

  /* "spacy/morphology.pyx":629
 * cdef int set_feature(MorphAnalysisC* tag,
 *         univ_field_t field, attr_t feature, int value) except -1:
 *     if value == True:             # <<<<<<<<<<<<<<
 *         value_ = feature
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_value == 1) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":630
 *         univ_field_t field, attr_t feature, int value) except -1:
 *     if value == True:
 *         value_ = feature             # <<<<<<<<<<<<<<
 *     else:
 *         value_ = 0
 */
    __pyx_v_value_ = __pyx_v_feature;

    /* "spacy/morphology.pyx":629
 * cdef int set_feature(MorphAnalysisC* tag,
 *         univ_field_t field, attr_t feature, int value) except -1:
 *     if value == True:             # <<<<<<<<<<<<<<
 *         value_ = feature
 *     else:
 */
    goto __pyx_L3;
  }

  /* "spacy/morphology.pyx":632
 *         value_ = feature
 *     else:
 *         value_ = 0             # <<<<<<<<<<<<<<
 *     prev_value = get_field(tag, field)
 *     if prev_value != 0 and value_ == 0 and field != Field_POS:
 */
  /*else*/ {
    __pyx_v_value_ = 0;
  }
  __pyx_L3:;

  /* "spacy/morphology.pyx":633
 *     else:
 *         value_ = 0
 *     prev_value = get_field(tag, field)             # <<<<<<<<<<<<<<
 *     if prev_value != 0 and value_ == 0 and field != Field_POS:
 *         tag.length -= 1
 */
  __pyx_v_prev_value = __pyx_f_5spacy_10morphology_get_field(__pyx_v_tag, __pyx_v_field);

  /* "spacy/morphology.pyx":634
 *         value_ = 0
 *     prev_value = get_field(tag, field)
 *     if prev_value != 0 and value_ == 0 and field != Field_POS:             # <<<<<<<<<<<<<<
 *         tag.length -= 1
 *     elif prev_value == 0 and value_ != 0 and field != Field_POS:
 */
  __pyx_t_2 = ((__pyx_v_prev_value != 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_value_ == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_field != __pyx_e_5spacy_10morphology_Field_POS) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":635
 *     prev_value = get_field(tag, field)
 *     if prev_value != 0 and value_ == 0 and field != Field_POS:
 *         tag.length -= 1             # <<<<<<<<<<<<<<
 *     elif prev_value == 0 and value_ != 0 and field != Field_POS:
 *         tag.length += 1
 */
    __pyx_v_tag->length = (__pyx_v_tag->length - 1);

    /* "spacy/morphology.pyx":634
 *         value_ = 0
 *     prev_value = get_field(tag, field)
 *     if prev_value != 0 and value_ == 0 and field != Field_POS:             # <<<<<<<<<<<<<<
 *         tag.length -= 1
 *     elif prev_value == 0 and value_ != 0 and field != Field_POS:
 */
    goto __pyx_L4;
  }

  /* "spacy/morphology.pyx":636
 *     if prev_value != 0 and value_ == 0 and field != Field_POS:
 *         tag.length -= 1
 *     elif prev_value == 0 and value_ != 0 and field != Field_POS:             # <<<<<<<<<<<<<<
 *         tag.length += 1
 *     if feature == 0:
 */
  __pyx_t_2 = ((__pyx_v_prev_value == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_value_ != 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_field != __pyx_e_5spacy_10morphology_Field_POS) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":637
 *         tag.length -= 1
 *     elif prev_value == 0 and value_ != 0 and field != Field_POS:
 *         tag.length += 1             # <<<<<<<<<<<<<<
 *     if feature == 0:
 *         pass
 */
    __pyx_v_tag->length = (__pyx_v_tag->length + 1);

    /* "spacy/morphology.pyx":636
 *     if prev_value != 0 and value_ == 0 and field != Field_POS:
 *         tag.length -= 1
 *     elif prev_value == 0 and value_ != 0 and field != Field_POS:             # <<<<<<<<<<<<<<
 *         tag.length += 1
 *     if feature == 0:
 */
  }
  __pyx_L4:;

  /* "spacy/morphology.pyx":638
 *     elif prev_value == 0 and value_ != 0 and field != Field_POS:
 *         tag.length += 1
 *     if feature == 0:             # <<<<<<<<<<<<<<
 *         pass
 *     elif field == Field_POS:
 */
  __pyx_t_1 = ((__pyx_v_feature == 0) != 0);
  if (__pyx_t_1) {
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":640
 *     if feature == 0:
 *         pass
 *     elif field == Field_POS:             # <<<<<<<<<<<<<<
 *         tag.pos = get_string_id(FEATURE_NAMES[value_].split('_')[1])
 *     elif field == Field_Abbr:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_POS) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":641
 *         pass
 *     elif field == Field_POS:
 *         tag.pos = get_string_id(FEATURE_NAMES[value_].split('_')[1])             # <<<<<<<<<<<<<<
 *     elif field == Field_Abbr:
 *         tag.abbr = value_
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_string_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_FEATURE_NAMES); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_value_, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_n_u__2) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_n_u__2);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)__Pyx_PyInt_As_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_tag->pos = __pyx_t_8;

    /* "spacy/morphology.pyx":640
 *     if feature == 0:
 *         pass
 *     elif field == Field_POS:             # <<<<<<<<<<<<<<
 *         tag.pos = get_string_id(FEATURE_NAMES[value_].split('_')[1])
 *     elif field == Field_Abbr:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":642
 *     elif field == Field_POS:
 *         tag.pos = get_string_id(FEATURE_NAMES[value_].split('_')[1])
 *     elif field == Field_Abbr:             # <<<<<<<<<<<<<<
 *         tag.abbr = value_
 *     elif field == Field_AdpType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Abbr) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":643
 *         tag.pos = get_string_id(FEATURE_NAMES[value_].split('_')[1])
 *     elif field == Field_Abbr:
 *         tag.abbr = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_AdpType:
 *         tag.adp_type = value_
 */
    __pyx_v_tag->abbr = __pyx_v_value_;

    /* "spacy/morphology.pyx":642
 *     elif field == Field_POS:
 *         tag.pos = get_string_id(FEATURE_NAMES[value_].split('_')[1])
 *     elif field == Field_Abbr:             # <<<<<<<<<<<<<<
 *         tag.abbr = value_
 *     elif field == Field_AdpType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":644
 *     elif field == Field_Abbr:
 *         tag.abbr = value_
 *     elif field == Field_AdpType:             # <<<<<<<<<<<<<<
 *         tag.adp_type = value_
 *     elif field == Field_AdvType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_AdpType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":645
 *         tag.abbr = value_
 *     elif field == Field_AdpType:
 *         tag.adp_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_AdvType:
 *         tag.adv_type = value_
 */
    __pyx_v_tag->adp_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":644
 *     elif field == Field_Abbr:
 *         tag.abbr = value_
 *     elif field == Field_AdpType:             # <<<<<<<<<<<<<<
 *         tag.adp_type = value_
 *     elif field == Field_AdvType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":646
 *     elif field == Field_AdpType:
 *         tag.adp_type = value_
 *     elif field == Field_AdvType:             # <<<<<<<<<<<<<<
 *         tag.adv_type = value_
 *     elif field == Field_Animacy:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_AdvType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":647
 *         tag.adp_type = value_
 *     elif field == Field_AdvType:
 *         tag.adv_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Animacy:
 *         tag.animacy = value_
 */
    __pyx_v_tag->adv_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":646
 *     elif field == Field_AdpType:
 *         tag.adp_type = value_
 *     elif field == Field_AdvType:             # <<<<<<<<<<<<<<
 *         tag.adv_type = value_
 *     elif field == Field_Animacy:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":648
 *     elif field == Field_AdvType:
 *         tag.adv_type = value_
 *     elif field == Field_Animacy:             # <<<<<<<<<<<<<<
 *         tag.animacy = value_
 *     elif field == Field_Aspect:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Animacy) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":649
 *         tag.adv_type = value_
 *     elif field == Field_Animacy:
 *         tag.animacy = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Aspect:
 *         tag.aspect = value_
 */
    __pyx_v_tag->animacy = __pyx_v_value_;

    /* "spacy/morphology.pyx":648
 *     elif field == Field_AdvType:
 *         tag.adv_type = value_
 *     elif field == Field_Animacy:             # <<<<<<<<<<<<<<
 *         tag.animacy = value_
 *     elif field == Field_Aspect:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":650
 *     elif field == Field_Animacy:
 *         tag.animacy = value_
 *     elif field == Field_Aspect:             # <<<<<<<<<<<<<<
 *         tag.aspect = value_
 *     elif field == Field_Case:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Aspect) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":651
 *         tag.animacy = value_
 *     elif field == Field_Aspect:
 *         tag.aspect = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Case:
 *         tag.case = value_
 */
    __pyx_v_tag->aspect = __pyx_v_value_;

    /* "spacy/morphology.pyx":650
 *     elif field == Field_Animacy:
 *         tag.animacy = value_
 *     elif field == Field_Aspect:             # <<<<<<<<<<<<<<
 *         tag.aspect = value_
 *     elif field == Field_Case:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":652
 *     elif field == Field_Aspect:
 *         tag.aspect = value_
 *     elif field == Field_Case:             # <<<<<<<<<<<<<<
 *         tag.case = value_
 *     elif field == Field_ConjType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Case) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":653
 *         tag.aspect = value_
 *     elif field == Field_Case:
 *         tag.case = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_ConjType:
 *         tag.conj_type = value_
 */
    __pyx_v_tag->__pyx_case = __pyx_v_value_;

    /* "spacy/morphology.pyx":652
 *     elif field == Field_Aspect:
 *         tag.aspect = value_
 *     elif field == Field_Case:             # <<<<<<<<<<<<<<
 *         tag.case = value_
 *     elif field == Field_ConjType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":654
 *     elif field == Field_Case:
 *         tag.case = value_
 *     elif field == Field_ConjType:             # <<<<<<<<<<<<<<
 *         tag.conj_type = value_
 *     elif field == Field_Connegative:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_ConjType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":655
 *         tag.case = value_
 *     elif field == Field_ConjType:
 *         tag.conj_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Connegative:
 *         tag.connegative = value_
 */
    __pyx_v_tag->conj_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":654
 *     elif field == Field_Case:
 *         tag.case = value_
 *     elif field == Field_ConjType:             # <<<<<<<<<<<<<<
 *         tag.conj_type = value_
 *     elif field == Field_Connegative:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":656
 *     elif field == Field_ConjType:
 *         tag.conj_type = value_
 *     elif field == Field_Connegative:             # <<<<<<<<<<<<<<
 *         tag.connegative = value_
 *     elif field == Field_Definite:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Connegative) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":657
 *         tag.conj_type = value_
 *     elif field == Field_Connegative:
 *         tag.connegative = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Definite:
 *         tag.definite = value_
 */
    __pyx_v_tag->connegative = __pyx_v_value_;

    /* "spacy/morphology.pyx":656
 *     elif field == Field_ConjType:
 *         tag.conj_type = value_
 *     elif field == Field_Connegative:             # <<<<<<<<<<<<<<
 *         tag.connegative = value_
 *     elif field == Field_Definite:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":658
 *     elif field == Field_Connegative:
 *         tag.connegative = value_
 *     elif field == Field_Definite:             # <<<<<<<<<<<<<<
 *         tag.definite = value_
 *     elif field == Field_Degree:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Definite) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":659
 *         tag.connegative = value_
 *     elif field == Field_Definite:
 *         tag.definite = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Degree:
 *         tag.degree = value_
 */
    __pyx_v_tag->definite = __pyx_v_value_;

    /* "spacy/morphology.pyx":658
 *     elif field == Field_Connegative:
 *         tag.connegative = value_
 *     elif field == Field_Definite:             # <<<<<<<<<<<<<<
 *         tag.definite = value_
 *     elif field == Field_Degree:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":660
 *     elif field == Field_Definite:
 *         tag.definite = value_
 *     elif field == Field_Degree:             # <<<<<<<<<<<<<<
 *         tag.degree = value_
 *     elif field == Field_Derivation:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Degree) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":661
 *         tag.definite = value_
 *     elif field == Field_Degree:
 *         tag.degree = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Derivation:
 *         tag.derivation = value_
 */
    __pyx_v_tag->degree = __pyx_v_value_;

    /* "spacy/morphology.pyx":660
 *     elif field == Field_Definite:
 *         tag.definite = value_
 *     elif field == Field_Degree:             # <<<<<<<<<<<<<<
 *         tag.degree = value_
 *     elif field == Field_Derivation:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":662
 *     elif field == Field_Degree:
 *         tag.degree = value_
 *     elif field == Field_Derivation:             # <<<<<<<<<<<<<<
 *         tag.derivation = value_
 *     elif field == Field_Echo:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Derivation) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":663
 *         tag.degree = value_
 *     elif field == Field_Derivation:
 *         tag.derivation = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Echo:
 *         tag.echo = value_
 */
    __pyx_v_tag->derivation = __pyx_v_value_;

    /* "spacy/morphology.pyx":662
 *     elif field == Field_Degree:
 *         tag.degree = value_
 *     elif field == Field_Derivation:             # <<<<<<<<<<<<<<
 *         tag.derivation = value_
 *     elif field == Field_Echo:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":664
 *     elif field == Field_Derivation:
 *         tag.derivation = value_
 *     elif field == Field_Echo:             # <<<<<<<<<<<<<<
 *         tag.echo = value_
 *     elif field == Field_Foreign:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Echo) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":665
 *         tag.derivation = value_
 *     elif field == Field_Echo:
 *         tag.echo = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Foreign:
 *         tag.foreign = value_
 */
    __pyx_v_tag->echo = __pyx_v_value_;

    /* "spacy/morphology.pyx":664
 *     elif field == Field_Derivation:
 *         tag.derivation = value_
 *     elif field == Field_Echo:             # <<<<<<<<<<<<<<
 *         tag.echo = value_
 *     elif field == Field_Foreign:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":666
 *     elif field == Field_Echo:
 *         tag.echo = value_
 *     elif field == Field_Foreign:             # <<<<<<<<<<<<<<
 *         tag.foreign = value_
 *     elif field == Field_Gender:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Foreign) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":667
 *         tag.echo = value_
 *     elif field == Field_Foreign:
 *         tag.foreign = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Gender:
 *         tag.gender = value_
 */
    __pyx_v_tag->foreign = __pyx_v_value_;

    /* "spacy/morphology.pyx":666
 *     elif field == Field_Echo:
 *         tag.echo = value_
 *     elif field == Field_Foreign:             # <<<<<<<<<<<<<<
 *         tag.foreign = value_
 *     elif field == Field_Gender:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":668
 *     elif field == Field_Foreign:
 *         tag.foreign = value_
 *     elif field == Field_Gender:             # <<<<<<<<<<<<<<
 *         tag.gender = value_
 *     elif field == Field_Hyph:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Gender) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":669
 *         tag.foreign = value_
 *     elif field == Field_Gender:
 *         tag.gender = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Hyph:
 *         tag.hyph = value_
 */
    __pyx_v_tag->gender = __pyx_v_value_;

    /* "spacy/morphology.pyx":668
 *     elif field == Field_Foreign:
 *         tag.foreign = value_
 *     elif field == Field_Gender:             # <<<<<<<<<<<<<<
 *         tag.gender = value_
 *     elif field == Field_Hyph:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":670
 *     elif field == Field_Gender:
 *         tag.gender = value_
 *     elif field == Field_Hyph:             # <<<<<<<<<<<<<<
 *         tag.hyph = value_
 *     elif field == Field_InfForm:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Hyph) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":671
 *         tag.gender = value_
 *     elif field == Field_Hyph:
 *         tag.hyph = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_InfForm:
 *         tag.inf_form = value_
 */
    __pyx_v_tag->hyph = __pyx_v_value_;

    /* "spacy/morphology.pyx":670
 *     elif field == Field_Gender:
 *         tag.gender = value_
 *     elif field == Field_Hyph:             # <<<<<<<<<<<<<<
 *         tag.hyph = value_
 *     elif field == Field_InfForm:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":672
 *     elif field == Field_Hyph:
 *         tag.hyph = value_
 *     elif field == Field_InfForm:             # <<<<<<<<<<<<<<
 *         tag.inf_form = value_
 *     elif field == Field_Mood:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_InfForm) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":673
 *         tag.hyph = value_
 *     elif field == Field_InfForm:
 *         tag.inf_form = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Mood:
 *         tag.mood = value_
 */
    __pyx_v_tag->inf_form = __pyx_v_value_;

    /* "spacy/morphology.pyx":672
 *     elif field == Field_Hyph:
 *         tag.hyph = value_
 *     elif field == Field_InfForm:             # <<<<<<<<<<<<<<
 *         tag.inf_form = value_
 *     elif field == Field_Mood:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":674
 *     elif field == Field_InfForm:
 *         tag.inf_form = value_
 *     elif field == Field_Mood:             # <<<<<<<<<<<<<<
 *         tag.mood = value_
 *     elif field == Field_Negative:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Mood) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":675
 *         tag.inf_form = value_
 *     elif field == Field_Mood:
 *         tag.mood = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Negative:
 *         tag.negative = value_
 */
    __pyx_v_tag->mood = __pyx_v_value_;

    /* "spacy/morphology.pyx":674
 *     elif field == Field_InfForm:
 *         tag.inf_form = value_
 *     elif field == Field_Mood:             # <<<<<<<<<<<<<<
 *         tag.mood = value_
 *     elif field == Field_Negative:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":676
 *     elif field == Field_Mood:
 *         tag.mood = value_
 *     elif field == Field_Negative:             # <<<<<<<<<<<<<<
 *         tag.negative = value_
 *     elif field == Field_Number:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Negative) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":677
 *         tag.mood = value_
 *     elif field == Field_Negative:
 *         tag.negative = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Number:
 *         tag.number = value_
 */
    __pyx_v_tag->negative = __pyx_v_value_;

    /* "spacy/morphology.pyx":676
 *     elif field == Field_Mood:
 *         tag.mood = value_
 *     elif field == Field_Negative:             # <<<<<<<<<<<<<<
 *         tag.negative = value_
 *     elif field == Field_Number:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":678
 *     elif field == Field_Negative:
 *         tag.negative = value_
 *     elif field == Field_Number:             # <<<<<<<<<<<<<<
 *         tag.number = value_
 *     elif field == Field_NameType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Number) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":679
 *         tag.negative = value_
 *     elif field == Field_Number:
 *         tag.number = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_NameType:
 *         tag.name_type = value_
 */
    __pyx_v_tag->number = __pyx_v_value_;

    /* "spacy/morphology.pyx":678
 *     elif field == Field_Negative:
 *         tag.negative = value_
 *     elif field == Field_Number:             # <<<<<<<<<<<<<<
 *         tag.number = value_
 *     elif field == Field_NameType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":680
 *     elif field == Field_Number:
 *         tag.number = value_
 *     elif field == Field_NameType:             # <<<<<<<<<<<<<<
 *         tag.name_type = value_
 *     elif field == Field_NounType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_NameType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":681
 *         tag.number = value_
 *     elif field == Field_NameType:
 *         tag.name_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_NounType:
 *         tag.noun_type = value_
 */
    __pyx_v_tag->name_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":680
 *     elif field == Field_Number:
 *         tag.number = value_
 *     elif field == Field_NameType:             # <<<<<<<<<<<<<<
 *         tag.name_type = value_
 *     elif field == Field_NounType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":682
 *     elif field == Field_NameType:
 *         tag.name_type = value_
 *     elif field == Field_NounType:             # <<<<<<<<<<<<<<
 *         tag.noun_type = value_
 *     elif field == Field_NumForm:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_NounType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":683
 *         tag.name_type = value_
 *     elif field == Field_NounType:
 *         tag.noun_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_NumForm:
 *         tag.num_form = value_
 */
    __pyx_v_tag->noun_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":682
 *     elif field == Field_NameType:
 *         tag.name_type = value_
 *     elif field == Field_NounType:             # <<<<<<<<<<<<<<
 *         tag.noun_type = value_
 *     elif field == Field_NumForm:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":684
 *     elif field == Field_NounType:
 *         tag.noun_type = value_
 *     elif field == Field_NumForm:             # <<<<<<<<<<<<<<
 *         tag.num_form = value_
 *     elif field == Field_NumType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_NumForm) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":685
 *         tag.noun_type = value_
 *     elif field == Field_NumForm:
 *         tag.num_form = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_NumType:
 *         tag.num_type = value_
 */
    __pyx_v_tag->num_form = __pyx_v_value_;

    /* "spacy/morphology.pyx":684
 *     elif field == Field_NounType:
 *         tag.noun_type = value_
 *     elif field == Field_NumForm:             # <<<<<<<<<<<<<<
 *         tag.num_form = value_
 *     elif field == Field_NumType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":686
 *     elif field == Field_NumForm:
 *         tag.num_form = value_
 *     elif field == Field_NumType:             # <<<<<<<<<<<<<<
 *         tag.num_type = value_
 *     elif field == Field_NumValue:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_NumType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":687
 *         tag.num_form = value_
 *     elif field == Field_NumType:
 *         tag.num_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_NumValue:
 *         tag.num_value = value_
 */
    __pyx_v_tag->num_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":686
 *     elif field == Field_NumForm:
 *         tag.num_form = value_
 *     elif field == Field_NumType:             # <<<<<<<<<<<<<<
 *         tag.num_type = value_
 *     elif field == Field_NumValue:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":688
 *     elif field == Field_NumType:
 *         tag.num_type = value_
 *     elif field == Field_NumValue:             # <<<<<<<<<<<<<<
 *         tag.num_value = value_
 *     elif field == Field_PartForm:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_NumValue) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":689
 *         tag.num_type = value_
 *     elif field == Field_NumValue:
 *         tag.num_value = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_PartForm:
 *         tag.part_form = value_
 */
    __pyx_v_tag->num_value = __pyx_v_value_;

    /* "spacy/morphology.pyx":688
 *     elif field == Field_NumType:
 *         tag.num_type = value_
 *     elif field == Field_NumValue:             # <<<<<<<<<<<<<<
 *         tag.num_value = value_
 *     elif field == Field_PartForm:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":690
 *     elif field == Field_NumValue:
 *         tag.num_value = value_
 *     elif field == Field_PartForm:             # <<<<<<<<<<<<<<
 *         tag.part_form = value_
 *     elif field == Field_PartType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_PartForm) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":691
 *         tag.num_value = value_
 *     elif field == Field_PartForm:
 *         tag.part_form = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_PartType:
 *         tag.part_type = value_
 */
    __pyx_v_tag->part_form = __pyx_v_value_;

    /* "spacy/morphology.pyx":690
 *     elif field == Field_NumValue:
 *         tag.num_value = value_
 *     elif field == Field_PartForm:             # <<<<<<<<<<<<<<
 *         tag.part_form = value_
 *     elif field == Field_PartType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":692
 *     elif field == Field_PartForm:
 *         tag.part_form = value_
 *     elif field == Field_PartType:             # <<<<<<<<<<<<<<
 *         tag.part_type = value_
 *     elif field == Field_Person:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_PartType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":693
 *         tag.part_form = value_
 *     elif field == Field_PartType:
 *         tag.part_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Person:
 *         tag.person = value_
 */
    __pyx_v_tag->part_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":692
 *     elif field == Field_PartForm:
 *         tag.part_form = value_
 *     elif field == Field_PartType:             # <<<<<<<<<<<<<<
 *         tag.part_type = value_
 *     elif field == Field_Person:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":694
 *     elif field == Field_PartType:
 *         tag.part_type = value_
 *     elif field == Field_Person:             # <<<<<<<<<<<<<<
 *         tag.person = value_
 *     elif field == Field_Polite:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Person) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":695
 *         tag.part_type = value_
 *     elif field == Field_Person:
 *         tag.person = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Polite:
 *         tag.polite = value_
 */
    __pyx_v_tag->person = __pyx_v_value_;

    /* "spacy/morphology.pyx":694
 *     elif field == Field_PartType:
 *         tag.part_type = value_
 *     elif field == Field_Person:             # <<<<<<<<<<<<<<
 *         tag.person = value_
 *     elif field == Field_Polite:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":696
 *     elif field == Field_Person:
 *         tag.person = value_
 *     elif field == Field_Polite:             # <<<<<<<<<<<<<<
 *         tag.polite = value_
 *     elif field == Field_Polarity:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Polite) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":697
 *         tag.person = value_
 *     elif field == Field_Polite:
 *         tag.polite = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Polarity:
 *         tag.polarity = value_
 */
    __pyx_v_tag->polite = __pyx_v_value_;

    /* "spacy/morphology.pyx":696
 *     elif field == Field_Person:
 *         tag.person = value_
 *     elif field == Field_Polite:             # <<<<<<<<<<<<<<
 *         tag.polite = value_
 *     elif field == Field_Polarity:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":698
 *     elif field == Field_Polite:
 *         tag.polite = value_
 *     elif field == Field_Polarity:             # <<<<<<<<<<<<<<
 *         tag.polarity = value_
 *     elif field == Field_Poss:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Polarity) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":699
 *         tag.polite = value_
 *     elif field == Field_Polarity:
 *         tag.polarity = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Poss:
 *         tag.poss = value_
 */
    __pyx_v_tag->polarity = __pyx_v_value_;

    /* "spacy/morphology.pyx":698
 *     elif field == Field_Polite:
 *         tag.polite = value_
 *     elif field == Field_Polarity:             # <<<<<<<<<<<<<<
 *         tag.polarity = value_
 *     elif field == Field_Poss:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":700
 *     elif field == Field_Polarity:
 *         tag.polarity = value_
 *     elif field == Field_Poss:             # <<<<<<<<<<<<<<
 *         tag.poss = value_
 *     elif field == Field_Prefix:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Poss) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":701
 *         tag.polarity = value_
 *     elif field == Field_Poss:
 *         tag.poss = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Prefix:
 *         tag.prefix = value_
 */
    __pyx_v_tag->poss = __pyx_v_value_;

    /* "spacy/morphology.pyx":700
 *     elif field == Field_Polarity:
 *         tag.polarity = value_
 *     elif field == Field_Poss:             # <<<<<<<<<<<<<<
 *         tag.poss = value_
 *     elif field == Field_Prefix:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":702
 *     elif field == Field_Poss:
 *         tag.poss = value_
 *     elif field == Field_Prefix:             # <<<<<<<<<<<<<<
 *         tag.prefix = value_
 *     elif field == Field_PrepCase:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Prefix) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":703
 *         tag.poss = value_
 *     elif field == Field_Prefix:
 *         tag.prefix = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_PrepCase:
 *         tag.prep_case = value_
 */
    __pyx_v_tag->prefix = __pyx_v_value_;

    /* "spacy/morphology.pyx":702
 *     elif field == Field_Poss:
 *         tag.poss = value_
 *     elif field == Field_Prefix:             # <<<<<<<<<<<<<<
 *         tag.prefix = value_
 *     elif field == Field_PrepCase:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":704
 *     elif field == Field_Prefix:
 *         tag.prefix = value_
 *     elif field == Field_PrepCase:             # <<<<<<<<<<<<<<
 *         tag.prep_case = value_
 *     elif field == Field_PronType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_PrepCase) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":705
 *         tag.prefix = value_
 *     elif field == Field_PrepCase:
 *         tag.prep_case = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_PronType:
 *         tag.pron_type = value_
 */
    __pyx_v_tag->prep_case = __pyx_v_value_;

    /* "spacy/morphology.pyx":704
 *     elif field == Field_Prefix:
 *         tag.prefix = value_
 *     elif field == Field_PrepCase:             # <<<<<<<<<<<<<<
 *         tag.prep_case = value_
 *     elif field == Field_PronType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":706
 *     elif field == Field_PrepCase:
 *         tag.prep_case = value_
 *     elif field == Field_PronType:             # <<<<<<<<<<<<<<
 *         tag.pron_type = value_
 *     elif field == Field_PunctSide:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_PronType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":707
 *         tag.prep_case = value_
 *     elif field == Field_PronType:
 *         tag.pron_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_PunctSide:
 *         tag.punct_side = value_
 */
    __pyx_v_tag->pron_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":706
 *     elif field == Field_PrepCase:
 *         tag.prep_case = value_
 *     elif field == Field_PronType:             # <<<<<<<<<<<<<<
 *         tag.pron_type = value_
 *     elif field == Field_PunctSide:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":708
 *     elif field == Field_PronType:
 *         tag.pron_type = value_
 *     elif field == Field_PunctSide:             # <<<<<<<<<<<<<<
 *         tag.punct_side = value_
 *     elif field == Field_PunctType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_PunctSide) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":709
 *         tag.pron_type = value_
 *     elif field == Field_PunctSide:
 *         tag.punct_side = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_PunctType:
 *         tag.punct_type = value_
 */
    __pyx_v_tag->punct_side = __pyx_v_value_;

    /* "spacy/morphology.pyx":708
 *     elif field == Field_PronType:
 *         tag.pron_type = value_
 *     elif field == Field_PunctSide:             # <<<<<<<<<<<<<<
 *         tag.punct_side = value_
 *     elif field == Field_PunctType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":710
 *     elif field == Field_PunctSide:
 *         tag.punct_side = value_
 *     elif field == Field_PunctType:             # <<<<<<<<<<<<<<
 *         tag.punct_type = value_
 *     elif field == Field_Reflex:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_PunctType) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":711
 *         tag.punct_side = value_
 *     elif field == Field_PunctType:
 *         tag.punct_type = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Reflex:
 *         tag.reflex = value_
 */
    __pyx_v_tag->punct_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":710
 *     elif field == Field_PunctSide:
 *         tag.punct_side = value_
 *     elif field == Field_PunctType:             # <<<<<<<<<<<<<<
 *         tag.punct_type = value_
 *     elif field == Field_Reflex:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":712
 *     elif field == Field_PunctType:
 *         tag.punct_type = value_
 *     elif field == Field_Reflex:             # <<<<<<<<<<<<<<
 *         tag.reflex = value_
 *     elif field == Field_Style:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Reflex) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":713
 *         tag.punct_type = value_
 *     elif field == Field_Reflex:
 *         tag.reflex = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Style:
 *         tag.style = value_
 */
    __pyx_v_tag->reflex = __pyx_v_value_;

    /* "spacy/morphology.pyx":712
 *     elif field == Field_PunctType:
 *         tag.punct_type = value_
 *     elif field == Field_Reflex:             # <<<<<<<<<<<<<<
 *         tag.reflex = value_
 *     elif field == Field_Style:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":714
 *     elif field == Field_Reflex:
 *         tag.reflex = value_
 *     elif field == Field_Style:             # <<<<<<<<<<<<<<
 *         tag.style = value_
 *     elif field == Field_StyleVariant:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Style) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":715
 *         tag.reflex = value_
 *     elif field == Field_Style:
 *         tag.style = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_StyleVariant:
 *         tag.style_variant = value_
 */
    __pyx_v_tag->style = __pyx_v_value_;

    /* "spacy/morphology.pyx":714
 *     elif field == Field_Reflex:
 *         tag.reflex = value_
 *     elif field == Field_Style:             # <<<<<<<<<<<<<<
 *         tag.style = value_
 *     elif field == Field_StyleVariant:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":716
 *     elif field == Field_Style:
 *         tag.style = value_
 *     elif field == Field_StyleVariant:             # <<<<<<<<<<<<<<
 *         tag.style_variant = value_
 *     elif field == Field_Tense:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_StyleVariant) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":717
 *         tag.style = value_
 *     elif field == Field_StyleVariant:
 *         tag.style_variant = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Tense:
 *         tag.tense = value_
 */
    __pyx_v_tag->style_variant = __pyx_v_value_;

    /* "spacy/morphology.pyx":716
 *     elif field == Field_Style:
 *         tag.style = value_
 *     elif field == Field_StyleVariant:             # <<<<<<<<<<<<<<
 *         tag.style_variant = value_
 *     elif field == Field_Tense:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":718
 *     elif field == Field_StyleVariant:
 *         tag.style_variant = value_
 *     elif field == Field_Tense:             # <<<<<<<<<<<<<<
 *         tag.tense = value_
 *     elif field == Field_Typo:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Tense) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":719
 *         tag.style_variant = value_
 *     elif field == Field_Tense:
 *         tag.tense = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Typo:
 *         tag.typo = value_
 */
    __pyx_v_tag->tense = __pyx_v_value_;

    /* "spacy/morphology.pyx":718
 *     elif field == Field_StyleVariant:
 *         tag.style_variant = value_
 *     elif field == Field_Tense:             # <<<<<<<<<<<<<<
 *         tag.tense = value_
 *     elif field == Field_Typo:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":720
 *     elif field == Field_Tense:
 *         tag.tense = value_
 *     elif field == Field_Typo:             # <<<<<<<<<<<<<<
 *         tag.typo = value_
 *     elif field == Field_VerbForm:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Typo) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":721
 *         tag.tense = value_
 *     elif field == Field_Typo:
 *         tag.typo = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_VerbForm:
 *         tag.verb_form = value_
 */
    __pyx_v_tag->typo = __pyx_v_value_;

    /* "spacy/morphology.pyx":720
 *     elif field == Field_Tense:
 *         tag.tense = value_
 *     elif field == Field_Typo:             # <<<<<<<<<<<<<<
 *         tag.typo = value_
 *     elif field == Field_VerbForm:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":722
 *     elif field == Field_Typo:
 *         tag.typo = value_
 *     elif field == Field_VerbForm:             # <<<<<<<<<<<<<<
 *         tag.verb_form = value_
 *     elif field == Field_Voice:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_VerbForm) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":723
 *         tag.typo = value_
 *     elif field == Field_VerbForm:
 *         tag.verb_form = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_Voice:
 *         tag.voice = value_
 */
    __pyx_v_tag->verb_form = __pyx_v_value_;

    /* "spacy/morphology.pyx":722
 *     elif field == Field_Typo:
 *         tag.typo = value_
 *     elif field == Field_VerbForm:             # <<<<<<<<<<<<<<
 *         tag.verb_form = value_
 *     elif field == Field_Voice:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":724
 *     elif field == Field_VerbForm:
 *         tag.verb_form = value_
 *     elif field == Field_Voice:             # <<<<<<<<<<<<<<
 *         tag.voice = value_
 *     elif field == Field_VerbType:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_Voice) != 0);
  if (__pyx_t_1) {

    /* "spacy/morphology.pyx":725
 *         tag.verb_form = value_
 *     elif field == Field_Voice:
 *         tag.voice = value_             # <<<<<<<<<<<<<<
 *     elif field == Field_VerbType:
 *         tag.verb_type = value_
 */
    __pyx_v_tag->voice = __pyx_v_value_;

    /* "spacy/morphology.pyx":724
 *     elif field == Field_VerbForm:
 *         tag.verb_form = value_
 *     elif field == Field_Voice:             # <<<<<<<<<<<<<<
 *         tag.voice = value_
 *     elif field == Field_VerbType:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":726
 *     elif field == Field_Voice:
 *         tag.voice = value_
 *     elif field == Field_VerbType:             # <<<<<<<<<<<<<<
 *         tag.verb_type = value_
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_e_5spacy_10morphology_Field_VerbType) != 0);
  if (likely(__pyx_t_1)) {

    /* "spacy/morphology.pyx":727
 *         tag.voice = value_
 *     elif field == Field_VerbType:
 *         tag.verb_type = value_             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(Errors.E167.format(field=FEATURE_NAMES.get(feature), field_id=feature))
 */
    __pyx_v_tag->verb_type = __pyx_v_value_;

    /* "spacy/morphology.pyx":726
 *     elif field == Field_Voice:
 *         tag.voice = value_
 *     elif field == Field_VerbType:             # <<<<<<<<<<<<<<
 *         tag.verb_type = value_
 *     else:
 */
    goto __pyx_L11;
  }

  /* "spacy/morphology.pyx":729
 *         tag.verb_type = value_
 *     else:
 *         raise ValueError(Errors.E167.format(field=FEATURE_NAMES.get(feature), field_id=feature))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Errors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_E167); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_FEATURE_NAMES); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_v_feature); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_field, __pyx_t_6) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_uint64_t(__pyx_v_feature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_field_id, __pyx_t_6) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 729, __pyx_L1_error)
  }
  __pyx_L11:;

  /* "spacy/morphology.pyx":627
 *         return 0
 * 
 * cdef int set_feature(MorphAnalysisC* tag,             # <<<<<<<<<<<<<<
 *         univ_field_t field, attr_t feature, int value) except -1:
 *     if value == True:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("spacy.morphology.set_feature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 272, __pyx_L1_error)

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 276, __pyx_L1_error)

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 306, __pyx_L1_error)

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 325, __pyx_L1_error)
      break;
    }

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 851, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 852, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 853, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 853, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 856, __pyx_L1_error)

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 860, __pyx_L1_error)

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":870
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":878
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 880, __pyx_L1_error)

        /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":883
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":899
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 901, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":902
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 906, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":907
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1036, __pyx_L3_error)

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1042, __pyx_L3_error)

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1044, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1044, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1048, __pyx_L3_error)

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1050, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1050, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lexeme.pxd":20
 * 
 *     @staticmethod
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):             # <<<<<<<<<<<<<<
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex
 */

static CYTHON_INLINE struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_f_5spacy_6lexeme_6Lexeme_from_ptr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, struct __pyx_obj_5spacy_5vocab_Vocab *__pyx_v_vocab, CYTHON_UNUSED int __pyx_v_vector_length) {
  struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_v_self = 0;
  struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_3;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "lexeme.pxd":21
 *     @staticmethod
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)             # <<<<<<<<<<<<<<
 *         self.c = lex
 *         self.vocab = vocab
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_lex->orth); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_vocab));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vocab));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_vocab));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5spacy_6lexeme_Lexeme), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5spacy_6lexeme_Lexeme)))) __PYX_ERR(3, 21, __pyx_L1_error)
  __pyx_v_self = ((struct __pyx_obj_5spacy_6lexeme_Lexeme *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lexeme.pxd":22
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex             # <<<<<<<<<<<<<<
 *         self.vocab = vocab
 *         self.orth = lex.orth
 */
  __pyx_v_self->c = __pyx_v_lex;

  /* "lexeme.pxd":23
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex
 *         self.vocab = vocab             # <<<<<<<<<<<<<<
 *         self.orth = lex.orth
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_vocab));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vocab));
  __Pyx_GOTREF(__pyx_v_self->vocab);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vocab));
  __pyx_v_self->vocab = __pyx_v_vocab;

  /* "lexeme.pxd":24
 *         self.c = lex
 *         self.vocab = vocab
 *         self.orth = lex.orth             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_3 = __pyx_v_lex->orth;
  __pyx_v_self->orth = __pyx_t_3;

  /* "lexeme.pxd":20
 * 
 *     @staticmethod
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):             # <<<<<<<<<<<<<<
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex
 */

  /* function exit code */
  __pyx_r = ((struct __pyx_obj_5spacy_6lexeme_Lexeme *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.lexeme.Lexeme.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lexeme.pxd":27
 * 
 *     @staticmethod
 *     cdef inline SerializedLexemeC c_to_bytes(const LexemeC* lex) nogil:             # <<<<<<<<<<<<<<
 *         cdef SerializedLexemeC lex_data
 *         buff = <const unsigned char*>&lex.flags
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_SerializedLexemeC __pyx_f_5spacy_6lexeme_6Lexeme_c_to_bytes(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lex) {
  struct __pyx_t_5spacy_7structs_SerializedLexemeC __pyx_v_lex_data;
  unsigned char const *__pyx_v_buff;
  CYTHON_UNUSED unsigned char const *__pyx_v_end;
  size_t __pyx_v_i;
  struct __pyx_t_5spacy_7structs_SerializedLexemeC __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "lexeme.pxd":29
 *     cdef inline SerializedLexemeC c_to_bytes(const LexemeC* lex) nogil:
 *         cdef SerializedLexemeC lex_data
 *         buff = <const unsigned char*>&lex.flags             # <<<<<<<<<<<<<<
 *         end = <const unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 *         for i in range(sizeof(lex_data.data)):
 */
  __pyx_v_buff = ((unsigned char const *)(&__pyx_v_lex->flags));

  /* "lexeme.pxd":30
 *         cdef SerializedLexemeC lex_data
 *         buff = <const unsigned char*>&lex.flags
 *         end = <const unsigned char*>&lex.sentiment + sizeof(lex.sentiment)             # <<<<<<<<<<<<<<
 *         for i in range(sizeof(lex_data.data)):
 *             lex_data.data[i] = buff[i]
 */
  __pyx_v_end = (((unsigned char const *)(&__pyx_v_lex->sentiment)) + (sizeof(__pyx_v_lex->sentiment)));

  /* "lexeme.pxd":31
 *         buff = <const unsigned char*>&lex.flags
 *         end = <const unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 *         for i in range(sizeof(lex_data.data)):             # <<<<<<<<<<<<<<
 *             lex_data.data[i] = buff[i]
 *         return lex_data
 */
  __pyx_t_1 = (sizeof(__pyx_v_lex_data.data));
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "lexeme.pxd":32
 *         end = <const unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 *         for i in range(sizeof(lex_data.data)):
 *             lex_data.data[i] = buff[i]             # <<<<<<<<<<<<<<
 *         return lex_data
 * 
 */
    (__pyx_v_lex_data.data[__pyx_v_i]) = (__pyx_v_buff[__pyx_v_i]);
  }

  /* "lexeme.pxd":33
 *         for i in range(sizeof(lex_data.data)):
 *             lex_data.data[i] = buff[i]
 *         return lex_data             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_lex_data;
  goto __pyx_L0;

  /* "lexeme.pxd":27
 * 
 *     @staticmethod
 *     cdef inline SerializedLexemeC c_to_bytes(const LexemeC* lex) nogil:             # <<<<<<<<<<<<<<
 *         cdef SerializedLexemeC lex_data
 *         buff = <const unsigned char*>&lex.flags
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "lexeme.pxd":36
 * 
 *     @staticmethod
 *     cdef inline void c_from_bytes(LexemeC* lex, SerializedLexemeC lex_data) nogil:             # <<<<<<<<<<<<<<
 *         buff = <unsigned char*>&lex.flags
 *         end = <unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 */

static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_c_from_bytes(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, struct __pyx_t_5spacy_7structs_SerializedLexemeC __pyx_v_lex_data) {
  unsigned char *__pyx_v_buff;
  CYTHON_UNUSED unsigned char *__pyx_v_end;
  size_t __pyx_v_i;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "lexeme.pxd":37
 *     @staticmethod
 *     cdef inline void c_from_bytes(LexemeC* lex, SerializedLexemeC lex_data) nogil:
 *         buff = <unsigned char*>&lex.flags             # <<<<<<<<<<<<<<
 *         end = <unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 *         for i in range(sizeof(lex_data.data)):
 */
  __pyx_v_buff = ((unsigned char *)(&__pyx_v_lex->flags));

  /* "lexeme.pxd":38
 *     cdef inline void c_from_bytes(LexemeC* lex, SerializedLexemeC lex_data) nogil:
 *         buff = <unsigned char*>&lex.flags
 *         end = <unsigned char*>&lex.sentiment + sizeof(lex.sentiment)             # <<<<<<<<<<<<<<
 *         for i in range(sizeof(lex_data.data)):
 *             buff[i] = lex_data.data[i]
 */
  __pyx_v_end = (((unsigned char *)(&__pyx_v_lex->sentiment)) + (sizeof(__pyx_v_lex->sentiment)));

  /* "lexeme.pxd":39
 *         buff = <unsigned char*>&lex.flags
 *         end = <unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 *         for i in range(sizeof(lex_data.data)):             # <<<<<<<<<<<<<<
 *             buff[i] = lex_data.data[i]
 * 
 */
  __pyx_t_1 = (sizeof(__pyx_v_lex_data.data));
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "lexeme.pxd":40
 *         end = <unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 *         for i in range(sizeof(lex_data.data)):
 *             buff[i] = lex_data.data[i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    (__pyx_v_buff[__pyx_v_i]) = (__pyx_v_lex_data.data[__pyx_v_i]);
  }

  /* "lexeme.pxd":36
 * 
 *     @staticmethod
 *     cdef inline void c_from_bytes(LexemeC* lex, SerializedLexemeC lex_data) nogil:             # <<<<<<<<<<<<<<
 *         buff = <unsigned char*>&lex.flags
 *         end = <unsigned char*>&lex.sentiment + sizeof(lex.sentiment)
 */

  /* function exit code */
}

/* "lexeme.pxd":43
 * 
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:             # <<<<<<<<<<<<<<
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 */

static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_set_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_name, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_value) {
  int __pyx_t_1;

  /* "lexeme.pxd":44
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:
 *         if name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:
 */
  __pyx_t_1 = ((__pyx_v_name < ((sizeof(__pyx_t_5spacy_8typedefs_flags_t)) * 8)) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":45
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)             # <<<<<<<<<<<<<<
 *         elif name == ID:
 *             lex.id = value
 */
    (void)(__pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(__pyx_v_lex, __pyx_v_name, __pyx_v_value));

    /* "lexeme.pxd":44
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:
 *         if name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":46
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:             # <<<<<<<<<<<<<<
 *             lex.id = value
 *         elif name == LOWER:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_ID) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":47
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:
 *             lex.id = value             # <<<<<<<<<<<<<<
 *         elif name == LOWER:
 *             lex.lower = value
 */
    __pyx_v_lex->id = __pyx_v_value;

    /* "lexeme.pxd":46
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:             # <<<<<<<<<<<<<<
 *             lex.id = value
 *         elif name == LOWER:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":48
 *         elif name == ID:
 *             lex.id = value
 *         elif name == LOWER:             # <<<<<<<<<<<<<<
 *             lex.lower = value
 *         elif name == NORM:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_LOWER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":49
 *             lex.id = value
 *         elif name == LOWER:
 *             lex.lower = value             # <<<<<<<<<<<<<<
 *         elif name == NORM:
 *             lex.norm = value
 */
    __pyx_v_lex->lower = __pyx_v_value;

    /* "lexeme.pxd":48
 *         elif name == ID:
 *             lex.id = value
 *         elif name == LOWER:             # <<<<<<<<<<<<<<
 *             lex.lower = value
 *         elif name == NORM:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":50
 *         elif name == LOWER:
 *             lex.lower = value
 *         elif name == NORM:             # <<<<<<<<<<<<<<
 *             lex.norm = value
 *         elif name == SHAPE:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_NORM) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":51
 *             lex.lower = value
 *         elif name == NORM:
 *             lex.norm = value             # <<<<<<<<<<<<<<
 *         elif name == SHAPE:
 *             lex.shape = value
 */
    __pyx_v_lex->norm = __pyx_v_value;

    /* "lexeme.pxd":50
 *         elif name == LOWER:
 *             lex.lower = value
 *         elif name == NORM:             # <<<<<<<<<<<<<<
 *             lex.norm = value
 *         elif name == SHAPE:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":52
 *         elif name == NORM:
 *             lex.norm = value
 *         elif name == SHAPE:             # <<<<<<<<<<<<<<
 *             lex.shape = value
 *         elif name == PREFIX:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_SHAPE) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":53
 *             lex.norm = value
 *         elif name == SHAPE:
 *             lex.shape = value             # <<<<<<<<<<<<<<
 *         elif name == PREFIX:
 *             lex.prefix = value
 */
    __pyx_v_lex->shape = __pyx_v_value;

    /* "lexeme.pxd":52
 *         elif name == NORM:
 *             lex.norm = value
 *         elif name == SHAPE:             # <<<<<<<<<<<<<<
 *             lex.shape = value
 *         elif name == PREFIX:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":54
 *         elif name == SHAPE:
 *             lex.shape = value
 *         elif name == PREFIX:             # <<<<<<<<<<<<<<
 *             lex.prefix = value
 *         elif name == SUFFIX:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_PREFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":55
 *             lex.shape = value
 *         elif name == PREFIX:
 *             lex.prefix = value             # <<<<<<<<<<<<<<
 *         elif name == SUFFIX:
 *             lex.suffix = value
 */
    __pyx_v_lex->prefix = __pyx_v_value;

    /* "lexeme.pxd":54
 *         elif name == SHAPE:
 *             lex.shape = value
 *         elif name == PREFIX:             # <<<<<<<<<<<<<<
 *             lex.prefix = value
 *         elif name == SUFFIX:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":56
 *         elif name == PREFIX:
 *             lex.prefix = value
 *         elif name == SUFFIX:             # <<<<<<<<<<<<<<
 *             lex.suffix = value
 *         elif name == CLUSTER:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_SUFFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":57
 *             lex.prefix = value
 *         elif name == SUFFIX:
 *             lex.suffix = value             # <<<<<<<<<<<<<<
 *         elif name == CLUSTER:
 *             lex.cluster = value
 */
    __pyx_v_lex->suffix = __pyx_v_value;

    /* "lexeme.pxd":56
 *         elif name == PREFIX:
 *             lex.prefix = value
 *         elif name == SUFFIX:             # <<<<<<<<<<<<<<
 *             lex.suffix = value
 *         elif name == CLUSTER:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":58
 *         elif name == SUFFIX:
 *             lex.suffix = value
 *         elif name == CLUSTER:             # <<<<<<<<<<<<<<
 *             lex.cluster = value
 *         elif name == LANG:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_CLUSTER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":59
 *             lex.suffix = value
 *         elif name == CLUSTER:
 *             lex.cluster = value             # <<<<<<<<<<<<<<
 *         elif name == LANG:
 *             lex.lang = value
 */
    __pyx_v_lex->cluster = __pyx_v_value;

    /* "lexeme.pxd":58
 *         elif name == SUFFIX:
 *             lex.suffix = value
 *         elif name == CLUSTER:             # <<<<<<<<<<<<<<
 *             lex.cluster = value
 *         elif name == LANG:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":60
 *         elif name == CLUSTER:
 *             lex.cluster = value
 *         elif name == LANG:             # <<<<<<<<<<<<<<
 *             lex.lang = value
 * 
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_LANG) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":61
 *             lex.cluster = value
 *         elif name == LANG:
 *             lex.lang = value             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_v_lex->lang = __pyx_v_value;

    /* "lexeme.pxd":60
 *         elif name == CLUSTER:
 *             lex.cluster = value
 *         elif name == LANG:             # <<<<<<<<<<<<<<
 *             lex.lang = value
 * 
 */
  }
  __pyx_L3:;

  /* "lexeme.pxd":43
 * 
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:             # <<<<<<<<<<<<<<
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 */

  /* function exit code */
}

/* "lexeme.pxd":64
 * 
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:             # <<<<<<<<<<<<<<
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):
 */

static CYTHON_INLINE __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_6lexeme_6Lexeme_get_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_feat_name) {
  __pyx_t_5spacy_8typedefs_attr_t __pyx_r;
  int __pyx_t_1;

  /* "lexeme.pxd":65
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             if Lexeme.c_check_flag(lex, feat_name):
 *                 return 1
 */
  __pyx_t_1 = ((__pyx_v_feat_name < ((sizeof(__pyx_t_5spacy_8typedefs_flags_t)) * 8)) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":66
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):             # <<<<<<<<<<<<<<
 *                 return 1
 *             else:
 */
    __pyx_t_1 = (__pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(__pyx_v_lex, __pyx_v_feat_name) != 0);
    if (__pyx_t_1) {

      /* "lexeme.pxd":67
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):
 *                 return 1             # <<<<<<<<<<<<<<
 *             else:
 *                 return 0
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "lexeme.pxd":66
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):             # <<<<<<<<<<<<<<
 *                 return 1
 *             else:
 */
    }

    /* "lexeme.pxd":69
 *                 return 1
 *             else:
 *                 return 0             # <<<<<<<<<<<<<<
 *         elif feat_name == ID:
 *             return lex.id
 */
    /*else*/ {
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "lexeme.pxd":65
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             if Lexeme.c_check_flag(lex, feat_name):
 *                 return 1
 */
  }

  /* "lexeme.pxd":70
 *             else:
 *                 return 0
 *         elif feat_name == ID:             # <<<<<<<<<<<<<<
 *             return lex.id
 *         elif feat_name == ORTH:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_ID) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":71
 *                 return 0
 *         elif feat_name == ID:
 *             return lex.id             # <<<<<<<<<<<<<<
 *         elif feat_name == ORTH:
 *             return lex.orth
 */
    __pyx_r = __pyx_v_lex->id;
    goto __pyx_L0;

    /* "lexeme.pxd":70
 *             else:
 *                 return 0
 *         elif feat_name == ID:             # <<<<<<<<<<<<<<
 *             return lex.id
 *         elif feat_name == ORTH:
 */
  }

  /* "lexeme.pxd":72
 *         elif feat_name == ID:
 *             return lex.id
 *         elif feat_name == ORTH:             # <<<<<<<<<<<<<<
 *             return lex.orth
 *         elif feat_name == LOWER:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_ORTH) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":73
 *             return lex.id
 *         elif feat_name == ORTH:
 *             return lex.orth             # <<<<<<<<<<<<<<
 *         elif feat_name == LOWER:
 *             return lex.lower
 */
    __pyx_r = __pyx_v_lex->orth;
    goto __pyx_L0;

    /* "lexeme.pxd":72
 *         elif feat_name == ID:
 *             return lex.id
 *         elif feat_name == ORTH:             # <<<<<<<<<<<<<<
 *             return lex.orth
 *         elif feat_name == LOWER:
 */
  }

  /* "lexeme.pxd":74
 *         elif feat_name == ORTH:
 *             return lex.orth
 *         elif feat_name == LOWER:             # <<<<<<<<<<<<<<
 *             return lex.lower
 *         elif feat_name == NORM:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_LOWER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":75
 *             return lex.orth
 *         elif feat_name == LOWER:
 *             return lex.lower             # <<<<<<<<<<<<<<
 *         elif feat_name == NORM:
 *             return lex.norm
 */
    __pyx_r = __pyx_v_lex->lower;
    goto __pyx_L0;

    /* "lexeme.pxd":74
 *         elif feat_name == ORTH:
 *             return lex.orth
 *         elif feat_name == LOWER:             # <<<<<<<<<<<<<<
 *             return lex.lower
 *         elif feat_name == NORM:
 */
  }

  /* "lexeme.pxd":76
 *         elif feat_name == LOWER:
 *             return lex.lower
 *         elif feat_name == NORM:             # <<<<<<<<<<<<<<
 *             return lex.norm
 *         elif feat_name == SHAPE:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_NORM) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":77
 *             return lex.lower
 *         elif feat_name == NORM:
 *             return lex.norm             # <<<<<<<<<<<<<<
 *         elif feat_name == SHAPE:
 *             return lex.shape
 */
    __pyx_r = __pyx_v_lex->norm;
    goto __pyx_L0;

    /* "lexeme.pxd":76
 *         elif feat_name == LOWER:
 *             return lex.lower
 *         elif feat_name == NORM:             # <<<<<<<<<<<<<<
 *             return lex.norm
 *         elif feat_name == SHAPE:
 */
  }

  /* "lexeme.pxd":78
 *         elif feat_name == NORM:
 *             return lex.norm
 *         elif feat_name == SHAPE:             # <<<<<<<<<<<<<<
 *             return lex.shape
 *         elif feat_name == PREFIX:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_SHAPE) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":79
 *             return lex.norm
 *         elif feat_name == SHAPE:
 *             return lex.shape             # <<<<<<<<<<<<<<
 *         elif feat_name == PREFIX:
 *             return lex.prefix
 */
    __pyx_r = __pyx_v_lex->shape;
    goto __pyx_L0;

    /* "lexeme.pxd":78
 *         elif feat_name == NORM:
 *             return lex.norm
 *         elif feat_name == SHAPE:             # <<<<<<<<<<<<<<
 *             return lex.shape
 *         elif feat_name == PREFIX:
 */
  }

  /* "lexeme.pxd":80
 *         elif feat_name == SHAPE:
 *             return lex.shape
 *         elif feat_name == PREFIX:             # <<<<<<<<<<<<<<
 *             return lex.prefix
 *         elif feat_name == SUFFIX:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_PREFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":81
 *             return lex.shape
 *         elif feat_name == PREFIX:
 *             return lex.prefix             # <<<<<<<<<<<<<<
 *         elif feat_name == SUFFIX:
 *             return lex.suffix
 */
    __pyx_r = __pyx_v_lex->prefix;
    goto __pyx_L0;

    /* "lexeme.pxd":80
 *         elif feat_name == SHAPE:
 *             return lex.shape
 *         elif feat_name == PREFIX:             # <<<<<<<<<<<<<<
 *             return lex.prefix
 *         elif feat_name == SUFFIX:
 */
  }

  /* "lexeme.pxd":82
 *         elif feat_name == PREFIX:
 *             return lex.prefix
 *         elif feat_name == SUFFIX:             # <<<<<<<<<<<<<<
 *             return lex.suffix
 *         elif feat_name == LENGTH:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_SUFFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":83
 *             return lex.prefix
 *         elif feat_name == SUFFIX:
 *             return lex.suffix             # <<<<<<<<<<<<<<
 *         elif feat_name == LENGTH:
 *             return lex.length
 */
    __pyx_r = __pyx_v_lex->suffix;
    goto __pyx_L0;

    /* "lexeme.pxd":82
 *         elif feat_name == PREFIX:
 *             return lex.prefix
 *         elif feat_name == SUFFIX:             # <<<<<<<<<<<<<<
 *             return lex.suffix
 *         elif feat_name == LENGTH:
 */
  }

  /* "lexeme.pxd":84
 *         elif feat_name == SUFFIX:
 *             return lex.suffix
 *         elif feat_name == LENGTH:             # <<<<<<<<<<<<<<
 *             return lex.length
 *         elif feat_name == CLUSTER:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_LENGTH) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":85
 *             return lex.suffix
 *         elif feat_name == LENGTH:
 *             return lex.length             # <<<<<<<<<<<<<<
 *         elif feat_name == CLUSTER:
 *             return lex.cluster
 */
    __pyx_r = __pyx_v_lex->length;
    goto __pyx_L0;

    /* "lexeme.pxd":84
 *         elif feat_name == SUFFIX:
 *             return lex.suffix
 *         elif feat_name == LENGTH:             # <<<<<<<<<<<<<<
 *             return lex.length
 *         elif feat_name == CLUSTER:
 */
  }

  /* "lexeme.pxd":86
 *         elif feat_name == LENGTH:
 *             return lex.length
 *         elif feat_name == CLUSTER:             # <<<<<<<<<<<<<<
 *             return lex.cluster
 *         elif feat_name == LANG:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_CLUSTER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":87
 *             return lex.length
 *         elif feat_name == CLUSTER:
 *             return lex.cluster             # <<<<<<<<<<<<<<
 *         elif feat_name == LANG:
 *             return lex.lang
 */
    __pyx_r = __pyx_v_lex->cluster;
    goto __pyx_L0;

    /* "lexeme.pxd":86
 *         elif feat_name == LENGTH:
 *             return lex.length
 *         elif feat_name == CLUSTER:             # <<<<<<<<<<<<<<
 *             return lex.cluster
 *         elif feat_name == LANG:
 */
  }

  /* "lexeme.pxd":88
 *         elif feat_name == CLUSTER:
 *             return lex.cluster
 *         elif feat_name == LANG:             # <<<<<<<<<<<<<<
 *             return lex.lang
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_LANG) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":89
 *             return lex.cluster
 *         elif feat_name == LANG:
 *             return lex.lang             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
    __pyx_r = __pyx_v_lex->lang;
    goto __pyx_L0;

    /* "lexeme.pxd":88
 *         elif feat_name == CLUSTER:
 *             return lex.cluster
 *         elif feat_name == LANG:             # <<<<<<<<<<<<<<
 *             return lex.lang
 *         else:
 */
  }

  /* "lexeme.pxd":91
 *             return lex.lang
 *         else:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "lexeme.pxd":64
 * 
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:             # <<<<<<<<<<<<<<
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "lexeme.pxd":94
 * 
 *     @staticmethod
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):
 */

static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lexeme, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id) {
  __pyx_t_5spacy_8typedefs_flags_t __pyx_v_one;
  int __pyx_r;
  int __pyx_t_1;

  /* "lexeme.pxd":95
 *     @staticmethod
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:
 *         cdef flags_t one = 1             # <<<<<<<<<<<<<<
 *         if lexeme.flags & (one << flag_id):
 *             return True
 */
  __pyx_v_one = 1;

  /* "lexeme.pxd":96
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_lexeme->flags & (__pyx_v_one << __pyx_v_flag_id)) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":97
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "lexeme.pxd":96
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  }

  /* "lexeme.pxd":99
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "lexeme.pxd":94
 * 
 *     @staticmethod
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "lexeme.pxd":102
 * 
 *     @staticmethod
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if value:
 */

static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id, int __pyx_v_value) {
  __pyx_t_5spacy_8typedefs_flags_t __pyx_v_one;
  int __pyx_r;
  int __pyx_t_1;

  /* "lexeme.pxd":103
 *     @staticmethod
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:
 *         cdef flags_t one = 1             # <<<<<<<<<<<<<<
 *         if value:
 *             lex.flags |= one << flag_id
 */
  __pyx_v_one = 1;

  /* "lexeme.pxd":104
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:
 *         cdef flags_t one = 1
 *         if value:             # <<<<<<<<<<<<<<
 *             lex.flags |= one << flag_id
 *         else:
 */
  __pyx_t_1 = (__pyx_v_value != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":105
 *         cdef flags_t one = 1
 *         if value:
 *             lex.flags |= one << flag_id             # <<<<<<<<<<<<<<
 *         else:
 *             lex.flags &= ~(one << flag_id)
 */
    __pyx_v_lex->flags = (__pyx_v_lex->flags | (__pyx_v_one << __pyx_v_flag_id));

    /* "lexeme.pxd":104
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:
 *         cdef flags_t one = 1
 *         if value:             # <<<<<<<<<<<<<<
 *             lex.flags |= one << flag_id
 *         else:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":107
 *             lex.flags |= one << flag_id
 *         else:
 *             lex.flags &= ~(one << flag_id)             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __pyx_v_lex->flags = (__pyx_v_lex->flags & (~(__pyx_v_one << __pyx_v_flag_id)));
  }
  __pyx_L3:;

  /* "lexeme.pxd":102
 * 
 *     @staticmethod
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if value:
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}
static struct __pyx_vtabstruct_5spacy_10morphology_Morphology __pyx_vtable_5spacy_10morphology_Morphology;

static PyObject *__pyx_tp_new_5spacy_10morphology_Morphology(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5spacy_10morphology_Morphology *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5spacy_10morphology_Morphology *)o);
  p->__pyx_vtab = __pyx_vtabptr_5spacy_10morphology_Morphology;
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  p->strings = ((struct __pyx_obj_5spacy_7strings_StringStore *)Py_None); Py_INCREF(Py_None);
  p->tags = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  p->lemmatizer = Py_None; Py_INCREF(Py_None);
  p->tag_map = Py_None; Py_INCREF(Py_None);
  p->tag_names = Py_None; Py_INCREF(Py_None);
  p->reverse_index = Py_None; Py_INCREF(Py_None);
  p->exc = Py_None; Py_INCREF(Py_None);
  p->_feat_map = Py_None; Py_INCREF(Py_None);
  p->_cache = ((struct __pyx_obj_7preshed_4maps_PreshMapArray *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5spacy_10morphology_Morphology(PyObject *o) {
  struct __pyx_obj_5spacy_10morphology_Morphology *p = (struct __pyx_obj_5spacy_10morphology_Morphology *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mem);
  Py_CLEAR(p->strings);
  Py_CLEAR(p->tags);
  Py_CLEAR(p->lemmatizer);
  Py_CLEAR(p->tag_map);
  Py_CLEAR(p->tag_names);
  Py_CLEAR(p->reverse_index);
  Py_CLEAR(p->exc);
  Py_CLEAR(p->_feat_map);
  Py_CLEAR(p->_cache);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5spacy_10morphology_Morphology(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5spacy_10morphology_Morphology *p = (struct __pyx_obj_5spacy_10morphology_Morphology *)o;
  if (p->mem) {
    e = (*v)(((PyObject *)p->mem), a); if (e) return e;
  }
  if (p->strings) {
    e = (*v)(((PyObject *)p->strings), a); if (e) return e;
  }
  if (p->tags) {
    e = (*v)(((PyObject *)p->tags), a); if (e) return e;
  }
  if (p->lemmatizer) {
    e = (*v)(p->lemmatizer, a); if (e) return e;
  }
  if (p->tag_map) {
    e = (*v)(p->tag_map, a); if (e) return e;
  }
  if (p->tag_names) {
    e = (*v)(p->tag_names, a); if (e) return e;
  }
  if (p->reverse_index) {
    e = (*v)(p->reverse_index, a); if (e) return e;
  }
  if (p->exc) {
    e = (*v)(p->exc, a); if (e) return e;
  }
  if (p->_feat_map) {
    e = (*v)(p->_feat_map, a); if (e) return e;
  }
  if (p->_cache) {
    e = (*v)(((PyObject *)p->_cache), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5spacy_10morphology_Morphology(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5spacy_10morphology_Morphology *p = (struct __pyx_obj_5spacy_10morphology_Morphology *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->strings);
  p->strings = ((struct __pyx_obj_5spacy_7strings_StringStore *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tags);
  p->tags = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lemmatizer);
  p->lemmatizer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tag_map);
  p->tag_map = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tag_names);
  p->tag_names = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reverse_index);
  p->reverse_index = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exc);
  p->exc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_feat_map);
  p->_feat_map = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_cache);
  p->_cache = ((struct __pyx_obj_7preshed_4maps_PreshMapArray *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_mem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_3mem_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_strings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_7strings_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_lemmatizer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_1__get__(o);
}

static int __pyx_setprop_5spacy_10morphology_10Morphology_lemmatizer(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_3__set__(o, v);
  }
  else {
    return __pyx_pw_5spacy_10morphology_10Morphology_10lemmatizer_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_tag_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_7tag_map_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_tag_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_9tag_names_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_reverse_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_13reverse_index_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_exc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_3exc_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology__feat_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_9_feat_map_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology__cache(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_6_cache_1__get__(o);
}

static PyObject *__pyx_getprop_5spacy_10morphology_10Morphology_n_tags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_10morphology_10Morphology_6n_tags_1__get__(o);
}

static PyMethodDef __pyx_methods_5spacy_10morphology_Morphology[] = {
  {"_load_from_tag_map", (PyCFunction)__pyx_pw_5spacy_10morphology_10Morphology_3_load_from_tag_map, METH_O, 0},
  {"__reduce__", (PyCFunction)__pyx_pw_5spacy_10morphology_10Morphology_5__reduce__, METH_NOARGS, 0},
  {"add", (PyCFunction)__pyx_pw_5spacy_10morphology_10Morphology_7add, METH_O, __pyx_doc_5spacy_10morphology_10Morphology_6add},
  {"get", (PyCFunction)__pyx_pw_5spacy_10morphology_10Morphology_9get, METH_O, 0},
  {"update", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5spacy_10morphology_10Morphology_11update, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5spacy_10morphology_10Morphology_10update},
  {"lemmatize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5spacy_10morphology_10Morphology_13lemmatize, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_special_case", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5spacy_10morphology_10Morphology_15add_special_case, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5spacy_10morphology_10Morphology_14add_special_case},
  {"load_morph_exceptions", (PyCFunction)__pyx_pw_5spacy_10morphology_10Morphology_17load_morph_exceptions, METH_O, 0},
  {"create_class_map", (PyCFunction)__pyx_pw_5spacy_10morphology_10Morphology_19create_class_map, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5spacy_10morphology_Morphology[] = {
  {(char *)"mem", __pyx_getprop_5spacy_10morphology_10Morphology_mem, 0, (char *)0, 0},
  {(char *)"strings", __pyx_getprop_5spacy_10morphology_10Morphology_strings, 0, (char *)0, 0},
  {(char *)"lemmatizer", __pyx_getprop_5spacy_10morphology_10Morphology_lemmatizer, __pyx_setprop_5spacy_10morphology_10Morphology_lemmatizer, (char *)0, 0},
  {(char *)"tag_map", __pyx_getprop_5spacy_10morphology_10Morphology_tag_map, 0, (char *)0, 0},
  {(char *)"tag_names", __pyx_getprop_5spacy_10morphology_10Morphology_tag_names, 0, (char *)0, 0},
  {(char *)"reverse_index", __pyx_getprop_5spacy_10morphology_10Morphology_reverse_index, 0, (char *)0, 0},
  {(char *)"exc", __pyx_getprop_5spacy_10morphology_10Morphology_exc, 0, (char *)0, 0},
  {(char *)"_feat_map", __pyx_getprop_5spacy_10morphology_10Morphology__feat_map, 0, (char *)0, 0},
  {(char *)"_cache", __pyx_getprop_5spacy_10morphology_10Morphology__cache, 0, (char *)0, 0},
  {(char *)"n_tags", __pyx_getprop_5spacy_10morphology_10Morphology_n_tags, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5spacy_10morphology_Morphology = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.morphology.Morphology", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_10morphology_Morphology), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_10morphology_Morphology, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Store the possible morphological analyses for a language, and index them\n    by hash.\n\n    To save space on each token, tokens only know the hash of their morphological\n    analysis, so queries of morphological attributes are delegated\n    to this class.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5spacy_10morphology_Morphology, /*tp_traverse*/
  __pyx_tp_clear_5spacy_10morphology_Morphology, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5spacy_10morphology_Morphology, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5spacy_10morphology_Morphology, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5spacy_10morphology_10Morphology_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_10morphology_Morphology, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"get_int_tag", (PyCFunction)__pyx_pw_5spacy_10morphology_3get_int_tag, METH_O, 0},
  {"intify_features", (PyCFunction)__pyx_pw_5spacy_10morphology_5intify_features, METH_O, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_morphology(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_morphology},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "morphology",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_n_u_Abbr, __pyx_k_Abbr, sizeof(__pyx_k_Abbr), 0, 1, 0, 1},
  {&__pyx_n_u_Abbr_yes, __pyx_k_Abbr_yes, sizeof(__pyx_k_Abbr_yes), 0, 1, 0, 1},
  {&__pyx_n_u_AdpType, __pyx_k_AdpType, sizeof(__pyx_k_AdpType), 0, 1, 0, 1},
  {&__pyx_n_u_AdpType_circ, __pyx_k_AdpType_circ, sizeof(__pyx_k_AdpType_circ), 0, 1, 0, 1},
  {&__pyx_n_u_AdpType_comprep, __pyx_k_AdpType_comprep, sizeof(__pyx_k_AdpType_comprep), 0, 1, 0, 1},
  {&__pyx_n_u_AdpType_post, __pyx_k_AdpType_post, sizeof(__pyx_k_AdpType_post), 0, 1, 0, 1},
  {&__pyx_n_u_AdpType_prep, __pyx_k_AdpType_prep, sizeof(__pyx_k_AdpType_prep), 0, 1, 0, 1},
  {&__pyx_n_u_AdpType_voc, __pyx_k_AdpType_voc, sizeof(__pyx_k_AdpType_voc), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType, __pyx_k_AdvType, sizeof(__pyx_k_AdvType), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_adadj, __pyx_k_AdvType_adadj, sizeof(__pyx_k_AdvType_adadj), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_cau, __pyx_k_AdvType_cau, sizeof(__pyx_k_AdvType_cau), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_deg, __pyx_k_AdvType_deg, sizeof(__pyx_k_AdvType_deg), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_ex, __pyx_k_AdvType_ex, sizeof(__pyx_k_AdvType_ex), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_loc, __pyx_k_AdvType_loc, sizeof(__pyx_k_AdvType_loc), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_man, __pyx_k_AdvType_man, sizeof(__pyx_k_AdvType_man), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_mod, __pyx_k_AdvType_mod, sizeof(__pyx_k_AdvType_mod), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_sta, __pyx_k_AdvType_sta, sizeof(__pyx_k_AdvType_sta), 0, 1, 0, 1},
  {&__pyx_n_u_AdvType_tim, __pyx_k_AdvType_tim, sizeof(__pyx_k_AdvType_tim), 0, 1, 0, 1},
  {&__pyx_n_u_Animacy, __pyx_k_Animacy, sizeof(__pyx_k_Animacy), 0, 1, 0, 1},
  {&__pyx_n_u_Animacy_anim, __pyx_k_Animacy_anim, sizeof(__pyx_k_Animacy_anim), 0, 1, 0, 1},
  {&__pyx_n_u_Animacy_hum, __pyx_k_Animacy_hum, sizeof(__pyx_k_Animacy_hum), 0, 1, 0, 1},
  {&__pyx_n_u_Animacy_inan, __pyx_k_Animacy_inan, sizeof(__pyx_k_Animacy_inan), 0, 1, 0, 1},
  {&__pyx_n_u_Animacy_nhum, __pyx_k_Animacy_nhum, sizeof(__pyx_k_Animacy_nhum), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect, __pyx_k_Aspect, sizeof(__pyx_k_Aspect), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect_hab, __pyx_k_Aspect_hab, sizeof(__pyx_k_Aspect_hab), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect_imp, __pyx_k_Aspect_imp, sizeof(__pyx_k_Aspect_imp), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect_iter, __pyx_k_Aspect_iter, sizeof(__pyx_k_Aspect_iter), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect_none, __pyx_k_Aspect_none, sizeof(__pyx_k_Aspect_none), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect_perf, __pyx_k_Aspect_perf, sizeof(__pyx_k_Aspect_perf), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect_prog, __pyx_k_Aspect_prog, sizeof(__pyx_k_Aspect_prog), 0, 1, 0, 1},
  {&__pyx_n_u_Aspect_prosp, __pyx_k_Aspect_prosp, sizeof(__pyx_k_Aspect_prosp), 0, 1, 0, 1},
  {&__pyx_n_u_Case, __pyx_k_Case, sizeof(__pyx_k_Case), 0, 1, 0, 1},
  {&__pyx_n_u_Case_abe, __pyx_k_Case_abe, sizeof(__pyx_k_Case_abe), 0, 1, 0, 1},
  {&__pyx_n_u_Case_abl, __pyx_k_Case_abl, sizeof(__pyx_k_Case_abl), 0, 1, 0, 1},
  {&__pyx_n_u_Case_abs, __pyx_k_Case_abs, sizeof(__pyx_k_Case_abs), 0, 1, 0, 1},
  {&__pyx_n_u_Case_acc, __pyx_k_Case_acc, sizeof(__pyx_k_Case_acc), 0, 1, 0, 1},
  {&__pyx_n_u_Case_ade, __pyx_k_Case_ade, sizeof(__pyx_k_Case_ade), 0, 1, 0, 1},
  {&__pyx_n_u_Case_all, __pyx_k_Case_all, sizeof(__pyx_k_Case_all), 0, 1, 0, 1},
  {&__pyx_n_u_Case_cau, __pyx_k_Case_cau, sizeof(__pyx_k_Case_cau), 0, 1, 0, 1},
  {&__pyx_n_u_Case_com, __pyx_k_Case_com, sizeof(__pyx_k_Case_com), 0, 1, 0, 1},
  {&__pyx_n_u_Case_dat, __pyx_k_Case_dat, sizeof(__pyx_k_Case_dat), 0, 1, 0, 1},
  {&__pyx_n_u_Case_del, __pyx_k_Case_del, sizeof(__pyx_k_Case_del), 0, 1, 0, 1},
  {&__pyx_n_u_Case_dis, __pyx_k_Case_dis, sizeof(__pyx_k_Case_dis), 0, 1, 0, 1},
  {&__pyx_n_u_Case_ela, __pyx_k_Case_ela, sizeof(__pyx_k_Case_ela), 0, 1, 0, 1},
  {&__pyx_n_u_Case_ess, __pyx_k_Case_ess, sizeof(__pyx_k_Case_ess), 0, 1, 0, 1},
  {&__pyx_n_u_Case_gen, __pyx_k_Case_gen, sizeof(__pyx_k_Case_gen), 0, 1, 0, 1},
  {&__pyx_n_u_Case_ill, __pyx_k_Case_ill, sizeof(__pyx_k_Case_ill), 0, 1, 0, 1},
  {&__pyx_n_u_Case_ine, __pyx_k_Case_ine, sizeof(__pyx_k_Case_ine), 0, 1, 0, 1},
  {&__pyx_n_u_Case_ins, __pyx_k_Case_ins, sizeof(__pyx_k_Case_ins), 0, 1, 0, 1},
  {&__pyx_n_u_Case_lat, __pyx_k_Case_lat, sizeof(__pyx_k_Case_lat), 0, 1, 0, 1},
  {&__pyx_n_u_Case_loc, __pyx_k_Case_loc, sizeof(__pyx_k_Case_loc), 0, 1, 0, 1},
  {&__pyx_n_u_Case_nom, __pyx_k_Case_nom, sizeof(__pyx_k_Case_nom), 0, 1, 0, 1},
  {&__pyx_n_u_Case_par, __pyx_k_Case_par, sizeof(__pyx_k_Case_par), 0, 1, 0, 1},
  {&__pyx_n_u_Case_sub, __pyx_k_Case_sub, sizeof(__pyx_k_Case_sub), 0, 1, 0, 1},
  {&__pyx_n_u_Case_sup, __pyx_k_Case_sup, sizeof(__pyx_k_Case_sup), 0, 1, 0, 1},
  {&__pyx_n_u_Case_tem, __pyx_k_Case_tem, sizeof(__pyx_k_Case_tem), 0, 1, 0, 1},
  {&__pyx_n_u_Case_ter, __pyx_k_Case_ter, sizeof(__pyx_k_Case_ter), 0, 1, 0, 1},
  {&__pyx_n_u_Case_tra, __pyx_k_Case_tra, sizeof(__pyx_k_Case_tra), 0, 1, 0, 1},
  {&__pyx_n_u_Case_voc, __pyx_k_Case_voc, sizeof(__pyx_k_Case_voc), 0, 1, 0, 1},
  {&__pyx_n_u_ConjType, __pyx_k_ConjType, sizeof(__pyx_k_ConjType), 0, 1, 0, 1},
  {&__pyx_n_u_ConjType_comp, __pyx_k_ConjType_comp, sizeof(__pyx_k_ConjType_comp), 0, 1, 0, 1},
  {&__pyx_n_u_ConjType_oper, __pyx_k_ConjType_oper, sizeof(__pyx_k_ConjType_oper), 0, 1, 0, 1},
  {&__pyx_n_u_Connegative, __pyx_k_Connegative, sizeof(__pyx_k_Connegative), 0, 1, 0, 1},
  {&__pyx_n_u_Connegative_yes, __pyx_k_Connegative_yes, sizeof(__pyx_k_Connegative_yes), 0, 1, 0, 1},
  {&__pyx_n_s_Counter, __pyx_k_Counter, sizeof(__pyx_k_Counter), 0, 0, 1, 1},
  {&__pyx_n_u_Definite, __pyx_k_Definite, sizeof(__pyx_k_Definite), 0, 1, 0, 1},
  {&__pyx_n_u_Definite_cons, __pyx_k_Definite_cons, sizeof(__pyx_k_Definite_cons), 0, 1, 0, 1},
  {&__pyx_n_u_Definite_def, __pyx_k_Definite_def, sizeof(__pyx_k_Definite_def), 0, 1, 0, 1},
  {&__pyx_n_u_Definite_ind, __pyx_k_Definite_ind, sizeof(__pyx_k_Definite_ind), 0, 1, 0, 1},
  {&__pyx_n_u_Definite_red, __pyx_k_Definite_red, sizeof(__pyx_k_Definite_red), 0, 1, 0, 1},
  {&__pyx_n_u_Definite_two, __pyx_k_Definite_two, sizeof(__pyx_k_Definite_two), 0, 1, 0, 1},
  {&__pyx_n_u_Degree, __pyx_k_Degree, sizeof(__pyx_k_Degree), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_abs, __pyx_k_Degree_abs, sizeof(__pyx_k_Degree_abs), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_cmp, __pyx_k_Degree_cmp, sizeof(__pyx_k_Degree_cmp), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_com, __pyx_k_Degree_com, sizeof(__pyx_k_Degree_com), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_comp, __pyx_k_Degree_comp, sizeof(__pyx_k_Degree_comp), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_dim, __pyx_k_Degree_dim, sizeof(__pyx_k_Degree_dim), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_none, __pyx_k_Degree_none, sizeof(__pyx_k_Degree_none), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_pos, __pyx_k_Degree_pos, sizeof(__pyx_k_Degree_pos), 0, 1, 0, 1},
  {&__pyx_n_u_Degree_sup, __pyx_k_Degree_sup, sizeof(__pyx_k_Degree_sup), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation, __pyx_k_Derivation, sizeof(__pyx_k_Derivation), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_inen, __pyx_k_Derivation_inen, sizeof(__pyx_k_Derivation_inen), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_ja, __pyx_k_Derivation_ja, sizeof(__pyx_k_Derivation_ja), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_lainen, __pyx_k_Derivation_lainen, sizeof(__pyx_k_Derivation_lainen), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_minen, __pyx_k_Derivation_minen, sizeof(__pyx_k_Derivation_minen), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_sti, __pyx_k_Derivation_sti, sizeof(__pyx_k_Derivation_sti), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_ton, __pyx_k_Derivation_ton, sizeof(__pyx_k_Derivation_ton), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_ttaa, __pyx_k_Derivation_ttaa, sizeof(__pyx_k_Derivation_ttaa), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_ttain, __pyx_k_Derivation_ttain, sizeof(__pyx_k_Derivation_ttain), 0, 1, 0, 1},
  {&__pyx_n_u_Derivation_vs, __pyx_k_Derivation_vs, sizeof(__pyx_k_Derivation_vs), 0, 1, 0, 1},
  {&__pyx_n_s_E014, __pyx_k_E014, sizeof(__pyx_k_E014), 0, 0, 1, 1},
  {&__pyx_n_s_E167, __pyx_k_E167, sizeof(__pyx_k_E167), 0, 0, 1, 1},
  {&__pyx_n_s_E168, __pyx_k_E168, sizeof(__pyx_k_E168), 0, 0, 1, 1},
  {&__pyx_n_u_Echo, __pyx_k_Echo, sizeof(__pyx_k_Echo), 0, 1, 0, 1},
  {&__pyx_n_u_Echo_ech, __pyx_k_Echo_ech, sizeof(__pyx_k_Echo_ech), 0, 1, 0, 1},
  {&__pyx_n_u_Echo_rdp, __pyx_k_Echo_rdp, sizeof(__pyx_k_Echo_rdp), 0, 1, 0, 1},
  {&__pyx_n_s_Errors, __pyx_k_Errors, sizeof(__pyx_k_Errors), 0, 0, 1, 1},
  {&__pyx_n_s_FEATURES, __pyx_k_FEATURES, sizeof(__pyx_k_FEATURES), 0, 0, 1, 1},
  {&__pyx_n_s_FEATURE_FIELDS, __pyx_k_FEATURE_FIELDS, sizeof(__pyx_k_FEATURE_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_s_FEATURE_NAMES, __pyx_k_FEATURE_NAMES, sizeof(__pyx_k_FEATURE_NAMES), 0, 0, 1, 1},
  {&__pyx_n_s_FIELDS, __pyx_k_FIELDS, sizeof(__pyx_k_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_u_Foreign, __pyx_k_Foreign, sizeof(__pyx_k_Foreign), 0, 1, 0, 1},
  {&__pyx_n_u_Foreign_foreign, __pyx_k_Foreign_foreign, sizeof(__pyx_k_Foreign_foreign), 0, 1, 0, 1},
  {&__pyx_n_u_Foreign_fscript, __pyx_k_Foreign_fscript, sizeof(__pyx_k_Foreign_fscript), 0, 1, 0, 1},
  {&__pyx_n_u_Foreign_tscript, __pyx_k_Foreign_tscript, sizeof(__pyx_k_Foreign_tscript), 0, 1, 0, 1},
  {&__pyx_n_u_Foreign_yes, __pyx_k_Foreign_yes, sizeof(__pyx_k_Foreign_yes), 0, 1, 0, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_u_Gender, __pyx_k_Gender, sizeof(__pyx_k_Gender), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_com, __pyx_k_Gender_com, sizeof(__pyx_k_Gender_com), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_dat_fem, __pyx_k_Gender_dat_fem, sizeof(__pyx_k_Gender_dat_fem), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_dat_masc, __pyx_k_Gender_dat_masc, sizeof(__pyx_k_Gender_dat_masc), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_erg_fem, __pyx_k_Gender_erg_fem, sizeof(__pyx_k_Gender_erg_fem), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_erg_masc, __pyx_k_Gender_erg_masc, sizeof(__pyx_k_Gender_erg_masc), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_fem, __pyx_k_Gender_fem, sizeof(__pyx_k_Gender_fem), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_masc, __pyx_k_Gender_masc, sizeof(__pyx_k_Gender_masc), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_neut, __pyx_k_Gender_neut, sizeof(__pyx_k_Gender_neut), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_psor_fem, __pyx_k_Gender_psor_fem, sizeof(__pyx_k_Gender_psor_fem), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_psor_masc, __pyx_k_Gender_psor_masc, sizeof(__pyx_k_Gender_psor_masc), 0, 1, 0, 1},
  {&__pyx_n_u_Gender_psor_neut, __pyx_k_Gender_psor_neut, sizeof(__pyx_k_Gender_psor_neut), 0, 1, 0, 1},
  {&__pyx_n_u_Hyph, __pyx_k_Hyph, sizeof(__pyx_k_Hyph), 0, 1, 0, 1},
  {&__pyx_n_u_Hyph_yes, __pyx_k_Hyph_yes, sizeof(__pyx_k_Hyph_yes), 0, 1, 0, 1},
  {&__pyx_n_s_IDS, __pyx_k_IDS, sizeof(__pyx_k_IDS), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_u_InfForm, __pyx_k_InfForm, sizeof(__pyx_k_InfForm), 0, 1, 0, 1},
  {&__pyx_n_u_InfForm_one, __pyx_k_InfForm_one, sizeof(__pyx_k_InfForm_one), 0, 1, 0, 1},
  {&__pyx_n_u_InfForm_three, __pyx_k_InfForm_three, sizeof(__pyx_k_InfForm_three), 0, 1, 0, 1},
  {&__pyx_n_u_InfForm_two, __pyx_k_InfForm_two, sizeof(__pyx_k_InfForm_two), 0, 1, 0, 1},
  {&__pyx_n_s_LEMMA, __pyx_k_LEMMA, sizeof(__pyx_k_LEMMA), 0, 0, 1, 1},
  {&__pyx_n_s_LOWER_FIELDS, __pyx_k_LOWER_FIELDS, sizeof(__pyx_k_LOWER_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_u_Mood, __pyx_k_Mood, sizeof(__pyx_k_Mood), 0, 1, 0, 1},
  {&__pyx_n_u_Mood_cnd, __pyx_k_Mood_cnd, sizeof(__pyx_k_Mood_cnd), 0, 1, 0, 1},
  {&__pyx_n_u_Mood_imp, __pyx_k_Mood_imp, sizeof(__pyx_k_Mood_imp), 0, 1, 0, 1},
  {&__pyx_n_u_Mood_ind, __pyx_k_Mood_ind, sizeof(__pyx_k_Mood_ind), 0, 1, 0, 1},
  {&__pyx_n_u_Mood_n, __pyx_k_Mood_n, sizeof(__pyx_k_Mood_n), 0, 1, 0, 1},
  {&__pyx_n_u_Mood_opt, __pyx_k_Mood_opt, sizeof(__pyx_k_Mood_opt), 0, 1, 0, 1},
  {&__pyx_n_u_Mood_pot, __pyx_k_Mood_pot, sizeof(__pyx_k_Mood_pot), 0, 1, 0, 1},
  {&__pyx_n_u_Mood_sub, __pyx_k_Mood_sub, sizeof(__pyx_k_Mood_sub), 0, 1, 0, 1},
  {&__pyx_n_s_Morphology, __pyx_k_Morphology, sizeof(__pyx_k_Morphology), 0, 0, 1, 1},
  {&__pyx_n_s_MorphologyClassMap, __pyx_k_MorphologyClassMap, sizeof(__pyx_k_MorphologyClassMap), 0, 0, 1, 1},
  {&__pyx_n_s_MorphologyClassMap___init, __pyx_k_MorphologyClassMap___init, sizeof(__pyx_k_MorphologyClassMap___init), 0, 0, 1, 1},
  {&__pyx_n_s_MorphologyClassMap_field_sizes, __pyx_k_MorphologyClassMap_field_sizes, sizeof(__pyx_k_MorphologyClassMap_field_sizes), 0, 0, 1, 1},
  {&__pyx_n_s_MorphologyClassMap_get_field_off, __pyx_k_MorphologyClassMap_get_field_off, sizeof(__pyx_k_MorphologyClassMap_get_field_off), 0, 0, 1, 1},
  {&__pyx_n_u_NIL, __pyx_k_NIL, sizeof(__pyx_k_NIL), 0, 1, 0, 1},
  {&__pyx_n_u_NameType, __pyx_k_NameType, sizeof(__pyx_k_NameType), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_com, __pyx_k_NameType_com, sizeof(__pyx_k_NameType_com), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_geo, __pyx_k_NameType_geo, sizeof(__pyx_k_NameType_geo), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_giv, __pyx_k_NameType_giv, sizeof(__pyx_k_NameType_giv), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_nat, __pyx_k_NameType_nat, sizeof(__pyx_k_NameType_nat), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_oth, __pyx_k_NameType_oth, sizeof(__pyx_k_NameType_oth), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_pro, __pyx_k_NameType_pro, sizeof(__pyx_k_NameType_pro), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_prs, __pyx_k_NameType_prs, sizeof(__pyx_k_NameType_prs), 0, 1, 0, 1},
  {&__pyx_n_u_NameType_sur, __pyx_k_NameType_sur, sizeof(__pyx_k_NameType_sur), 0, 1, 0, 1},
  {&__pyx_n_u_Negative, __pyx_k_Negative, sizeof(__pyx_k_Negative), 0, 1, 0, 1},
  {&__pyx_n_u_Negative_neg, __pyx_k_Negative_neg, sizeof(__pyx_k_Negative_neg), 0, 1, 0, 1},
  {&__pyx_n_u_Negative_pos, __pyx_k_Negative_pos, sizeof(__pyx_k_Negative_pos), 0, 1, 0, 1},
  {&__pyx_n_u_Negative_yes, __pyx_k_Negative_yes, sizeof(__pyx_k_Negative_yes), 0, 1, 0, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_u_NounType, __pyx_k_NounType, sizeof(__pyx_k_NounType), 0, 1, 0, 1},
  {&__pyx_n_u_NounType_class, __pyx_k_NounType_class, sizeof(__pyx_k_NounType_class), 0, 1, 0, 1},
  {&__pyx_n_u_NounType_com, __pyx_k_NounType_com, sizeof(__pyx_k_NounType_com), 0, 1, 0, 1},
  {&__pyx_n_u_NounType_prop, __pyx_k_NounType_prop, sizeof(__pyx_k_NounType_prop), 0, 1, 0, 1},
  {&__pyx_n_u_NumForm, __pyx_k_NumForm, sizeof(__pyx_k_NumForm), 0, 1, 0, 1},
  {&__pyx_n_u_NumForm_combi, __pyx_k_NumForm_combi, sizeof(__pyx_k_NumForm_combi), 0, 1, 0, 1},
  {&__pyx_n_u_NumForm_digit, __pyx_k_NumForm_digit, sizeof(__pyx_k_NumForm_digit), 0, 1, 0, 1},
  {&__pyx_n_u_NumForm_roman, __pyx_k_NumForm_roman, sizeof(__pyx_k_NumForm_roman), 0, 1, 0, 1},
  {&__pyx_n_u_NumForm_word, __pyx_k_NumForm_word, sizeof(__pyx_k_NumForm_word), 0, 1, 0, 1},
  {&__pyx_n_u_NumType, __pyx_k_NumType, sizeof(__pyx_k_NumType), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_card, __pyx_k_NumType_card, sizeof(__pyx_k_NumType_card), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_dist, __pyx_k_NumType_dist, sizeof(__pyx_k_NumType_dist), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_dual, __pyx_k_NumType_dual, sizeof(__pyx_k_NumType_dual), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_frac, __pyx_k_NumType_frac, sizeof(__pyx_k_NumType_frac), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_gen, __pyx_k_NumType_gen, sizeof(__pyx_k_NumType_gen), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_mult, __pyx_k_NumType_mult, sizeof(__pyx_k_NumType_mult), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_none, __pyx_k_NumType_none, sizeof(__pyx_k_NumType_none), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_ord, __pyx_k_NumType_ord, sizeof(__pyx_k_NumType_ord), 0, 1, 0, 1},
  {&__pyx_n_u_NumType_sets, __pyx_k_NumType_sets, sizeof(__pyx_k_NumType_sets), 0, 1, 0, 1},
  {&__pyx_n_u_NumValue, __pyx_k_NumValue, sizeof(__pyx_k_NumValue), 0, 1, 0, 1},
  {&__pyx_n_u_NumValue_one, __pyx_k_NumValue_one, sizeof(__pyx_k_NumValue_one), 0, 1, 0, 1},
  {&__pyx_n_u_NumValue_three, __pyx_k_NumValue_three, sizeof(__pyx_k_NumValue_three), 0, 1, 0, 1},
  {&__pyx_n_u_NumValue_two, __pyx_k_NumValue_two, sizeof(__pyx_k_NumValue_two), 0, 1, 0, 1},
  {&__pyx_n_u_Number, __pyx_k_Number, sizeof(__pyx_k_Number), 0, 1, 0, 1},
  {&__pyx_n_u_Number_abs_plur, __pyx_k_Number_abs_plur, sizeof(__pyx_k_Number_abs_plur), 0, 1, 0, 1},
  {&__pyx_n_u_Number_abs_sing, __pyx_k_Number_abs_sing, sizeof(__pyx_k_Number_abs_sing), 0, 1, 0, 1},
  {&__pyx_n_u_Number_com, __pyx_k_Number_com, sizeof(__pyx_k_Number_com), 0, 1, 0, 1},
  {&__pyx_n_u_Number_count, __pyx_k_Number_count, sizeof(__pyx_k_Number_count), 0, 1, 0, 1},
  {&__pyx_n_u_Number_dat_plur, __pyx_k_Number_dat_plur, sizeof(__pyx_k_Number_dat_plur), 0, 1, 0, 1},
  {&__pyx_n_u_Number_dat_sing, __pyx_k_Number_dat_sing, sizeof(__pyx_k_Number_dat_sing), 0, 1, 0, 1},
  {&__pyx_n_u_Number_dual, __pyx_k_Number_dual, sizeof(__pyx_k_Number_dual), 0, 1, 0, 1},
  {&__pyx_n_u_Number_erg_plur, __pyx_k_Number_erg_plur, sizeof(__pyx_k_Number_erg_plur), 0, 1, 0, 1},
  {&__pyx_n_u_Number_erg_sing, __pyx_k_Number_erg_sing, sizeof(__pyx_k_Number_erg_sing), 0, 1, 0, 1},
  {&__pyx_n_u_Number_none, __pyx_k_Number_none, sizeof(__pyx_k_Number_none), 0, 1, 0, 1},
  {&__pyx_n_u_Number_plur, __pyx_k_Number_plur, sizeof(__pyx_k_Number_plur), 0, 1, 0, 1},
  {&__pyx_n_u_Number_psee_plur, __pyx_k_Number_psee_plur, sizeof(__pyx_k_Number_psee_plur), 0, 1, 0, 1},
  {&__pyx_n_u_Number_psee_sing, __pyx_k_Number_psee_sing, sizeof(__pyx_k_Number_psee_sing), 0, 1, 0, 1},
  {&__pyx_n_u_Number_psor_plur, __pyx_k_Number_psor_plur, sizeof(__pyx_k_Number_psor_plur), 0, 1, 0, 1},
  {&__pyx_n_u_Number_psor_sing, __pyx_k_Number_psor_sing, sizeof(__pyx_k_Number_psor_sing), 0, 1, 0, 1},
  {&__pyx_n_u_Number_ptan, __pyx_k_Number_ptan, sizeof(__pyx_k_Number_ptan), 0, 1, 0, 1},
  {&__pyx_n_u_Number_sing, __pyx_k_Number_sing, sizeof(__pyx_k_Number_sing), 0, 1, 0, 1},
  {&__pyx_n_u_POS, __pyx_k_POS, sizeof(__pyx_k_POS), 0, 1, 0, 1},
  {&__pyx_n_u_POS_ADJ, __pyx_k_POS_ADJ, sizeof(__pyx_k_POS_ADJ), 0, 1, 0, 1},
  {&__pyx_n_u_POS_ADP, __pyx_k_POS_ADP, sizeof(__pyx_k_POS_ADP), 0, 1, 0, 1},
  {&__pyx_n_u_POS_ADV, __pyx_k_POS_ADV, sizeof(__pyx_k_POS_ADV), 0, 1, 0, 1},
  {&__pyx_n_u_POS_AUX, __pyx_k_POS_AUX, sizeof(__pyx_k_POS_AUX), 0, 1, 0, 1},
  {&__pyx_n_u_POS_CCONJ, __pyx_k_POS_CCONJ, sizeof(__pyx_k_POS_CCONJ), 0, 1, 0, 1},
  {&__pyx_n_u_POS_CONJ, __pyx_k_POS_CONJ, sizeof(__pyx_k_POS_CONJ), 0, 1, 0, 1},
  {&__pyx_n_u_POS_DET, __pyx_k_POS_DET, sizeof(__pyx_k_POS_DET), 0, 1, 0, 1},
  {&__pyx_n_u_POS_EOL, __pyx_k_POS_EOL, sizeof(__pyx_k_POS_EOL), 0, 1, 0, 1},
  {&__pyx_n_s_POS_IDS, __pyx_k_POS_IDS, sizeof(__pyx_k_POS_IDS), 0, 0, 1, 1},
  {&__pyx_n_u_POS_INTJ, __pyx_k_POS_INTJ, sizeof(__pyx_k_POS_INTJ), 0, 1, 0, 1},
  {&__pyx_n_u_POS_NOUN, __pyx_k_POS_NOUN, sizeof(__pyx_k_POS_NOUN), 0, 1, 0, 1},
  {&__pyx_n_u_POS_NUM, __pyx_k_POS_NUM, sizeof(__pyx_k_POS_NUM), 0, 1, 0, 1},
  {&__pyx_n_u_POS_PART, __pyx_k_POS_PART, sizeof(__pyx_k_POS_PART), 0, 1, 0, 1},
  {&__pyx_n_u_POS_PRON, __pyx_k_POS_PRON, sizeof(__pyx_k_POS_PRON), 0, 1, 0, 1},
  {&__pyx_n_u_POS_PROPN, __pyx_k_POS_PROPN, sizeof(__pyx_k_POS_PROPN), 0, 1, 0, 1},
  {&__pyx_n_u_POS_PUNCT, __pyx_k_POS_PUNCT, sizeof(__pyx_k_POS_PUNCT), 0, 1, 0, 1},
  {&__pyx_n_u_POS_SCONJ, __pyx_k_POS_SCONJ, sizeof(__pyx_k_POS_SCONJ), 0, 1, 0, 1},
  {&__pyx_n_u_POS_SPACE, __pyx_k_POS_SPACE, sizeof(__pyx_k_POS_SPACE), 0, 1, 0, 1},
  {&__pyx_n_u_POS_SYM, __pyx_k_POS_SYM, sizeof(__pyx_k_POS_SYM), 0, 1, 0, 1},
  {&__pyx_n_u_POS_VERB, __pyx_k_POS_VERB, sizeof(__pyx_k_POS_VERB), 0, 1, 0, 1},
  {&__pyx_n_u_POS_X, __pyx_k_POS_X, sizeof(__pyx_k_POS_X), 0, 1, 0, 1},
  {&__pyx_n_u_PartForm, __pyx_k_PartForm, sizeof(__pyx_k_PartForm), 0, 1, 0, 1},
  {&__pyx_n_u_PartForm_agt, __pyx_k_PartForm_agt, sizeof(__pyx_k_PartForm_agt), 0, 1, 0, 1},
  {&__pyx_n_u_PartForm_neg, __pyx_k_PartForm_neg, sizeof(__pyx_k_PartForm_neg), 0, 1, 0, 1},
  {&__pyx_n_u_PartForm_past, __pyx_k_PartForm_past, sizeof(__pyx_k_PartForm_past), 0, 1, 0, 1},
  {&__pyx_n_u_PartForm_pres, __pyx_k_PartForm_pres, sizeof(__pyx_k_PartForm_pres), 0, 1, 0, 1},
  {&__pyx_n_u_PartType, __pyx_k_PartType, sizeof(__pyx_k_PartType), 0, 1, 0, 1},
  {&__pyx_n_u_PartType_emp, __pyx_k_PartType_emp, sizeof(__pyx_k_PartType_emp), 0, 1, 0, 1},
  {&__pyx_n_u_PartType_inf, __pyx_k_PartType_inf, sizeof(__pyx_k_PartType_inf), 0, 1, 0, 1},
  {&__pyx_n_u_PartType_mod, __pyx_k_PartType_mod, sizeof(__pyx_k_PartType_mod), 0, 1, 0, 1},
  {&__pyx_n_u_PartType_res, __pyx_k_PartType_res, sizeof(__pyx_k_PartType_res), 0, 1, 0, 1},
  {&__pyx_n_u_PartType_vbp, __pyx_k_PartType_vbp, sizeof(__pyx_k_PartType_vbp), 0, 1, 0, 1},
  {&__pyx_n_u_Person, __pyx_k_Person, sizeof(__pyx_k_Person), 0, 1, 0, 1},
  {&__pyx_n_u_Person_abs_one, __pyx_k_Person_abs_one, sizeof(__pyx_k_Person_abs_one), 0, 1, 0, 1},
  {&__pyx_n_u_Person_abs_three, __pyx_k_Person_abs_three, sizeof(__pyx_k_Person_abs_three), 0, 1, 0, 1},
  {&__pyx_n_u_Person_abs_two, __pyx_k_Person_abs_two, sizeof(__pyx_k_Person_abs_two), 0, 1, 0, 1},
  {&__pyx_n_u_Person_dat_one, __pyx_k_Person_dat_one, sizeof(__pyx_k_Person_dat_one), 0, 1, 0, 1},
  {&__pyx_n_u_Person_dat_three, __pyx_k_Person_dat_three, sizeof(__pyx_k_Person_dat_three), 0, 1, 0, 1},
  {&__pyx_n_u_Person_dat_two, __pyx_k_Person_dat_two, sizeof(__pyx_k_Person_dat_two), 0, 1, 0, 1},
  {&__pyx_n_u_Person_erg_one, __pyx_k_Person_erg_one, sizeof(__pyx_k_Person_erg_one), 0, 1, 0, 1},
  {&__pyx_n_u_Person_erg_three, __pyx_k_Person_erg_three, sizeof(__pyx_k_Person_erg_three), 0, 1, 0, 1},
  {&__pyx_n_u_Person_erg_two, __pyx_k_Person_erg_two, sizeof(__pyx_k_Person_erg_two), 0, 1, 0, 1},
  {&__pyx_n_u_Person_none, __pyx_k_Person_none, sizeof(__pyx_k_Person_none), 0, 1, 0, 1},
  {&__pyx_n_u_Person_one, __pyx_k_Person_one, sizeof(__pyx_k_Person_one), 0, 1, 0, 1},
  {&__pyx_n_u_Person_psor_one, __pyx_k_Person_psor_one, sizeof(__pyx_k_Person_psor_one), 0, 1, 0, 1},
  {&__pyx_n_u_Person_psor_three, __pyx_k_Person_psor_three, sizeof(__pyx_k_Person_psor_three), 0, 1, 0, 1},
  {&__pyx_n_u_Person_psor_two, __pyx_k_Person_psor_two, sizeof(__pyx_k_Person_psor_two), 0, 1, 0, 1},
  {&__pyx_n_u_Person_three, __pyx_k_Person_three, sizeof(__pyx_k_Person_three), 0, 1, 0, 1},
  {&__pyx_n_u_Person_two, __pyx_k_Person_two, sizeof(__pyx_k_Person_two), 0, 1, 0, 1},
  {&__pyx_n_u_Polarity, __pyx_k_Polarity, sizeof(__pyx_k_Polarity), 0, 1, 0, 1},
  {&__pyx_n_u_Polarity_neg, __pyx_k_Polarity_neg, sizeof(__pyx_k_Polarity_neg), 0, 1, 0, 1},
  {&__pyx_n_u_Polarity_pos, __pyx_k_Polarity_pos, sizeof(__pyx_k_Polarity_pos), 0, 1, 0, 1},
  {&__pyx_n_u_Polite, __pyx_k_Polite, sizeof(__pyx_k_Polite), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_abs_inf, __pyx_k_Polite_abs_inf, sizeof(__pyx_k_Polite_abs_inf), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_abs_pol, __pyx_k_Polite_abs_pol, sizeof(__pyx_k_Polite_abs_pol), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_dat_inf, __pyx_k_Polite_dat_inf, sizeof(__pyx_k_Polite_dat_inf), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_dat_pol, __pyx_k_Polite_dat_pol, sizeof(__pyx_k_Polite_dat_pol), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_erg_inf, __pyx_k_Polite_erg_inf, sizeof(__pyx_k_Polite_erg_inf), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_erg_pol, __pyx_k_Polite_erg_pol, sizeof(__pyx_k_Polite_erg_pol), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_inf, __pyx_k_Polite_inf, sizeof(__pyx_k_Polite_inf), 0, 1, 0, 1},
  {&__pyx_n_u_Polite_pol, __pyx_k_Polite_pol, sizeof(__pyx_k_Polite_pol), 0, 1, 0, 1},
  {&__pyx_n_u_Poss, __pyx_k_Poss, sizeof(__pyx_k_Poss), 0, 1, 0, 1},
  {&__pyx_n_u_Poss_yes, __pyx_k_Poss_yes, sizeof(__pyx_k_Poss_yes), 0, 1, 0, 1},
  {&__pyx_n_u_Prefix, __pyx_k_Prefix, sizeof(__pyx_k_Prefix), 0, 1, 0, 1},
  {&__pyx_n_u_Prefix_yes, __pyx_k_Prefix_yes, sizeof(__pyx_k_Prefix_yes), 0, 1, 0, 1},
  {&__pyx_n_u_PrepCase, __pyx_k_PrepCase, sizeof(__pyx_k_PrepCase), 0, 1, 0, 1},
  {&__pyx_n_u_PrepCase_npr, __pyx_k_PrepCase_npr, sizeof(__pyx_k_PrepCase_npr), 0, 1, 0, 1},
  {&__pyx_n_u_PrepCase_pre, __pyx_k_PrepCase_pre, sizeof(__pyx_k_PrepCase_pre), 0, 1, 0, 1},
  {&__pyx_n_u_PronType, __pyx_k_PronType, sizeof(__pyx_k_PronType), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_advPart, __pyx_k_PronType_advPart, sizeof(__pyx_k_PronType_advPart), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_art, __pyx_k_PronType_art, sizeof(__pyx_k_PronType_art), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_clit, __pyx_k_PronType_clit, sizeof(__pyx_k_PronType_clit), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_default, __pyx_k_PronType_default, sizeof(__pyx_k_PronType_default), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_dem, __pyx_k_PronType_dem, sizeof(__pyx_k_PronType_dem), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_exc, __pyx_k_PronType_exc, sizeof(__pyx_k_PronType_exc), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_ind, __pyx_k_PronType_ind, sizeof(__pyx_k_PronType_ind), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_int, __pyx_k_PronType_int, sizeof(__pyx_k_PronType_int), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_neg, __pyx_k_PronType_neg, sizeof(__pyx_k_PronType_neg), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_prs, __pyx_k_PronType_prs, sizeof(__pyx_k_PronType_prs), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_rcp, __pyx_k_PronType_rcp, sizeof(__pyx_k_PronType_rcp), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_rel, __pyx_k_PronType_rel, sizeof(__pyx_k_PronType_rel), 0, 1, 0, 1},
  {&__pyx_n_u_PronType_tot, __pyx_k_PronType_tot, sizeof(__pyx_k_PronType_tot), 0, 1, 0, 1},
  {&__pyx_n_u_PunctSide, __pyx_k_PunctSide, sizeof(__pyx_k_PunctSide), 0, 1, 0, 1},
  {&__pyx_n_u_PunctSide_fin, __pyx_k_PunctSide_fin, sizeof(__pyx_k_PunctSide_fin), 0, 1, 0, 1},
  {&__pyx_n_u_PunctSide_ini, __pyx_k_PunctSide_ini, sizeof(__pyx_k_PunctSide_ini), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType, __pyx_k_PunctType, sizeof(__pyx_k_PunctType), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_brck, __pyx_k_PunctType_brck, sizeof(__pyx_k_PunctType_brck), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_colo, __pyx_k_PunctType_colo, sizeof(__pyx_k_PunctType_colo), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_comm, __pyx_k_PunctType_comm, sizeof(__pyx_k_PunctType_comm), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_dash, __pyx_k_PunctType_dash, sizeof(__pyx_k_PunctType_dash), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_excl, __pyx_k_PunctType_excl, sizeof(__pyx_k_PunctType_excl), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_peri, __pyx_k_PunctType_peri, sizeof(__pyx_k_PunctType_peri), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_qest, __pyx_k_PunctType_qest, sizeof(__pyx_k_PunctType_qest), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_quot, __pyx_k_PunctType_quot, sizeof(__pyx_k_PunctType_quot), 0, 1, 0, 1},
  {&__pyx_n_u_PunctType_semi, __pyx_k_PunctType_semi, sizeof(__pyx_k_PunctType_semi), 0, 1, 0, 1},
  {&__pyx_n_u_Reflex, __pyx_k_Reflex, sizeof(__pyx_k_Reflex), 0, 1, 0, 1},
  {&__pyx_n_u_Reflex_yes, __pyx_k_Reflex_yes, sizeof(__pyx_k_Reflex_yes), 0, 1, 0, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_u_SP, __pyx_k_SP, sizeof(__pyx_k_SP), 0, 1, 0, 1},
  {&__pyx_n_u_SP_2, __pyx_k_SP_2, sizeof(__pyx_k_SP_2), 0, 1, 0, 1},
  {&__pyx_n_u_Style, __pyx_k_Style, sizeof(__pyx_k_Style), 0, 1, 0, 1},
  {&__pyx_n_u_StyleVariant, __pyx_k_StyleVariant, sizeof(__pyx_k_StyleVariant), 0, 1, 0, 1},
  {&__pyx_n_u_StyleVariant_styleBound, __pyx_k_StyleVariant_styleBound, sizeof(__pyx_k_StyleVariant_styleBound), 0, 1, 0, 1},
  {&__pyx_n_u_StyleVariant_styleShort, __pyx_k_StyleVariant_styleShort, sizeof(__pyx_k_StyleVariant_styleShort), 0, 1, 0, 1},
  {&__pyx_n_u_Style_arch, __pyx_k_Style_arch, sizeof(__pyx_k_Style_arch), 0, 1, 0, 1},
  {&__pyx_n_u_Style_coll, __pyx_k_Style_coll, sizeof(__pyx_k_Style_coll), 0, 1, 0, 1},
  {&__pyx_n_u_Style_derg, __pyx_k_Style_derg, sizeof(__pyx_k_Style_derg), 0, 1, 0, 1},
  {&__pyx_n_u_Style_expr, __pyx_k_Style_expr, sizeof(__pyx_k_Style_expr), 0, 1, 0, 1},
  {&__pyx_n_u_Style_norm, __pyx_k_Style_norm, sizeof(__pyx_k_Style_norm), 0, 1, 0, 1},
  {&__pyx_n_u_Style_poet, __pyx_k_Style_poet, sizeof(__pyx_k_Style_poet), 0, 1, 0, 1},
  {&__pyx_n_u_Style_rare, __pyx_k_Style_rare, sizeof(__pyx_k_Style_rare), 0, 1, 0, 1},
  {&__pyx_n_u_Style_sing, __pyx_k_Style_sing, sizeof(__pyx_k_Style_sing), 0, 1, 0, 1},
  {&__pyx_n_u_Style_vrnc, __pyx_k_Style_vrnc, sizeof(__pyx_k_Style_vrnc), 0, 1, 0, 1},
  {&__pyx_n_u_Style_vulg, __pyx_k_Style_vulg, sizeof(__pyx_k_Style_vulg), 0, 1, 0, 1},
  {&__pyx_n_u_Style_yes, __pyx_k_Style_yes, sizeof(__pyx_k_Style_yes), 0, 1, 0, 1},
  {&__pyx_n_u_Tense, __pyx_k_Tense, sizeof(__pyx_k_Tense), 0, 1, 0, 1},
  {&__pyx_n_u_Tense_fut, __pyx_k_Tense_fut, sizeof(__pyx_k_Tense_fut), 0, 1, 0, 1},
  {&__pyx_n_u_Tense_imp, __pyx_k_Tense_imp, sizeof(__pyx_k_Tense_imp), 0, 1, 0, 1},
  {&__pyx_n_u_Tense_past, __pyx_k_Tense_past, sizeof(__pyx_k_Tense_past), 0, 1, 0, 1},
  {&__pyx_n_u_Tense_pres, __pyx_k_Tense_pres, sizeof(__pyx_k_Tense_pres), 0, 1, 0, 1},
  {&__pyx_n_u_Typo, __pyx_k_Typo, sizeof(__pyx_k_Typo), 0, 1, 0, 1},
  {&__pyx_n_u_Typo_yes, __pyx_k_Typo_yes, sizeof(__pyx_k_Typo_yes), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_u_VerbForm, __pyx_k_VerbForm, sizeof(__pyx_k_VerbForm), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_conv, __pyx_k_VerbForm_conv, sizeof(__pyx_k_VerbForm_conv), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_fin, __pyx_k_VerbForm_fin, sizeof(__pyx_k_VerbForm_fin), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_gdv, __pyx_k_VerbForm_gdv, sizeof(__pyx_k_VerbForm_gdv), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_ger, __pyx_k_VerbForm_ger, sizeof(__pyx_k_VerbForm_ger), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_inf, __pyx_k_VerbForm_inf, sizeof(__pyx_k_VerbForm_inf), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_none, __pyx_k_VerbForm_none, sizeof(__pyx_k_VerbForm_none), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_part, __pyx_k_VerbForm_part, sizeof(__pyx_k_VerbForm_part), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_partFut, __pyx_k_VerbForm_partFut, sizeof(__pyx_k_VerbForm_partFut), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_partPast, __pyx_k_VerbForm_partPast, sizeof(__pyx_k_VerbForm_partPast), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_partPres, __pyx_k_VerbForm_partPres, sizeof(__pyx_k_VerbForm_partPres), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_sup, __pyx_k_VerbForm_sup, sizeof(__pyx_k_VerbForm_sup), 0, 1, 0, 1},
  {&__pyx_n_u_VerbForm_trans, __pyx_k_VerbForm_trans, sizeof(__pyx_k_VerbForm_trans), 0, 1, 0, 1},
  {&__pyx_n_u_VerbType, __pyx_k_VerbType, sizeof(__pyx_k_VerbType), 0, 1, 0, 1},
  {&__pyx_n_u_VerbType_aux, __pyx_k_VerbType_aux, sizeof(__pyx_k_VerbType_aux), 0, 1, 0, 1},
  {&__pyx_n_u_VerbType_cop, __pyx_k_VerbType_cop, sizeof(__pyx_k_VerbType_cop), 0, 1, 0, 1},
  {&__pyx_n_u_VerbType_light, __pyx_k_VerbType_light, sizeof(__pyx_k_VerbType_light), 0, 1, 0, 1},
  {&__pyx_n_u_VerbType_mod, __pyx_k_VerbType_mod, sizeof(__pyx_k_VerbType_mod), 0, 1, 0, 1},
  {&__pyx_n_u_Voice, __pyx_k_Voice, sizeof(__pyx_k_Voice), 0, 1, 0, 1},
  {&__pyx_n_u_Voice_act, __pyx_k_Voice_act, sizeof(__pyx_k_Voice_act), 0, 1, 0, 1},
  {&__pyx_n_u_Voice_cau, __pyx_k_Voice_cau, sizeof(__pyx_k_Voice_cau), 0, 1, 0, 1},
  {&__pyx_n_u_Voice_int, __pyx_k_Voice_int, sizeof(__pyx_k_Voice_int), 0, 1, 0, 1},
  {&__pyx_n_u_Voice_mid, __pyx_k_Voice_mid, sizeof(__pyx_k_Voice_mid), 0, 1, 0, 1},
  {&__pyx_n_u_Voice_pass, __pyx_k_Voice_pass, sizeof(__pyx_k_Voice_pass), 0, 1, 0, 1},
  {&__pyx_n_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 1},
  {&__pyx_n_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 1},
  {&__pyx_n_u_abbr, __pyx_k_abbr, sizeof(__pyx_k_abbr), 0, 1, 0, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_add_special_case, __pyx_k_add_special_case, sizeof(__pyx_k_add_special_case), 0, 0, 1, 1},
  {&__pyx_n_u_adp_type, __pyx_k_adp_type, sizeof(__pyx_k_adp_type), 0, 1, 0, 1},
  {&__pyx_n_u_adv_type, __pyx_k_adv_type, sizeof(__pyx_k_adv_type), 0, 1, 0, 1},
  {&__pyx_n_u_animacy, __pyx_k_animacy, sizeof(__pyx_k_animacy), 0, 1, 0, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_as_int, __pyx_k_as_int, sizeof(__pyx_k_as_int), 0, 0, 1, 1},
  {&__pyx_n_s_as_string, __pyx_k_as_string, sizeof(__pyx_k_as_string), 0, 0, 1, 1},
  {&__pyx_n_u_aspect, __pyx_k_aspect, sizeof(__pyx_k_aspect), 0, 1, 0, 1},
  {&__pyx_n_s_attr, __pyx_k_attr, sizeof(__pyx_k_attr), 0, 0, 1, 1},
  {&__pyx_n_s_attr2field, __pyx_k_attr2field, sizeof(__pyx_k_attr2field), 0, 0, 1, 1},
  {&__pyx_n_s_attrs, __pyx_k_attrs, sizeof(__pyx_k_attrs), 0, 0, 1, 1},
  {&__pyx_n_s_basestring, __pyx_k_basestring, sizeof(__pyx_k_basestring), 0, 0, 1, 1},
  {&__pyx_n_u_case, __pyx_k_case, sizeof(__pyx_k_case), 0, 1, 0, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_col2info, __pyx_k_col2info, sizeof(__pyx_k_col2info), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_compat, __pyx_k_compat, sizeof(__pyx_k_compat), 0, 0, 1, 1},
  {&__pyx_n_u_conj_type, __pyx_k_conj_type, sizeof(__pyx_k_conj_type), 0, 1, 0, 1},
  {&__pyx_n_u_connegative, __pyx_k_connegative, sizeof(__pyx_k_connegative), 0, 1, 0, 1},
  {&__pyx_n_s_create_class_map, __pyx_k_create_class_map, sizeof(__pyx_k_create_class_map), 0, 0, 1, 1},
  {&__pyx_n_u_definite, __pyx_k_definite, sizeof(__pyx_k_definite), 0, 1, 0, 1},
  {&__pyx_n_u_degree, __pyx_k_degree, sizeof(__pyx_k_degree), 0, 1, 0, 1},
  {&__pyx_n_u_derivation, __pyx_k_derivation, sizeof(__pyx_k_derivation), 0, 1, 0, 1},
  {&__pyx_n_s_do_deprecated, __pyx_k_do_deprecated, sizeof(__pyx_k_do_deprecated), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_u_echo, __pyx_k_echo, sizeof(__pyx_k_echo), 0, 1, 0, 1},
  {&__pyx_n_s_ensure_path, __pyx_k_ensure_path, sizeof(__pyx_k_ensure_path), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_exc, __pyx_k_exc, sizeof(__pyx_k_exc), 0, 0, 1, 1},
  {&__pyx_n_s_feat, __pyx_k_feat, sizeof(__pyx_k_feat), 0, 0, 1, 1},
  {&__pyx_n_s_feat2field, __pyx_k_feat2field, sizeof(__pyx_k_feat2field), 0, 0, 1, 1},
  {&__pyx_n_s_feat2offset, __pyx_k_feat2offset, sizeof(__pyx_k_feat2offset), 0, 0, 1, 1},
  {&__pyx_n_s_feat_id, __pyx_k_feat_id, sizeof(__pyx_k_feat_id), 0, 0, 1, 1},
  {&__pyx_n_s_feature, __pyx_k_feature, sizeof(__pyx_k_feature), 0, 0, 1, 1},
  {&__pyx_n_s_features, __pyx_k_features, sizeof(__pyx_k_features), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_field2col, __pyx_k_field2col, sizeof(__pyx_k_field2col), 0, 0, 1, 1},
  {&__pyx_n_s_field2feats, __pyx_k_field2feats, sizeof(__pyx_k_field2feats), 0, 0, 1, 1},
  {&__pyx_n_s_field2id, __pyx_k_field2id, sizeof(__pyx_k_field2id), 0, 0, 1, 1},
  {&__pyx_n_s_field_id, __pyx_k_field_id, sizeof(__pyx_k_field_id), 0, 0, 1, 1},
  {&__pyx_n_s_field_sizes, __pyx_k_field_sizes, sizeof(__pyx_k_field_sizes), 0, 0, 1, 1},
  {&__pyx_n_s_fieldid2field, __pyx_k_fieldid2field, sizeof(__pyx_k_fieldid2field), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_force, __pyx_k_force, sizeof(__pyx_k_force), 0, 0, 1, 1},
  {&__pyx_n_u_foreign, __pyx_k_foreign, sizeof(__pyx_k_foreign), 0, 1, 0, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_u_gender, __pyx_k_gender, sizeof(__pyx_k_gender), 0, 1, 0, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_field_offset, __pyx_k_get_field_offset, sizeof(__pyx_k_get_field_offset), 0, 0, 1, 1},
  {&__pyx_n_s_get_string_id, __pyx_k_get_string_id, sizeof(__pyx_k_get_string_id), 0, 0, 1, 1},
  {&__pyx_n_u_hyph, __pyx_k_hyph, sizeof(__pyx_k_hyph), 0, 1, 0, 1},
  {&__pyx_n_s_id2feat, __pyx_k_id2feat, sizeof(__pyx_k_id2feat), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_u_inf_form, __pyx_k_inf_form, sizeof(__pyx_k_inf_form), 0, 1, 0, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_intify_attrs, __pyx_k_intify_attrs, sizeof(__pyx_k_intify_attrs), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_lemmatize, __pyx_k_lemmatize, sizeof(__pyx_k_lemmatize), 0, 0, 1, 1},
  {&__pyx_n_s_lemmatizer, __pyx_k_lemmatizer, sizeof(__pyx_k_lemmatizer), 0, 0, 1, 1},
  {&__pyx_n_s_load_from_tag_map, __pyx_k_load_from_tag_map, sizeof(__pyx_k_load_from_tag_map), 0, 0, 1, 1},
  {&__pyx_n_s_lookup, __pyx_k_lookup, sizeof(__pyx_k_lookup), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_u_mood, __pyx_k_mood, sizeof(__pyx_k_mood), 0, 1, 0, 1},
  {&__pyx_n_s_morph, __pyx_k_morph, sizeof(__pyx_k_morph), 0, 0, 1, 1},
  {&__pyx_n_u_morph, __pyx_k_morph, sizeof(__pyx_k_morph), 0, 1, 0, 1},
  {&__pyx_n_s_morphology, __pyx_k_morphology, sizeof(__pyx_k_morphology), 0, 0, 1, 1},
  {&__pyx_kp_s_morphology_pyx, __pyx_k_morphology_pyx, sizeof(__pyx_k_morphology_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_name_type, __pyx_k_name_type, sizeof(__pyx_k_name_type), 0, 1, 0, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_u_negative, __pyx_k_negative, sizeof(__pyx_k_negative), 0, 1, 0, 1},
  {&__pyx_n_s_normalize_props, __pyx_k_normalize_props, sizeof(__pyx_k_normalize_props), 0, 0, 1, 1},
  {&__pyx_n_u_noun_type, __pyx_k_noun_type, sizeof(__pyx_k_noun_type), 0, 1, 0, 1},
  {&__pyx_n_u_num_form, __pyx_k_num_form, sizeof(__pyx_k_num_form), 0, 1, 0, 1},
  {&__pyx_n_u_num_type, __pyx_k_num_type, sizeof(__pyx_k_num_type), 0, 1, 0, 1},
  {&__pyx_n_u_num_value, __pyx_k_num_value, sizeof(__pyx_k_num_value), 0, 1, 0, 1},
  {&__pyx_n_u_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 1, 0, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_n_s_orth, __pyx_k_orth, sizeof(__pyx_k_orth), 0, 0, 1, 1},
  {&__pyx_n_s_orth_str, __pyx_k_orth_str, sizeof(__pyx_k_orth_str), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_u_part_form, __pyx_k_part_form, sizeof(__pyx_k_part_form), 0, 1, 0, 1},
  {&__pyx_n_u_part_type, __pyx_k_part_type, sizeof(__pyx_k_part_type), 0, 1, 0, 1},
  {&__pyx_n_s_parts_of_speech, __pyx_k_parts_of_speech, sizeof(__pyx_k_parts_of_speech), 0, 0, 1, 1},
  {&__pyx_n_u_person, __pyx_k_person, sizeof(__pyx_k_person), 0, 1, 0, 1},
  {&__pyx_n_u_polarity, __pyx_k_polarity, sizeof(__pyx_k_polarity), 0, 1, 0, 1},
  {&__pyx_n_u_polite, __pyx_k_polite, sizeof(__pyx_k_polite), 0, 1, 0, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_u_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 1, 0, 1},
  {&__pyx_n_u_poss, __pyx_k_poss, sizeof(__pyx_k_poss), 0, 1, 0, 1},
  {&__pyx_n_u_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 1, 0, 1},
  {&__pyx_n_u_prep_case, __pyx_k_prep_case, sizeof(__pyx_k_prep_case), 0, 1, 0, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_u_pron_type, __pyx_k_pron_type, sizeof(__pyx_k_pron_type), 0, 1, 0, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_props, __pyx_k_props, sizeof(__pyx_k_props), 0, 0, 1, 1},
  {&__pyx_n_u_punct_side, __pyx_k_punct_side, sizeof(__pyx_k_punct_side), 0, 1, 0, 1},
  {&__pyx_n_u_punct_type, __pyx_k_punct_type, sizeof(__pyx_k_punct_type), 0, 1, 0, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_u_reflex, __pyx_k_reflex, sizeof(__pyx_k_reflex), 0, 1, 0, 1},
  {&__pyx_n_s_seen_fields, __pyx_k_seen_fields, sizeof(__pyx_k_seen_fields), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {&__pyx_n_s_spacy_morphology, __pyx_k_spacy_morphology, sizeof(__pyx_k_spacy_morphology), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_srsly, __pyx_k_srsly, sizeof(__pyx_k_srsly), 0, 0, 1, 1},
  {&__pyx_n_s_string_store, __pyx_k_string_store, sizeof(__pyx_k_string_store), 0, 0, 1, 1},
  {&__pyx_n_s_strings, __pyx_k_strings, sizeof(__pyx_k_strings), 0, 0, 1, 1},
  {&__pyx_n_u_style, __pyx_k_style, sizeof(__pyx_k_style), 0, 1, 0, 1},
  {&__pyx_n_u_style_variant, __pyx_k_style_variant, sizeof(__pyx_k_style_variant), 0, 1, 0, 1},
  {&__pyx_n_s_symbols, __pyx_k_symbols, sizeof(__pyx_k_symbols), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_tag_map, __pyx_k_tag_map, sizeof(__pyx_k_tag_map), 0, 0, 1, 1},
  {&__pyx_n_s_tag_str, __pyx_k_tag_str, sizeof(__pyx_k_tag_str), 0, 0, 1, 1},
  {&__pyx_n_u_tense, __pyx_k_tense, sizeof(__pyx_k_tense), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_u_typo, __pyx_k_typo, sizeof(__pyx_k_typo), 0, 1, 0, 1},
  {&__pyx_n_s_univ_pos, __pyx_k_univ_pos, sizeof(__pyx_k_univ_pos), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_u_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 1, 0, 1},
  {&__pyx_n_s_util, __pyx_k_util, sizeof(__pyx_k_util), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_u_verb_form, __pyx_k_verb_form, sizeof(__pyx_k_verb_form), 0, 1, 0, 1},
  {&__pyx_n_u_verb_type, __pyx_k_verb_type, sizeof(__pyx_k_verb_type), 0, 1, 0, 1},
  {&__pyx_n_u_voice, __pyx_k_voice, sizeof(__pyx_k_voice), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 133, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 359, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 285, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 856, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1038, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "spacy/morphology.pyx":108
 *         seen_fields = set()
 *         for feature in features:
 *             field = feature.split("_", 1)[0]             # <<<<<<<<<<<<<<
 *             if field not in seen_fields:
 *                 self.fields.append(field)
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_n_u__2, __pyx_int_1); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../../../python37-x64/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "spacy/morphology.pyx":68
 * 
 * 
 * def _normalize_props(props):             # <<<<<<<<<<<<<<
 *     """Transform deprecated string keys to correct names."""
 *     out = {}
 */
  __pyx_tuple__12 = PyTuple_Pack(5, __pyx_n_s_props, __pyx_n_s_out, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_attr); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_morphology_pyx, __pyx_n_s_normalize_props, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 68, __pyx_L1_error)

  /* "spacy/morphology.pyx":101
 * 
 * 
 * class MorphologyClassMap(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, features):
 *         self.features = tuple(features)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "spacy/morphology.pyx":102
 * 
 * class MorphologyClassMap(object):
 *     def __init__(self, features):             # <<<<<<<<<<<<<<
 *         self.features = tuple(features)
 *         self.fields = []
 */
  __pyx_tuple__15 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_features, __pyx_n_s_seen_fields, __pyx_n_s_feature, __pyx_n_s_field, __pyx_n_s_offset, __pyx_n_s_name_2, __pyx_n_s_field, __pyx_n_s_field_id); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_morphology_pyx, __pyx_n_s_init, 102, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 102, __pyx_L1_error)

  /* "spacy/morphology.pyx":134
 * 
 *     @property
 *     def field_sizes(self):             # <<<<<<<<<<<<<<
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_field); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_morphology_pyx, __pyx_n_s_field_sizes, 134, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 134, __pyx_L1_error)

  /* "spacy/morphology.pyx":137
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 *     def get_field_offset(self, field):             # <<<<<<<<<<<<<<
 *         return self.field2col[field]
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_field); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_morphology_pyx, __pyx_n_s_get_field_offset, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_8genexpr5__pyx_v_5spacy_10morphology_f = Py_None; Py_INCREF(Py_None);
  __pyx_8genexpr6__pyx_v_5spacy_10morphology_f = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("check_feature", (void (*)(void))__pyx_f_5spacy_10morphology_check_feature, "int (struct __pyx_t_5spacy_7structs_MorphAnalysisC const *, __pyx_t_5spacy_8typedefs_attr_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_field", (void (*)(void))__pyx_f_5spacy_10morphology_get_field, "__pyx_t_5spacy_8typedefs_attr_t (struct __pyx_t_5spacy_7structs_MorphAnalysisC const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("list_features", (void (*)(void))__pyx_f_5spacy_10morphology_list_features, "PyObject *(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("tag_to_json", (void (*)(void))__pyx_f_5spacy_10morphology_tag_to_json, "PyObject *(struct __pyx_t_5spacy_7structs_MorphAnalysisC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5spacy_10morphology_Morphology = &__pyx_vtable_5spacy_10morphology_Morphology;
  __pyx_vtable_5spacy_10morphology_Morphology.update = (PyObject *(*)(struct __pyx_obj_5spacy_10morphology_Morphology *, __pyx_t_5spacy_8typedefs_hash_t, PyObject *, int __pyx_skip_dispatch))__pyx_f_5spacy_10morphology_10Morphology_update;
  __pyx_vtable_5spacy_10morphology_Morphology.insert = (__pyx_t_5spacy_8typedefs_hash_t (*)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_MorphAnalysisC))__pyx_f_5spacy_10morphology_10Morphology_insert;
  __pyx_vtable_5spacy_10morphology_Morphology.assign_untagged = (int (*)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *))__pyx_f_5spacy_10morphology_10Morphology_assign_untagged;
  __pyx_vtable_5spacy_10morphology_Morphology.assign_tag = (int (*)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, PyObject *))__pyx_f_5spacy_10morphology_10Morphology_assign_tag;
  __pyx_vtable_5spacy_10morphology_Morphology.assign_tag_id = (int (*)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, int))__pyx_f_5spacy_10morphology_10Morphology_assign_tag_id;
  __pyx_vtable_5spacy_10morphology_Morphology._assign_tag_from_exceptions = (int (*)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, int))__pyx_f_5spacy_10morphology_10Morphology__assign_tag_from_exceptions;
  if (PyType_Ready(&__pyx_type_5spacy_10morphology_Morphology) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5spacy_10morphology_Morphology.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5spacy_10morphology_Morphology.tp_dictoffset && __pyx_type_5spacy_10morphology_Morphology.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5spacy_10morphology_Morphology.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5spacy_10morphology_Morphology.tp_dict, __pyx_vtabptr_5spacy_10morphology_Morphology) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Morphology, (PyObject *)&__pyx_type_5spacy_10morphology_Morphology) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_ptype_5spacy_10morphology_Morphology = &__pyx_type_5spacy_10morphology_Morphology;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cymem.cymem"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5cymem_5cymem_PyMalloc = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "PyMalloc", sizeof(struct __pyx_obj_5cymem_5cymem_PyMalloc), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_PyMalloc) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_PyMalloc = (struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_PyMalloc->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_PyMalloc)) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_PyFree = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "PyFree", sizeof(struct __pyx_obj_5cymem_5cymem_PyFree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_PyFree) __PYX_ERR(4, 10, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_PyFree = (struct __pyx_vtabstruct_5cymem_5cymem_PyFree*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_PyFree->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_PyFree)) __PYX_ERR(4, 10, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_Pool) __PYX_ERR(4, 16, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) __PYX_ERR(4, 16, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_Address) __PYX_ERR(4, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("preshed.maps"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7preshed_4maps_PreshMap = __Pyx_ImportType(__pyx_t_1, "preshed.maps", "PreshMap", sizeof(struct __pyx_obj_7preshed_4maps_PreshMap), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7preshed_4maps_PreshMap) __PYX_ERR(5, 45, __pyx_L1_error)
  __pyx_vtabptr_7preshed_4maps_PreshMap = (struct __pyx_vtabstruct_7preshed_4maps_PreshMap*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMap->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMap)) __PYX_ERR(5, 45, __pyx_L1_error)
  __pyx_ptype_7preshed_4maps_PreshMapArray = __Pyx_ImportType(__pyx_t_1, "preshed.maps", "PreshMapArray", sizeof(struct __pyx_obj_7preshed_4maps_PreshMapArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7preshed_4maps_PreshMapArray) __PYX_ERR(5, 53, __pyx_L1_error)
  __pyx_vtabptr_7preshed_4maps_PreshMapArray = (struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMapArray->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMapArray)) __PYX_ERR(5, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("spacy.strings"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5spacy_7strings_StringStore = __Pyx_ImportType(__pyx_t_1, "spacy.strings", "StringStore", sizeof(struct __pyx_obj_5spacy_7strings_StringStore), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5spacy_7strings_StringStore) __PYX_ERR(6, 23, __pyx_L1_error)
  __pyx_vtabptr_5spacy_7strings_StringStore = (struct __pyx_vtabstruct_5spacy_7strings_StringStore*)__Pyx_GetVtable(__pyx_ptype_5spacy_7strings_StringStore->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_7strings_StringStore)) __PYX_ERR(6, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("spacy.vocab"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5spacy_5vocab_Vocab = __Pyx_ImportType(__pyx_t_1, "spacy.vocab", "Vocab", sizeof(struct __pyx_obj_5spacy_5vocab_Vocab), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5spacy_5vocab_Vocab) __PYX_ERR(7, 27, __pyx_L1_error)
  __pyx_vtabptr_5spacy_5vocab_Vocab = (struct __pyx_vtabstruct_5spacy_5vocab_Vocab*)__Pyx_GetVtable(__pyx_ptype_5spacy_5vocab_Vocab->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_5vocab_Vocab)) __PYX_ERR(7, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("spacy.lexeme"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5spacy_6lexeme_Lexeme = __Pyx_ImportType(__pyx_t_1, "spacy.lexeme", "Lexeme", sizeof(struct __pyx_obj_5spacy_6lexeme_Lexeme), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5spacy_6lexeme_Lexeme) __PYX_ERR(3, 14, __pyx_L1_error)
  __pyx_vtabptr_5spacy_6lexeme_Lexeme = (struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme*)__Pyx_GetVtable(__pyx_ptype_5spacy_6lexeme_Lexeme->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_6lexeme_Lexeme)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("spacy.vocab"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "EMPTY_LEXEME", (void **)&__pyx_vp_5spacy_5vocab_EMPTY_LEXEME, "struct __pyx_t_5spacy_7structs_LexemeC") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = PyImport_ImportModule("spacy.lexeme"); if (!__pyx_t_2) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_2, "EMPTY_LEXEME", (void **)&__pyx_vp_5spacy_6lexeme_EMPTY_LEXEME, "struct __pyx_t_5spacy_7structs_LexemeC") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("murmurhash.mrmr"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "hash64", (void (**)(void))&__pyx_f_10murmurhash_4mrmr_hash64, "uint64_t (void *, int, uint64_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmorphology(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmorphology(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_morphology(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_morphology(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_morphology(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'morphology' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_morphology(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("morphology", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_spacy__morphology) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "spacy.morphology")) {
      if (unlikely(PyDict_SetItemString(modules, "spacy.morphology", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_variable_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "spacy/morphology.pyx":6
 * 
 * from libc.string cimport memset
 * import srsly             # <<<<<<<<<<<<<<
 * from collections import Counter
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_srsly, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_srsly, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":7
 * from libc.string cimport memset
 * import srsly
 * from collections import Counter             # <<<<<<<<<<<<<<
 * 
 * from .compat import basestring_
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Counter);
  __Pyx_GIVEREF(__pyx_n_s_Counter);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Counter);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Counter, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":9
 * from collections import Counter
 * 
 * from .compat import basestring_             # <<<<<<<<<<<<<<
 * from .strings import get_string_id
 * from . import symbols
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_basestring);
  __Pyx_GIVEREF(__pyx_n_s_basestring);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_basestring);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_compat, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_basestring); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_basestring, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":10
 * 
 * from .compat import basestring_
 * from .strings import get_string_id             # <<<<<<<<<<<<<<
 * from . import symbols
 * from .attrs cimport POS, IS_SPACE
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_get_string_id);
  __Pyx_GIVEREF(__pyx_n_s_get_string_id);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_get_string_id);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_strings, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_get_string_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_string_id, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":11
 * from .compat import basestring_
 * from .strings import get_string_id
 * from . import symbols             # <<<<<<<<<<<<<<
 * from .attrs cimport POS, IS_SPACE
 * from .attrs import LEMMA, intify_attrs
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_symbols);
  __Pyx_GIVEREF(__pyx_n_s_symbols);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_symbols);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s__11, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_symbols); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_symbols, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":13
 * from . import symbols
 * from .attrs cimport POS, IS_SPACE
 * from .attrs import LEMMA, intify_attrs             # <<<<<<<<<<<<<<
 * from .parts_of_speech cimport SPACE
 * from .parts_of_speech import IDS as POS_IDS
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LEMMA);
  __Pyx_GIVEREF(__pyx_n_s_LEMMA);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LEMMA);
  __Pyx_INCREF(__pyx_n_s_intify_attrs);
  __Pyx_GIVEREF(__pyx_n_s_intify_attrs);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_intify_attrs);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_attrs, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LEMMA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LEMMA, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_intify_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intify_attrs, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":15
 * from .attrs import LEMMA, intify_attrs
 * from .parts_of_speech cimport SPACE
 * from .parts_of_speech import IDS as POS_IDS             # <<<<<<<<<<<<<<
 * from .lexeme cimport Lexeme
 * from .errors import Errors
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_IDS);
  __Pyx_GIVEREF(__pyx_n_s_IDS);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_IDS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_parts_of_speech, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_IDS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POS_IDS, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":17
 * from .parts_of_speech import IDS as POS_IDS
 * from .lexeme cimport Lexeme
 * from .errors import Errors             # <<<<<<<<<<<<<<
 * from .util import ensure_path
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Errors);
  __Pyx_GIVEREF(__pyx_n_s_Errors);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Errors);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Errors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Errors, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":18
 * from .lexeme cimport Lexeme
 * from .errors import Errors
 * from .util import ensure_path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ensure_path);
  __Pyx_GIVEREF(__pyx_n_s_ensure_path);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ensure_path);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_util, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ensure_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ensure_path, __pyx_t_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":68
 * 
 * 
 * def _normalize_props(props):             # <<<<<<<<<<<<<<
 *     """Transform deprecated string keys to correct names."""
 *     out = {}
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5spacy_10morphology_1_normalize_props, NULL, __pyx_n_s_spacy_morphology); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalize_props, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":101
 * 
 * 
 * class MorphologyClassMap(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, features):
 *         self.features = tuple(features)
 */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_tuple__14, __pyx_n_s_MorphologyClassMap, __pyx_n_s_MorphologyClassMap, (PyObject *) NULL, __pyx_n_s_spacy_morphology, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "spacy/morphology.pyx":102
 * 
 * class MorphologyClassMap(object):
 *     def __init__(self, features):             # <<<<<<<<<<<<<<
 *         self.features = tuple(features)
 *         self.fields = []
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5spacy_10morphology_18MorphologyClassMap_1__init__, 0, __pyx_n_s_MorphologyClassMap___init, NULL, __pyx_n_s_spacy_morphology, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_3) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy/morphology.pyx":134
 * 
 *     @property
 *     def field_sizes(self):             # <<<<<<<<<<<<<<
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5spacy_10morphology_18MorphologyClassMap_3field_sizes, 0, __pyx_n_s_MorphologyClassMap_field_sizes, NULL, __pyx_n_s_spacy_morphology, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "spacy/morphology.pyx":133
 *             self.feat2offset[feature] = offset
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def field_sizes(self):
 *         return [len(self.field2feats[field]) for field in self.fields]
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_field_sizes, __pyx_t_4) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":137
 *         return [len(self.field2feats[field]) for field in self.fields]
 * 
 *     def get_field_offset(self, field):             # <<<<<<<<<<<<<<
 *         return self.field2col[field]
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5spacy_10morphology_18MorphologyClassMap_5get_field_offset, 0, __pyx_n_s_MorphologyClassMap_get_field_off, NULL, __pyx_n_s_spacy_morphology, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_get_field_offset, __pyx_t_4) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/morphology.pyx":101
 * 
 * 
 * class MorphologyClassMap(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, features):
 *         self.features = tuple(features)
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_MorphologyClassMap, __pyx_tuple__14, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MorphologyClassMap, __pyx_t_4) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":330
 * 
 *     @classmethod
 *     def create_class_map(cls):             # <<<<<<<<<<<<<<
 *         return MorphologyClassMap(FEATURES)
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5spacy_10morphology_Morphology, __pyx_n_s_create_class_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "spacy/morphology.pyx":329
 *                 self.add_special_case(tag_str, form_str, attrs)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def create_class_map(cls):
 *         return MorphologyClassMap(FEATURES)
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5spacy_10morphology_Morphology->tp_dict, __pyx_n_s_create_class_map, __pyx_t_2) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5spacy_10morphology_Morphology);

  /* "spacy/morphology.pyx":733
 * 
 * FIELDS = {
 *     'POS': Field_POS,             # <<<<<<<<<<<<<<
 *     'Abbr': Field_Abbr,
 *     'AdpType': Field_AdpType,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_POS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_POS, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":734
 * FIELDS = {
 *     'POS': Field_POS,
 *     'Abbr': Field_Abbr,             # <<<<<<<<<<<<<<
 *     'AdpType': Field_AdpType,
 *     'AdvType': Field_AdvType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Abbr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Abbr, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":735
 *     'POS': Field_POS,
 *     'Abbr': Field_Abbr,
 *     'AdpType': Field_AdpType,             # <<<<<<<<<<<<<<
 *     'AdvType': Field_AdvType,
 *     'Animacy': Field_Animacy,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_AdpType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_AdpType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":736
 *     'Abbr': Field_Abbr,
 *     'AdpType': Field_AdpType,
 *     'AdvType': Field_AdvType,             # <<<<<<<<<<<<<<
 *     'Animacy': Field_Animacy,
 *     'Aspect': Field_Aspect,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_AdvType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_AdvType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":737
 *     'AdpType': Field_AdpType,
 *     'AdvType': Field_AdvType,
 *     'Animacy': Field_Animacy,             # <<<<<<<<<<<<<<
 *     'Aspect': Field_Aspect,
 *     'Case': Field_Case,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Animacy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Animacy, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":738
 *     'AdvType': Field_AdvType,
 *     'Animacy': Field_Animacy,
 *     'Aspect': Field_Aspect,             # <<<<<<<<<<<<<<
 *     'Case': Field_Case,
 *     'ConjType': Field_ConjType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Aspect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Aspect, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":739
 *     'Animacy': Field_Animacy,
 *     'Aspect': Field_Aspect,
 *     'Case': Field_Case,             # <<<<<<<<<<<<<<
 *     'ConjType': Field_ConjType,
 *     'Connegative': Field_Connegative,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Case); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Case, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":740
 *     'Aspect': Field_Aspect,
 *     'Case': Field_Case,
 *     'ConjType': Field_ConjType,             # <<<<<<<<<<<<<<
 *     'Connegative': Field_Connegative,
 *     'Definite': Field_Definite,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_ConjType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_ConjType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":741
 *     'Case': Field_Case,
 *     'ConjType': Field_ConjType,
 *     'Connegative': Field_Connegative,             # <<<<<<<<<<<<<<
 *     'Definite': Field_Definite,
 *     'Degree': Field_Degree,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Connegative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Connegative, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":742
 *     'ConjType': Field_ConjType,
 *     'Connegative': Field_Connegative,
 *     'Definite': Field_Definite,             # <<<<<<<<<<<<<<
 *     'Degree': Field_Degree,
 *     'Derivation': Field_Derivation,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Definite); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Definite, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":743
 *     'Connegative': Field_Connegative,
 *     'Definite': Field_Definite,
 *     'Degree': Field_Degree,             # <<<<<<<<<<<<<<
 *     'Derivation': Field_Derivation,
 *     'Echo': Field_Echo,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Degree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Degree, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":744
 *     'Definite': Field_Definite,
 *     'Degree': Field_Degree,
 *     'Derivation': Field_Derivation,             # <<<<<<<<<<<<<<
 *     'Echo': Field_Echo,
 *     'Foreign': Field_Foreign,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Derivation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Derivation, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":745
 *     'Degree': Field_Degree,
 *     'Derivation': Field_Derivation,
 *     'Echo': Field_Echo,             # <<<<<<<<<<<<<<
 *     'Foreign': Field_Foreign,
 *     'Gender': Field_Gender,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Echo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Echo, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":746
 *     'Derivation': Field_Derivation,
 *     'Echo': Field_Echo,
 *     'Foreign': Field_Foreign,             # <<<<<<<<<<<<<<
 *     'Gender': Field_Gender,
 *     'Hyph': Field_Hyph,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Foreign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Foreign, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":747
 *     'Echo': Field_Echo,
 *     'Foreign': Field_Foreign,
 *     'Gender': Field_Gender,             # <<<<<<<<<<<<<<
 *     'Hyph': Field_Hyph,
 *     'InfForm': Field_InfForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Gender); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Gender, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":748
 *     'Foreign': Field_Foreign,
 *     'Gender': Field_Gender,
 *     'Hyph': Field_Hyph,             # <<<<<<<<<<<<<<
 *     'InfForm': Field_InfForm,
 *     'Mood': Field_Mood,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Hyph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Hyph, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":749
 *     'Gender': Field_Gender,
 *     'Hyph': Field_Hyph,
 *     'InfForm': Field_InfForm,             # <<<<<<<<<<<<<<
 *     'Mood': Field_Mood,
 *     'NameType': Field_NameType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_InfForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_InfForm, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":750
 *     'Hyph': Field_Hyph,
 *     'InfForm': Field_InfForm,
 *     'Mood': Field_Mood,             # <<<<<<<<<<<<<<
 *     'NameType': Field_NameType,
 *     'Negative': Field_Negative,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Mood); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Mood, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":751
 *     'InfForm': Field_InfForm,
 *     'Mood': Field_Mood,
 *     'NameType': Field_NameType,             # <<<<<<<<<<<<<<
 *     'Negative': Field_Negative,
 *     'NounType': Field_NounType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NameType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_NameType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":752
 *     'Mood': Field_Mood,
 *     'NameType': Field_NameType,
 *     'Negative': Field_Negative,             # <<<<<<<<<<<<<<
 *     'NounType': Field_NounType,
 *     'Number': Field_Number,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Negative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Negative, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":753
 *     'NameType': Field_NameType,
 *     'Negative': Field_Negative,
 *     'NounType': Field_NounType,             # <<<<<<<<<<<<<<
 *     'Number': Field_Number,
 *     'NumForm': Field_NumForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NounType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_NounType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":754
 *     'Negative': Field_Negative,
 *     'NounType': Field_NounType,
 *     'Number': Field_Number,             # <<<<<<<<<<<<<<
 *     'NumForm': Field_NumForm,
 *     'NumType': Field_NumType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Number, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":755
 *     'NounType': Field_NounType,
 *     'Number': Field_Number,
 *     'NumForm': Field_NumForm,             # <<<<<<<<<<<<<<
 *     'NumType': Field_NumType,
 *     'NumValue': Field_NumValue,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NumForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_NumForm, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":756
 *     'Number': Field_Number,
 *     'NumForm': Field_NumForm,
 *     'NumType': Field_NumType,             # <<<<<<<<<<<<<<
 *     'NumValue': Field_NumValue,
 *     'PartForm': Field_PartForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NumType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_NumType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":757
 *     'NumForm': Field_NumForm,
 *     'NumType': Field_NumType,
 *     'NumValue': Field_NumValue,             # <<<<<<<<<<<<<<
 *     'PartForm': Field_PartForm,
 *     'PartType': Field_PartType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NumValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_NumValue, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":758
 *     'NumType': Field_NumType,
 *     'NumValue': Field_NumValue,
 *     'PartForm': Field_PartForm,             # <<<<<<<<<<<<<<
 *     'PartType': Field_PartType,
 *     'Person': Field_Person,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PartForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_PartForm, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":759
 *     'NumValue': Field_NumValue,
 *     'PartForm': Field_PartForm,
 *     'PartType': Field_PartType,             # <<<<<<<<<<<<<<
 *     'Person': Field_Person,
 *     'Polite': Field_Polite,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PartType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_PartType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":760
 *     'PartForm': Field_PartForm,
 *     'PartType': Field_PartType,
 *     'Person': Field_Person,             # <<<<<<<<<<<<<<
 *     'Polite': Field_Polite,
 *     'Polarity': Field_Polarity,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Person); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Person, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":761
 *     'PartType': Field_PartType,
 *     'Person': Field_Person,
 *     'Polite': Field_Polite,             # <<<<<<<<<<<<<<
 *     'Polarity': Field_Polarity,
 *     'Poss': Field_Poss,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Polite); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Polite, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":762
 *     'Person': Field_Person,
 *     'Polite': Field_Polite,
 *     'Polarity': Field_Polarity,             # <<<<<<<<<<<<<<
 *     'Poss': Field_Poss,
 *     'Prefix': Field_Prefix,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Polarity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Polarity, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":763
 *     'Polite': Field_Polite,
 *     'Polarity': Field_Polarity,
 *     'Poss': Field_Poss,             # <<<<<<<<<<<<<<
 *     'Prefix': Field_Prefix,
 *     'PrepCase': Field_PrepCase,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Poss); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Poss, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":764
 *     'Polarity': Field_Polarity,
 *     'Poss': Field_Poss,
 *     'Prefix': Field_Prefix,             # <<<<<<<<<<<<<<
 *     'PrepCase': Field_PrepCase,
 *     'PronType': Field_PronType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Prefix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Prefix, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":765
 *     'Poss': Field_Poss,
 *     'Prefix': Field_Prefix,
 *     'PrepCase': Field_PrepCase,             # <<<<<<<<<<<<<<
 *     'PronType': Field_PronType,
 *     'PunctSide': Field_PunctSide,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PrepCase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_PrepCase, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":766
 *     'Prefix': Field_Prefix,
 *     'PrepCase': Field_PrepCase,
 *     'PronType': Field_PronType,             # <<<<<<<<<<<<<<
 *     'PunctSide': Field_PunctSide,
 *     'PunctType': Field_PunctType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PronType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_PronType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":767
 *     'PrepCase': Field_PrepCase,
 *     'PronType': Field_PronType,
 *     'PunctSide': Field_PunctSide,             # <<<<<<<<<<<<<<
 *     'PunctType': Field_PunctType,
 *     'Reflex': Field_Reflex,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PunctSide); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_PunctSide, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":768
 *     'PronType': Field_PronType,
 *     'PunctSide': Field_PunctSide,
 *     'PunctType': Field_PunctType,             # <<<<<<<<<<<<<<
 *     'Reflex': Field_Reflex,
 *     'Style': Field_Style,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PunctType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_PunctType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":769
 *     'PunctSide': Field_PunctSide,
 *     'PunctType': Field_PunctType,
 *     'Reflex': Field_Reflex,             # <<<<<<<<<<<<<<
 *     'Style': Field_Style,
 *     'StyleVariant': Field_StyleVariant,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Reflex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Reflex, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":770
 *     'PunctType': Field_PunctType,
 *     'Reflex': Field_Reflex,
 *     'Style': Field_Style,             # <<<<<<<<<<<<<<
 *     'StyleVariant': Field_StyleVariant,
 *     'Tense': Field_Tense,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Style); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Style, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":771
 *     'Reflex': Field_Reflex,
 *     'Style': Field_Style,
 *     'StyleVariant': Field_StyleVariant,             # <<<<<<<<<<<<<<
 *     'Tense': Field_Tense,
 *     'Typo': Field_Typo,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_StyleVariant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_StyleVariant, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":772
 *     'Style': Field_Style,
 *     'StyleVariant': Field_StyleVariant,
 *     'Tense': Field_Tense,             # <<<<<<<<<<<<<<
 *     'Typo': Field_Typo,
 *     'VerbForm': Field_VerbForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Tense); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Tense, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":773
 *     'StyleVariant': Field_StyleVariant,
 *     'Tense': Field_Tense,
 *     'Typo': Field_Typo,             # <<<<<<<<<<<<<<
 *     'VerbForm': Field_VerbForm,
 *     'VerbType': Field_VerbType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Typo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Typo, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":774
 *     'Tense': Field_Tense,
 *     'Typo': Field_Typo,
 *     'VerbForm': Field_VerbForm,             # <<<<<<<<<<<<<<
 *     'VerbType': Field_VerbType,
 *     'Voice': Field_Voice,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_VerbForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_VerbForm, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":775
 *     'Typo': Field_Typo,
 *     'VerbForm': Field_VerbForm,
 *     'VerbType': Field_VerbType,             # <<<<<<<<<<<<<<
 *     'Voice': Field_Voice,
 * }
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_VerbType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_VerbType, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":776
 *     'VerbForm': Field_VerbForm,
 *     'VerbType': Field_VerbType,
 *     'Voice': Field_Voice,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Voice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_Voice, __pyx_t_1) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FIELDS, __pyx_t_2) < 0) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":780
 * 
 * LOWER_FIELDS = {
 *     'pos': Field_POS,             # <<<<<<<<<<<<<<
 *     'abbr': Field_Abbr,
 *     'adp_type': Field_AdpType,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_POS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_pos, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":781
 * LOWER_FIELDS = {
 *     'pos': Field_POS,
 *     'abbr': Field_Abbr,             # <<<<<<<<<<<<<<
 *     'adp_type': Field_AdpType,
 *     'adv_type': Field_AdvType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Abbr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_abbr, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":782
 *     'pos': Field_POS,
 *     'abbr': Field_Abbr,
 *     'adp_type': Field_AdpType,             # <<<<<<<<<<<<<<
 *     'adv_type': Field_AdvType,
 *     'animacy': Field_Animacy,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_AdpType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_adp_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":783
 *     'abbr': Field_Abbr,
 *     'adp_type': Field_AdpType,
 *     'adv_type': Field_AdvType,             # <<<<<<<<<<<<<<
 *     'animacy': Field_Animacy,
 *     'aspect': Field_Aspect,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_AdvType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_adv_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":784
 *     'adp_type': Field_AdpType,
 *     'adv_type': Field_AdvType,
 *     'animacy': Field_Animacy,             # <<<<<<<<<<<<<<
 *     'aspect': Field_Aspect,
 *     'case': Field_Case,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Animacy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_animacy, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":785
 *     'adv_type': Field_AdvType,
 *     'animacy': Field_Animacy,
 *     'aspect': Field_Aspect,             # <<<<<<<<<<<<<<
 *     'case': Field_Case,
 *     'conj_type': Field_ConjType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Aspect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_aspect, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":786
 *     'animacy': Field_Animacy,
 *     'aspect': Field_Aspect,
 *     'case': Field_Case,             # <<<<<<<<<<<<<<
 *     'conj_type': Field_ConjType,
 *     'connegative': Field_Connegative,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Case); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_case, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":787
 *     'aspect': Field_Aspect,
 *     'case': Field_Case,
 *     'conj_type': Field_ConjType,             # <<<<<<<<<<<<<<
 *     'connegative': Field_Connegative,
 *     'definite': Field_Definite,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_ConjType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_conj_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":788
 *     'case': Field_Case,
 *     'conj_type': Field_ConjType,
 *     'connegative': Field_Connegative,             # <<<<<<<<<<<<<<
 *     'definite': Field_Definite,
 *     'degree': Field_Degree,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Connegative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_connegative, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":789
 *     'conj_type': Field_ConjType,
 *     'connegative': Field_Connegative,
 *     'definite': Field_Definite,             # <<<<<<<<<<<<<<
 *     'degree': Field_Degree,
 *     'derivation': Field_Derivation,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Definite); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_definite, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":790
 *     'connegative': Field_Connegative,
 *     'definite': Field_Definite,
 *     'degree': Field_Degree,             # <<<<<<<<<<<<<<
 *     'derivation': Field_Derivation,
 *     'echo': Field_Echo,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Degree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_degree, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":791
 *     'definite': Field_Definite,
 *     'degree': Field_Degree,
 *     'derivation': Field_Derivation,             # <<<<<<<<<<<<<<
 *     'echo': Field_Echo,
 *     'foreign': Field_Foreign,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Derivation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_derivation, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":792
 *     'degree': Field_Degree,
 *     'derivation': Field_Derivation,
 *     'echo': Field_Echo,             # <<<<<<<<<<<<<<
 *     'foreign': Field_Foreign,
 *     'gender': Field_Gender,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Echo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_echo, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":793
 *     'derivation': Field_Derivation,
 *     'echo': Field_Echo,
 *     'foreign': Field_Foreign,             # <<<<<<<<<<<<<<
 *     'gender': Field_Gender,
 *     'hyph': Field_Hyph,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Foreign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_foreign, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":794
 *     'echo': Field_Echo,
 *     'foreign': Field_Foreign,
 *     'gender': Field_Gender,             # <<<<<<<<<<<<<<
 *     'hyph': Field_Hyph,
 *     'inf_form': Field_InfForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Gender); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_gender, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":795
 *     'foreign': Field_Foreign,
 *     'gender': Field_Gender,
 *     'hyph': Field_Hyph,             # <<<<<<<<<<<<<<
 *     'inf_form': Field_InfForm,
 *     'mood': Field_Mood,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Hyph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_hyph, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":796
 *     'gender': Field_Gender,
 *     'hyph': Field_Hyph,
 *     'inf_form': Field_InfForm,             # <<<<<<<<<<<<<<
 *     'mood': Field_Mood,
 *     'name_type': Field_NameType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_InfForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_inf_form, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":797
 *     'hyph': Field_Hyph,
 *     'inf_form': Field_InfForm,
 *     'mood': Field_Mood,             # <<<<<<<<<<<<<<
 *     'name_type': Field_NameType,
 *     'negative': Field_Negative,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Mood); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_mood, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":798
 *     'inf_form': Field_InfForm,
 *     'mood': Field_Mood,
 *     'name_type': Field_NameType,             # <<<<<<<<<<<<<<
 *     'negative': Field_Negative,
 *     'noun_type': Field_NounType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NameType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_name_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":799
 *     'mood': Field_Mood,
 *     'name_type': Field_NameType,
 *     'negative': Field_Negative,             # <<<<<<<<<<<<<<
 *     'noun_type': Field_NounType,
 *     'number': Field_Number,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Negative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_negative, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":800
 *     'name_type': Field_NameType,
 *     'negative': Field_Negative,
 *     'noun_type': Field_NounType,             # <<<<<<<<<<<<<<
 *     'number': Field_Number,
 *     'num_form': Field_NumForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NounType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_noun_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":801
 *     'negative': Field_Negative,
 *     'noun_type': Field_NounType,
 *     'number': Field_Number,             # <<<<<<<<<<<<<<
 *     'num_form': Field_NumForm,
 *     'num_type': Field_NumType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_number, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":802
 *     'noun_type': Field_NounType,
 *     'number': Field_Number,
 *     'num_form': Field_NumForm,             # <<<<<<<<<<<<<<
 *     'num_type': Field_NumType,
 *     'num_value': Field_NumValue,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NumForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_num_form, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":803
 *     'number': Field_Number,
 *     'num_form': Field_NumForm,
 *     'num_type': Field_NumType,             # <<<<<<<<<<<<<<
 *     'num_value': Field_NumValue,
 *     'part_form': Field_PartForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NumType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_num_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":804
 *     'num_form': Field_NumForm,
 *     'num_type': Field_NumType,
 *     'num_value': Field_NumValue,             # <<<<<<<<<<<<<<
 *     'part_form': Field_PartForm,
 *     'part_type': Field_PartType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_NumValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_num_value, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":805
 *     'num_type': Field_NumType,
 *     'num_value': Field_NumValue,
 *     'part_form': Field_PartForm,             # <<<<<<<<<<<<<<
 *     'part_type': Field_PartType,
 *     'person': Field_Person,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PartForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_part_form, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":806
 *     'num_value': Field_NumValue,
 *     'part_form': Field_PartForm,
 *     'part_type': Field_PartType,             # <<<<<<<<<<<<<<
 *     'person': Field_Person,
 *     'polarity': Field_Polarity,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PartType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_part_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":807
 *     'part_form': Field_PartForm,
 *     'part_type': Field_PartType,
 *     'person': Field_Person,             # <<<<<<<<<<<<<<
 *     'polarity': Field_Polarity,
 *     'polite': Field_Polite,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Person); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_person, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":808
 *     'part_type': Field_PartType,
 *     'person': Field_Person,
 *     'polarity': Field_Polarity,             # <<<<<<<<<<<<<<
 *     'polite': Field_Polite,
 *     'poss': Field_Poss,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Polarity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_polarity, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":809
 *     'person': Field_Person,
 *     'polarity': Field_Polarity,
 *     'polite': Field_Polite,             # <<<<<<<<<<<<<<
 *     'poss': Field_Poss,
 *     'prefix': Field_Prefix,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Polite); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_polite, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":810
 *     'polarity': Field_Polarity,
 *     'polite': Field_Polite,
 *     'poss': Field_Poss,             # <<<<<<<<<<<<<<
 *     'prefix': Field_Prefix,
 *     'prep_case': Field_PrepCase,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Poss); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_poss, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":811
 *     'polite': Field_Polite,
 *     'poss': Field_Poss,
 *     'prefix': Field_Prefix,             # <<<<<<<<<<<<<<
 *     'prep_case': Field_PrepCase,
 *     'pron_type': Field_PronType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Prefix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_prefix, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":812
 *     'poss': Field_Poss,
 *     'prefix': Field_Prefix,
 *     'prep_case': Field_PrepCase,             # <<<<<<<<<<<<<<
 *     'pron_type': Field_PronType,
 *     'punct_side': Field_PunctSide,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PrepCase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_prep_case, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":813
 *     'prefix': Field_Prefix,
 *     'prep_case': Field_PrepCase,
 *     'pron_type': Field_PronType,             # <<<<<<<<<<<<<<
 *     'punct_side': Field_PunctSide,
 *     'punct_type': Field_PunctType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PronType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_pron_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":814
 *     'prep_case': Field_PrepCase,
 *     'pron_type': Field_PronType,
 *     'punct_side': Field_PunctSide,             # <<<<<<<<<<<<<<
 *     'punct_type': Field_PunctType,
 *     'reflex': Field_Reflex,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PunctSide); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_punct_side, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":815
 *     'pron_type': Field_PronType,
 *     'punct_side': Field_PunctSide,
 *     'punct_type': Field_PunctType,             # <<<<<<<<<<<<<<
 *     'reflex': Field_Reflex,
 *     'style': Field_Style,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_PunctType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_punct_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":816
 *     'punct_side': Field_PunctSide,
 *     'punct_type': Field_PunctType,
 *     'reflex': Field_Reflex,             # <<<<<<<<<<<<<<
 *     'style': Field_Style,
 *     'style_variant': Field_StyleVariant,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Reflex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_reflex, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":817
 *     'punct_type': Field_PunctType,
 *     'reflex': Field_Reflex,
 *     'style': Field_Style,             # <<<<<<<<<<<<<<
 *     'style_variant': Field_StyleVariant,
 *     'tense': Field_Tense,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Style); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_style, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":818
 *     'reflex': Field_Reflex,
 *     'style': Field_Style,
 *     'style_variant': Field_StyleVariant,             # <<<<<<<<<<<<<<
 *     'tense': Field_Tense,
 *     'typo': Field_Typo,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_StyleVariant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_style_variant, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":819
 *     'style': Field_Style,
 *     'style_variant': Field_StyleVariant,
 *     'tense': Field_Tense,             # <<<<<<<<<<<<<<
 *     'typo': Field_Typo,
 *     'verb_form': Field_VerbForm,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Tense); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_tense, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":820
 *     'style_variant': Field_StyleVariant,
 *     'tense': Field_Tense,
 *     'typo': Field_Typo,             # <<<<<<<<<<<<<<
 *     'verb_form': Field_VerbForm,
 *     'verb_type': Field_VerbType,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Typo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_typo, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":821
 *     'tense': Field_Tense,
 *     'typo': Field_Typo,
 *     'verb_form': Field_VerbForm,             # <<<<<<<<<<<<<<
 *     'verb_type': Field_VerbType,
 *     'voice': Field_Voice,
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_VerbForm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_verb_form, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":822
 *     'typo': Field_Typo,
 *     'verb_form': Field_VerbForm,
 *     'verb_type': Field_VerbType,             # <<<<<<<<<<<<<<
 *     'voice': Field_Voice,
 * }
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_VerbType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_verb_type, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/morphology.pyx":823
 *     'verb_form': Field_VerbForm,
 *     'verb_type': Field_VerbType,
 *     'voice': Field_Voice,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(__pyx_e_5spacy_10morphology_Field_Voice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_voice, __pyx_t_1) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOWER_FIELDS, __pyx_t_2) < 0) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":827
 * 
 * 
 * FEATURES = [             # <<<<<<<<<<<<<<
 *    "POS_ADJ",
 *    "POS_ADP",
 */
  __pyx_t_2 = PyList_New(276); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_POS_ADJ);
  __Pyx_GIVEREF(__pyx_n_u_POS_ADJ);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_POS_ADJ);
  __Pyx_INCREF(__pyx_n_u_POS_ADP);
  __Pyx_GIVEREF(__pyx_n_u_POS_ADP);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_POS_ADP);
  __Pyx_INCREF(__pyx_n_u_POS_ADV);
  __Pyx_GIVEREF(__pyx_n_u_POS_ADV);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_u_POS_ADV);
  __Pyx_INCREF(__pyx_n_u_POS_AUX);
  __Pyx_GIVEREF(__pyx_n_u_POS_AUX);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_u_POS_AUX);
  __Pyx_INCREF(__pyx_n_u_POS_CONJ);
  __Pyx_GIVEREF(__pyx_n_u_POS_CONJ);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_u_POS_CONJ);
  __Pyx_INCREF(__pyx_n_u_POS_CCONJ);
  __Pyx_GIVEREF(__pyx_n_u_POS_CCONJ);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_u_POS_CCONJ);
  __Pyx_INCREF(__pyx_n_u_POS_DET);
  __Pyx_GIVEREF(__pyx_n_u_POS_DET);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_u_POS_DET);
  __Pyx_INCREF(__pyx_n_u_POS_INTJ);
  __Pyx_GIVEREF(__pyx_n_u_POS_INTJ);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_u_POS_INTJ);
  __Pyx_INCREF(__pyx_n_u_POS_NOUN);
  __Pyx_GIVEREF(__pyx_n_u_POS_NOUN);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_u_POS_NOUN);
  __Pyx_INCREF(__pyx_n_u_POS_NUM);
  __Pyx_GIVEREF(__pyx_n_u_POS_NUM);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_u_POS_NUM);
  __Pyx_INCREF(__pyx_n_u_POS_PART);
  __Pyx_GIVEREF(__pyx_n_u_POS_PART);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_u_POS_PART);
  __Pyx_INCREF(__pyx_n_u_POS_PRON);
  __Pyx_GIVEREF(__pyx_n_u_POS_PRON);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_u_POS_PRON);
  __Pyx_INCREF(__pyx_n_u_POS_PROPN);
  __Pyx_GIVEREF(__pyx_n_u_POS_PROPN);
  PyList_SET_ITEM(__pyx_t_2, 12, __pyx_n_u_POS_PROPN);
  __Pyx_INCREF(__pyx_n_u_POS_PUNCT);
  __Pyx_GIVEREF(__pyx_n_u_POS_PUNCT);
  PyList_SET_ITEM(__pyx_t_2, 13, __pyx_n_u_POS_PUNCT);
  __Pyx_INCREF(__pyx_n_u_POS_SCONJ);
  __Pyx_GIVEREF(__pyx_n_u_POS_SCONJ);
  PyList_SET_ITEM(__pyx_t_2, 14, __pyx_n_u_POS_SCONJ);
  __Pyx_INCREF(__pyx_n_u_POS_SYM);
  __Pyx_GIVEREF(__pyx_n_u_POS_SYM);
  PyList_SET_ITEM(__pyx_t_2, 15, __pyx_n_u_POS_SYM);
  __Pyx_INCREF(__pyx_n_u_POS_VERB);
  __Pyx_GIVEREF(__pyx_n_u_POS_VERB);
  PyList_SET_ITEM(__pyx_t_2, 16, __pyx_n_u_POS_VERB);
  __Pyx_INCREF(__pyx_n_u_POS_X);
  __Pyx_GIVEREF(__pyx_n_u_POS_X);
  PyList_SET_ITEM(__pyx_t_2, 17, __pyx_n_u_POS_X);
  __Pyx_INCREF(__pyx_n_u_POS_EOL);
  __Pyx_GIVEREF(__pyx_n_u_POS_EOL);
  PyList_SET_ITEM(__pyx_t_2, 18, __pyx_n_u_POS_EOL);
  __Pyx_INCREF(__pyx_n_u_POS_SPACE);
  __Pyx_GIVEREF(__pyx_n_u_POS_SPACE);
  PyList_SET_ITEM(__pyx_t_2, 19, __pyx_n_u_POS_SPACE);
  __Pyx_INCREF(__pyx_n_u_Abbr_yes);
  __Pyx_GIVEREF(__pyx_n_u_Abbr_yes);
  PyList_SET_ITEM(__pyx_t_2, 20, __pyx_n_u_Abbr_yes);
  __Pyx_INCREF(__pyx_n_u_AdpType_circ);
  __Pyx_GIVEREF(__pyx_n_u_AdpType_circ);
  PyList_SET_ITEM(__pyx_t_2, 21, __pyx_n_u_AdpType_circ);
  __Pyx_INCREF(__pyx_n_u_AdpType_comprep);
  __Pyx_GIVEREF(__pyx_n_u_AdpType_comprep);
  PyList_SET_ITEM(__pyx_t_2, 22, __pyx_n_u_AdpType_comprep);
  __Pyx_INCREF(__pyx_n_u_AdpType_prep);
  __Pyx_GIVEREF(__pyx_n_u_AdpType_prep);
  PyList_SET_ITEM(__pyx_t_2, 23, __pyx_n_u_AdpType_prep);
  __Pyx_INCREF(__pyx_n_u_AdpType_post);
  __Pyx_GIVEREF(__pyx_n_u_AdpType_post);
  PyList_SET_ITEM(__pyx_t_2, 24, __pyx_n_u_AdpType_post);
  __Pyx_INCREF(__pyx_n_u_AdpType_voc);
  __Pyx_GIVEREF(__pyx_n_u_AdpType_voc);
  PyList_SET_ITEM(__pyx_t_2, 25, __pyx_n_u_AdpType_voc);
  __Pyx_INCREF(__pyx_n_u_AdvType_adadj);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_adadj);
  PyList_SET_ITEM(__pyx_t_2, 26, __pyx_n_u_AdvType_adadj);
  __Pyx_INCREF(__pyx_n_u_AdvType_cau);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_cau);
  PyList_SET_ITEM(__pyx_t_2, 27, __pyx_n_u_AdvType_cau);
  __Pyx_INCREF(__pyx_n_u_AdvType_deg);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_deg);
  PyList_SET_ITEM(__pyx_t_2, 28, __pyx_n_u_AdvType_deg);
  __Pyx_INCREF(__pyx_n_u_AdvType_ex);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_ex);
  PyList_SET_ITEM(__pyx_t_2, 29, __pyx_n_u_AdvType_ex);
  __Pyx_INCREF(__pyx_n_u_AdvType_loc);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_loc);
  PyList_SET_ITEM(__pyx_t_2, 30, __pyx_n_u_AdvType_loc);
  __Pyx_INCREF(__pyx_n_u_AdvType_man);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_man);
  PyList_SET_ITEM(__pyx_t_2, 31, __pyx_n_u_AdvType_man);
  __Pyx_INCREF(__pyx_n_u_AdvType_mod);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_mod);
  PyList_SET_ITEM(__pyx_t_2, 32, __pyx_n_u_AdvType_mod);
  __Pyx_INCREF(__pyx_n_u_AdvType_sta);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_sta);
  PyList_SET_ITEM(__pyx_t_2, 33, __pyx_n_u_AdvType_sta);
  __Pyx_INCREF(__pyx_n_u_AdvType_tim);
  __Pyx_GIVEREF(__pyx_n_u_AdvType_tim);
  PyList_SET_ITEM(__pyx_t_2, 34, __pyx_n_u_AdvType_tim);
  __Pyx_INCREF(__pyx_n_u_Animacy_anim);
  __Pyx_GIVEREF(__pyx_n_u_Animacy_anim);
  PyList_SET_ITEM(__pyx_t_2, 35, __pyx_n_u_Animacy_anim);
  __Pyx_INCREF(__pyx_n_u_Animacy_hum);
  __Pyx_GIVEREF(__pyx_n_u_Animacy_hum);
  PyList_SET_ITEM(__pyx_t_2, 36, __pyx_n_u_Animacy_hum);
  __Pyx_INCREF(__pyx_n_u_Animacy_inan);
  __Pyx_GIVEREF(__pyx_n_u_Animacy_inan);
  PyList_SET_ITEM(__pyx_t_2, 37, __pyx_n_u_Animacy_inan);
  __Pyx_INCREF(__pyx_n_u_Animacy_nhum);
  __Pyx_GIVEREF(__pyx_n_u_Animacy_nhum);
  PyList_SET_ITEM(__pyx_t_2, 38, __pyx_n_u_Animacy_nhum);
  __Pyx_INCREF(__pyx_n_u_Aspect_hab);
  __Pyx_GIVEREF(__pyx_n_u_Aspect_hab);
  PyList_SET_ITEM(__pyx_t_2, 39, __pyx_n_u_Aspect_hab);
  __Pyx_INCREF(__pyx_n_u_Aspect_imp);
  __Pyx_GIVEREF(__pyx_n_u_Aspect_imp);
  PyList_SET_ITEM(__pyx_t_2, 40, __pyx_n_u_Aspect_imp);
  __Pyx_INCREF(__pyx_n_u_Aspect_iter);
  __Pyx_GIVEREF(__pyx_n_u_Aspect_iter);
  PyList_SET_ITEM(__pyx_t_2, 41, __pyx_n_u_Aspect_iter);
  __Pyx_INCREF(__pyx_n_u_Aspect_perf);
  __Pyx_GIVEREF(__pyx_n_u_Aspect_perf);
  PyList_SET_ITEM(__pyx_t_2, 42, __pyx_n_u_Aspect_perf);
  __Pyx_INCREF(__pyx_n_u_Aspect_prog);
  __Pyx_GIVEREF(__pyx_n_u_Aspect_prog);
  PyList_SET_ITEM(__pyx_t_2, 43, __pyx_n_u_Aspect_prog);
  __Pyx_INCREF(__pyx_n_u_Aspect_prosp);
  __Pyx_GIVEREF(__pyx_n_u_Aspect_prosp);
  PyList_SET_ITEM(__pyx_t_2, 44, __pyx_n_u_Aspect_prosp);
  __Pyx_INCREF(__pyx_n_u_Aspect_none);
  __Pyx_GIVEREF(__pyx_n_u_Aspect_none);
  PyList_SET_ITEM(__pyx_t_2, 45, __pyx_n_u_Aspect_none);
  __Pyx_INCREF(__pyx_n_u_Case_abe);
  __Pyx_GIVEREF(__pyx_n_u_Case_abe);
  PyList_SET_ITEM(__pyx_t_2, 46, __pyx_n_u_Case_abe);
  __Pyx_INCREF(__pyx_n_u_Case_abl);
  __Pyx_GIVEREF(__pyx_n_u_Case_abl);
  PyList_SET_ITEM(__pyx_t_2, 47, __pyx_n_u_Case_abl);
  __Pyx_INCREF(__pyx_n_u_Case_abs);
  __Pyx_GIVEREF(__pyx_n_u_Case_abs);
  PyList_SET_ITEM(__pyx_t_2, 48, __pyx_n_u_Case_abs);
  __Pyx_INCREF(__pyx_n_u_Case_acc);
  __Pyx_GIVEREF(__pyx_n_u_Case_acc);
  PyList_SET_ITEM(__pyx_t_2, 49, __pyx_n_u_Case_acc);
  __Pyx_INCREF(__pyx_n_u_Case_ade);
  __Pyx_GIVEREF(__pyx_n_u_Case_ade);
  PyList_SET_ITEM(__pyx_t_2, 50, __pyx_n_u_Case_ade);
  __Pyx_INCREF(__pyx_n_u_Case_all);
  __Pyx_GIVEREF(__pyx_n_u_Case_all);
  PyList_SET_ITEM(__pyx_t_2, 51, __pyx_n_u_Case_all);
  __Pyx_INCREF(__pyx_n_u_Case_cau);
  __Pyx_GIVEREF(__pyx_n_u_Case_cau);
  PyList_SET_ITEM(__pyx_t_2, 52, __pyx_n_u_Case_cau);
  __Pyx_INCREF(__pyx_n_u_Case_com);
  __Pyx_GIVEREF(__pyx_n_u_Case_com);
  PyList_SET_ITEM(__pyx_t_2, 53, __pyx_n_u_Case_com);
  __Pyx_INCREF(__pyx_n_u_Case_dat);
  __Pyx_GIVEREF(__pyx_n_u_Case_dat);
  PyList_SET_ITEM(__pyx_t_2, 54, __pyx_n_u_Case_dat);
  __Pyx_INCREF(__pyx_n_u_Case_del);
  __Pyx_GIVEREF(__pyx_n_u_Case_del);
  PyList_SET_ITEM(__pyx_t_2, 55, __pyx_n_u_Case_del);
  __Pyx_INCREF(__pyx_n_u_Case_dis);
  __Pyx_GIVEREF(__pyx_n_u_Case_dis);
  PyList_SET_ITEM(__pyx_t_2, 56, __pyx_n_u_Case_dis);
  __Pyx_INCREF(__pyx_n_u_Case_ela);
  __Pyx_GIVEREF(__pyx_n_u_Case_ela);
  PyList_SET_ITEM(__pyx_t_2, 57, __pyx_n_u_Case_ela);
  __Pyx_INCREF(__pyx_n_u_Case_ess);
  __Pyx_GIVEREF(__pyx_n_u_Case_ess);
  PyList_SET_ITEM(__pyx_t_2, 58, __pyx_n_u_Case_ess);
  __Pyx_INCREF(__pyx_n_u_Case_gen);
  __Pyx_GIVEREF(__pyx_n_u_Case_gen);
  PyList_SET_ITEM(__pyx_t_2, 59, __pyx_n_u_Case_gen);
  __Pyx_INCREF(__pyx_n_u_Case_ill);
  __Pyx_GIVEREF(__pyx_n_u_Case_ill);
  PyList_SET_ITEM(__pyx_t_2, 60, __pyx_n_u_Case_ill);
  __Pyx_INCREF(__pyx_n_u_Case_ine);
  __Pyx_GIVEREF(__pyx_n_u_Case_ine);
  PyList_SET_ITEM(__pyx_t_2, 61, __pyx_n_u_Case_ine);
  __Pyx_INCREF(__pyx_n_u_Case_ins);
  __Pyx_GIVEREF(__pyx_n_u_Case_ins);
  PyList_SET_ITEM(__pyx_t_2, 62, __pyx_n_u_Case_ins);
  __Pyx_INCREF(__pyx_n_u_Case_loc);
  __Pyx_GIVEREF(__pyx_n_u_Case_loc);
  PyList_SET_ITEM(__pyx_t_2, 63, __pyx_n_u_Case_loc);
  __Pyx_INCREF(__pyx_n_u_Case_lat);
  __Pyx_GIVEREF(__pyx_n_u_Case_lat);
  PyList_SET_ITEM(__pyx_t_2, 64, __pyx_n_u_Case_lat);
  __Pyx_INCREF(__pyx_n_u_Case_nom);
  __Pyx_GIVEREF(__pyx_n_u_Case_nom);
  PyList_SET_ITEM(__pyx_t_2, 65, __pyx_n_u_Case_nom);
  __Pyx_INCREF(__pyx_n_u_Case_par);
  __Pyx_GIVEREF(__pyx_n_u_Case_par);
  PyList_SET_ITEM(__pyx_t_2, 66, __pyx_n_u_Case_par);
  __Pyx_INCREF(__pyx_n_u_Case_sub);
  __Pyx_GIVEREF(__pyx_n_u_Case_sub);
  PyList_SET_ITEM(__pyx_t_2, 67, __pyx_n_u_Case_sub);
  __Pyx_INCREF(__pyx_n_u_Case_sup);
  __Pyx_GIVEREF(__pyx_n_u_Case_sup);
  PyList_SET_ITEM(__pyx_t_2, 68, __pyx_n_u_Case_sup);
  __Pyx_INCREF(__pyx_n_u_Case_tem);
  __Pyx_GIVEREF(__pyx_n_u_Case_tem);
  PyList_SET_ITEM(__pyx_t_2, 69, __pyx_n_u_Case_tem);
  __Pyx_INCREF(__pyx_n_u_Case_ter);
  __Pyx_GIVEREF(__pyx_n_u_Case_ter);
  PyList_SET_ITEM(__pyx_t_2, 70, __pyx_n_u_Case_ter);
  __Pyx_INCREF(__pyx_n_u_Case_tra);
  __Pyx_GIVEREF(__pyx_n_u_Case_tra);
  PyList_SET_ITEM(__pyx_t_2, 71, __pyx_n_u_Case_tra);
  __Pyx_INCREF(__pyx_n_u_Case_voc);
  __Pyx_GIVEREF(__pyx_n_u_Case_voc);
  PyList_SET_ITEM(__pyx_t_2, 72, __pyx_n_u_Case_voc);
  __Pyx_INCREF(__pyx_n_u_ConjType_comp);
  __Pyx_GIVEREF(__pyx_n_u_ConjType_comp);
  PyList_SET_ITEM(__pyx_t_2, 73, __pyx_n_u_ConjType_comp);
  __Pyx_INCREF(__pyx_n_u_ConjType_oper);
  __Pyx_GIVEREF(__pyx_n_u_ConjType_oper);
  PyList_SET_ITEM(__pyx_t_2, 74, __pyx_n_u_ConjType_oper);
  __Pyx_INCREF(__pyx_n_u_Connegative_yes);
  __Pyx_GIVEREF(__pyx_n_u_Connegative_yes);
  PyList_SET_ITEM(__pyx_t_2, 75, __pyx_n_u_Connegative_yes);
  __Pyx_INCREF(__pyx_n_u_Definite_cons);
  __Pyx_GIVEREF(__pyx_n_u_Definite_cons);
  PyList_SET_ITEM(__pyx_t_2, 76, __pyx_n_u_Definite_cons);
  __Pyx_INCREF(__pyx_n_u_Definite_def);
  __Pyx_GIVEREF(__pyx_n_u_Definite_def);
  PyList_SET_ITEM(__pyx_t_2, 77, __pyx_n_u_Definite_def);
  __Pyx_INCREF(__pyx_n_u_Definite_ind);
  __Pyx_GIVEREF(__pyx_n_u_Definite_ind);
  PyList_SET_ITEM(__pyx_t_2, 78, __pyx_n_u_Definite_ind);
  __Pyx_INCREF(__pyx_n_u_Definite_red);
  __Pyx_GIVEREF(__pyx_n_u_Definite_red);
  PyList_SET_ITEM(__pyx_t_2, 79, __pyx_n_u_Definite_red);
  __Pyx_INCREF(__pyx_n_u_Definite_two);
  __Pyx_GIVEREF(__pyx_n_u_Definite_two);
  PyList_SET_ITEM(__pyx_t_2, 80, __pyx_n_u_Definite_two);
  __Pyx_INCREF(__pyx_n_u_Degree_abs);
  __Pyx_GIVEREF(__pyx_n_u_Degree_abs);
  PyList_SET_ITEM(__pyx_t_2, 81, __pyx_n_u_Degree_abs);
  __Pyx_INCREF(__pyx_n_u_Degree_cmp);
  __Pyx_GIVEREF(__pyx_n_u_Degree_cmp);
  PyList_SET_ITEM(__pyx_t_2, 82, __pyx_n_u_Degree_cmp);
  __Pyx_INCREF(__pyx_n_u_Degree_comp);
  __Pyx_GIVEREF(__pyx_n_u_Degree_comp);
  PyList_SET_ITEM(__pyx_t_2, 83, __pyx_n_u_Degree_comp);
  __Pyx_INCREF(__pyx_n_u_Degree_none);
  __Pyx_GIVEREF(__pyx_n_u_Degree_none);
  PyList_SET_ITEM(__pyx_t_2, 84, __pyx_n_u_Degree_none);
  __Pyx_INCREF(__pyx_n_u_Degree_pos);
  __Pyx_GIVEREF(__pyx_n_u_Degree_pos);
  PyList_SET_ITEM(__pyx_t_2, 85, __pyx_n_u_Degree_pos);
  __Pyx_INCREF(__pyx_n_u_Degree_sup);
  __Pyx_GIVEREF(__pyx_n_u_Degree_sup);
  PyList_SET_ITEM(__pyx_t_2, 86, __pyx_n_u_Degree_sup);
  __Pyx_INCREF(__pyx_n_u_Degree_com);
  __Pyx_GIVEREF(__pyx_n_u_Degree_com);
  PyList_SET_ITEM(__pyx_t_2, 87, __pyx_n_u_Degree_com);
  __Pyx_INCREF(__pyx_n_u_Degree_dim);
  __Pyx_GIVEREF(__pyx_n_u_Degree_dim);
  PyList_SET_ITEM(__pyx_t_2, 88, __pyx_n_u_Degree_dim);
  __Pyx_INCREF(__pyx_n_u_Derivation_minen);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_minen);
  PyList_SET_ITEM(__pyx_t_2, 89, __pyx_n_u_Derivation_minen);
  __Pyx_INCREF(__pyx_n_u_Derivation_sti);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_sti);
  PyList_SET_ITEM(__pyx_t_2, 90, __pyx_n_u_Derivation_sti);
  __Pyx_INCREF(__pyx_n_u_Derivation_inen);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_inen);
  PyList_SET_ITEM(__pyx_t_2, 91, __pyx_n_u_Derivation_inen);
  __Pyx_INCREF(__pyx_n_u_Derivation_lainen);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_lainen);
  PyList_SET_ITEM(__pyx_t_2, 92, __pyx_n_u_Derivation_lainen);
  __Pyx_INCREF(__pyx_n_u_Derivation_ja);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_ja);
  PyList_SET_ITEM(__pyx_t_2, 93, __pyx_n_u_Derivation_ja);
  __Pyx_INCREF(__pyx_n_u_Derivation_ton);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_ton);
  PyList_SET_ITEM(__pyx_t_2, 94, __pyx_n_u_Derivation_ton);
  __Pyx_INCREF(__pyx_n_u_Derivation_vs);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_vs);
  PyList_SET_ITEM(__pyx_t_2, 95, __pyx_n_u_Derivation_vs);
  __Pyx_INCREF(__pyx_n_u_Derivation_ttain);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_ttain);
  PyList_SET_ITEM(__pyx_t_2, 96, __pyx_n_u_Derivation_ttain);
  __Pyx_INCREF(__pyx_n_u_Derivation_ttaa);
  __Pyx_GIVEREF(__pyx_n_u_Derivation_ttaa);
  PyList_SET_ITEM(__pyx_t_2, 97, __pyx_n_u_Derivation_ttaa);
  __Pyx_INCREF(__pyx_n_u_Echo_rdp);
  __Pyx_GIVEREF(__pyx_n_u_Echo_rdp);
  PyList_SET_ITEM(__pyx_t_2, 98, __pyx_n_u_Echo_rdp);
  __Pyx_INCREF(__pyx_n_u_Echo_ech);
  __Pyx_GIVEREF(__pyx_n_u_Echo_ech);
  PyList_SET_ITEM(__pyx_t_2, 99, __pyx_n_u_Echo_ech);
  __Pyx_INCREF(__pyx_n_u_Foreign_foreign);
  __Pyx_GIVEREF(__pyx_n_u_Foreign_foreign);
  PyList_SET_ITEM(__pyx_t_2, 100, __pyx_n_u_Foreign_foreign);
  __Pyx_INCREF(__pyx_n_u_Foreign_fscript);
  __Pyx_GIVEREF(__pyx_n_u_Foreign_fscript);
  PyList_SET_ITEM(__pyx_t_2, 101, __pyx_n_u_Foreign_fscript);
  __Pyx_INCREF(__pyx_n_u_Foreign_tscript);
  __Pyx_GIVEREF(__pyx_n_u_Foreign_tscript);
  PyList_SET_ITEM(__pyx_t_2, 102, __pyx_n_u_Foreign_tscript);
  __Pyx_INCREF(__pyx_n_u_Foreign_yes);
  __Pyx_GIVEREF(__pyx_n_u_Foreign_yes);
  PyList_SET_ITEM(__pyx_t_2, 103, __pyx_n_u_Foreign_yes);
  __Pyx_INCREF(__pyx_n_u_Gender_com);
  __Pyx_GIVEREF(__pyx_n_u_Gender_com);
  PyList_SET_ITEM(__pyx_t_2, 104, __pyx_n_u_Gender_com);
  __Pyx_INCREF(__pyx_n_u_Gender_fem);
  __Pyx_GIVEREF(__pyx_n_u_Gender_fem);
  PyList_SET_ITEM(__pyx_t_2, 105, __pyx_n_u_Gender_fem);
  __Pyx_INCREF(__pyx_n_u_Gender_masc);
  __Pyx_GIVEREF(__pyx_n_u_Gender_masc);
  PyList_SET_ITEM(__pyx_t_2, 106, __pyx_n_u_Gender_masc);
  __Pyx_INCREF(__pyx_n_u_Gender_neut);
  __Pyx_GIVEREF(__pyx_n_u_Gender_neut);
  PyList_SET_ITEM(__pyx_t_2, 107, __pyx_n_u_Gender_neut);
  __Pyx_INCREF(__pyx_n_u_Gender_dat_masc);
  __Pyx_GIVEREF(__pyx_n_u_Gender_dat_masc);
  PyList_SET_ITEM(__pyx_t_2, 108, __pyx_n_u_Gender_dat_masc);
  __Pyx_INCREF(__pyx_n_u_Gender_dat_fem);
  __Pyx_GIVEREF(__pyx_n_u_Gender_dat_fem);
  PyList_SET_ITEM(__pyx_t_2, 109, __pyx_n_u_Gender_dat_fem);
  __Pyx_INCREF(__pyx_n_u_Gender_erg_masc);
  __Pyx_GIVEREF(__pyx_n_u_Gender_erg_masc);
  PyList_SET_ITEM(__pyx_t_2, 110, __pyx_n_u_Gender_erg_masc);
  __Pyx_INCREF(__pyx_n_u_Gender_erg_fem);
  __Pyx_GIVEREF(__pyx_n_u_Gender_erg_fem);
  PyList_SET_ITEM(__pyx_t_2, 111, __pyx_n_u_Gender_erg_fem);
  __Pyx_INCREF(__pyx_n_u_Gender_psor_masc);
  __Pyx_GIVEREF(__pyx_n_u_Gender_psor_masc);
  PyList_SET_ITEM(__pyx_t_2, 112, __pyx_n_u_Gender_psor_masc);
  __Pyx_INCREF(__pyx_n_u_Gender_psor_fem);
  __Pyx_GIVEREF(__pyx_n_u_Gender_psor_fem);
  PyList_SET_ITEM(__pyx_t_2, 113, __pyx_n_u_Gender_psor_fem);
  __Pyx_INCREF(__pyx_n_u_Gender_psor_neut);
  __Pyx_GIVEREF(__pyx_n_u_Gender_psor_neut);
  PyList_SET_ITEM(__pyx_t_2, 114, __pyx_n_u_Gender_psor_neut);
  __Pyx_INCREF(__pyx_n_u_Hyph_yes);
  __Pyx_GIVEREF(__pyx_n_u_Hyph_yes);
  PyList_SET_ITEM(__pyx_t_2, 115, __pyx_n_u_Hyph_yes);
  __Pyx_INCREF(__pyx_n_u_InfForm_one);
  __Pyx_GIVEREF(__pyx_n_u_InfForm_one);
  PyList_SET_ITEM(__pyx_t_2, 116, __pyx_n_u_InfForm_one);
  __Pyx_INCREF(__pyx_n_u_InfForm_two);
  __Pyx_GIVEREF(__pyx_n_u_InfForm_two);
  PyList_SET_ITEM(__pyx_t_2, 117, __pyx_n_u_InfForm_two);
  __Pyx_INCREF(__pyx_n_u_InfForm_three);
  __Pyx_GIVEREF(__pyx_n_u_InfForm_three);
  PyList_SET_ITEM(__pyx_t_2, 118, __pyx_n_u_InfForm_three);
  __Pyx_INCREF(__pyx_n_u_Mood_cnd);
  __Pyx_GIVEREF(__pyx_n_u_Mood_cnd);
  PyList_SET_ITEM(__pyx_t_2, 119, __pyx_n_u_Mood_cnd);
  __Pyx_INCREF(__pyx_n_u_Mood_imp);
  __Pyx_GIVEREF(__pyx_n_u_Mood_imp);
  PyList_SET_ITEM(__pyx_t_2, 120, __pyx_n_u_Mood_imp);
  __Pyx_INCREF(__pyx_n_u_Mood_ind);
  __Pyx_GIVEREF(__pyx_n_u_Mood_ind);
  PyList_SET_ITEM(__pyx_t_2, 121, __pyx_n_u_Mood_ind);
  __Pyx_INCREF(__pyx_n_u_Mood_n);
  __Pyx_GIVEREF(__pyx_n_u_Mood_n);
  PyList_SET_ITEM(__pyx_t_2, 122, __pyx_n_u_Mood_n);
  __Pyx_INCREF(__pyx_n_u_Mood_pot);
  __Pyx_GIVEREF(__pyx_n_u_Mood_pot);
  PyList_SET_ITEM(__pyx_t_2, 123, __pyx_n_u_Mood_pot);
  __Pyx_INCREF(__pyx_n_u_Mood_sub);
  __Pyx_GIVEREF(__pyx_n_u_Mood_sub);
  PyList_SET_ITEM(__pyx_t_2, 124, __pyx_n_u_Mood_sub);
  __Pyx_INCREF(__pyx_n_u_Mood_opt);
  __Pyx_GIVEREF(__pyx_n_u_Mood_opt);
  PyList_SET_ITEM(__pyx_t_2, 125, __pyx_n_u_Mood_opt);
  __Pyx_INCREF(__pyx_n_u_NameType_geo);
  __Pyx_GIVEREF(__pyx_n_u_NameType_geo);
  PyList_SET_ITEM(__pyx_t_2, 126, __pyx_n_u_NameType_geo);
  __Pyx_INCREF(__pyx_n_u_NameType_prs);
  __Pyx_GIVEREF(__pyx_n_u_NameType_prs);
  PyList_SET_ITEM(__pyx_t_2, 127, __pyx_n_u_NameType_prs);
  __Pyx_INCREF(__pyx_n_u_NameType_giv);
  __Pyx_GIVEREF(__pyx_n_u_NameType_giv);
  PyList_SET_ITEM(__pyx_t_2, 128, __pyx_n_u_NameType_giv);
  __Pyx_INCREF(__pyx_n_u_NameType_sur);
  __Pyx_GIVEREF(__pyx_n_u_NameType_sur);
  PyList_SET_ITEM(__pyx_t_2, 129, __pyx_n_u_NameType_sur);
  __Pyx_INCREF(__pyx_n_u_NameType_nat);
  __Pyx_GIVEREF(__pyx_n_u_NameType_nat);
  PyList_SET_ITEM(__pyx_t_2, 130, __pyx_n_u_NameType_nat);
  __Pyx_INCREF(__pyx_n_u_NameType_com);
  __Pyx_GIVEREF(__pyx_n_u_NameType_com);
  PyList_SET_ITEM(__pyx_t_2, 131, __pyx_n_u_NameType_com);
  __Pyx_INCREF(__pyx_n_u_NameType_pro);
  __Pyx_GIVEREF(__pyx_n_u_NameType_pro);
  PyList_SET_ITEM(__pyx_t_2, 132, __pyx_n_u_NameType_pro);
  __Pyx_INCREF(__pyx_n_u_NameType_oth);
  __Pyx_GIVEREF(__pyx_n_u_NameType_oth);
  PyList_SET_ITEM(__pyx_t_2, 133, __pyx_n_u_NameType_oth);
  __Pyx_INCREF(__pyx_n_u_Negative_neg);
  __Pyx_GIVEREF(__pyx_n_u_Negative_neg);
  PyList_SET_ITEM(__pyx_t_2, 134, __pyx_n_u_Negative_neg);
  __Pyx_INCREF(__pyx_n_u_Negative_pos);
  __Pyx_GIVEREF(__pyx_n_u_Negative_pos);
  PyList_SET_ITEM(__pyx_t_2, 135, __pyx_n_u_Negative_pos);
  __Pyx_INCREF(__pyx_n_u_Negative_yes);
  __Pyx_GIVEREF(__pyx_n_u_Negative_yes);
  PyList_SET_ITEM(__pyx_t_2, 136, __pyx_n_u_Negative_yes);
  __Pyx_INCREF(__pyx_n_u_NounType_com);
  __Pyx_GIVEREF(__pyx_n_u_NounType_com);
  PyList_SET_ITEM(__pyx_t_2, 137, __pyx_n_u_NounType_com);
  __Pyx_INCREF(__pyx_n_u_NounType_prop);
  __Pyx_GIVEREF(__pyx_n_u_NounType_prop);
  PyList_SET_ITEM(__pyx_t_2, 138, __pyx_n_u_NounType_prop);
  __Pyx_INCREF(__pyx_n_u_NounType_class);
  __Pyx_GIVEREF(__pyx_n_u_NounType_class);
  PyList_SET_ITEM(__pyx_t_2, 139, __pyx_n_u_NounType_class);
  __Pyx_INCREF(__pyx_n_u_Number_com);
  __Pyx_GIVEREF(__pyx_n_u_Number_com);
  PyList_SET_ITEM(__pyx_t_2, 140, __pyx_n_u_Number_com);
  __Pyx_INCREF(__pyx_n_u_Number_dual);
  __Pyx_GIVEREF(__pyx_n_u_Number_dual);
  PyList_SET_ITEM(__pyx_t_2, 141, __pyx_n_u_Number_dual);
  __Pyx_INCREF(__pyx_n_u_Number_none);
  __Pyx_GIVEREF(__pyx_n_u_Number_none);
  PyList_SET_ITEM(__pyx_t_2, 142, __pyx_n_u_Number_none);
  __Pyx_INCREF(__pyx_n_u_Number_plur);
  __Pyx_GIVEREF(__pyx_n_u_Number_plur);
  PyList_SET_ITEM(__pyx_t_2, 143, __pyx_n_u_Number_plur);
  __Pyx_INCREF(__pyx_n_u_Number_sing);
  __Pyx_GIVEREF(__pyx_n_u_Number_sing);
  PyList_SET_ITEM(__pyx_t_2, 144, __pyx_n_u_Number_sing);
  __Pyx_INCREF(__pyx_n_u_Number_ptan);
  __Pyx_GIVEREF(__pyx_n_u_Number_ptan);
  PyList_SET_ITEM(__pyx_t_2, 145, __pyx_n_u_Number_ptan);
  __Pyx_INCREF(__pyx_n_u_Number_count);
  __Pyx_GIVEREF(__pyx_n_u_Number_count);
  PyList_SET_ITEM(__pyx_t_2, 146, __pyx_n_u_Number_count);
  __Pyx_INCREF(__pyx_n_u_Number_abs_sing);
  __Pyx_GIVEREF(__pyx_n_u_Number_abs_sing);
  PyList_SET_ITEM(__pyx_t_2, 147, __pyx_n_u_Number_abs_sing);
  __Pyx_INCREF(__pyx_n_u_Number_abs_plur);
  __Pyx_GIVEREF(__pyx_n_u_Number_abs_plur);
  PyList_SET_ITEM(__pyx_t_2, 148, __pyx_n_u_Number_abs_plur);
  __Pyx_INCREF(__pyx_n_u_Number_dat_sing);
  __Pyx_GIVEREF(__pyx_n_u_Number_dat_sing);
  PyList_SET_ITEM(__pyx_t_2, 149, __pyx_n_u_Number_dat_sing);
  __Pyx_INCREF(__pyx_n_u_Number_dat_plur);
  __Pyx_GIVEREF(__pyx_n_u_Number_dat_plur);
  PyList_SET_ITEM(__pyx_t_2, 150, __pyx_n_u_Number_dat_plur);
  __Pyx_INCREF(__pyx_n_u_Number_erg_sing);
  __Pyx_GIVEREF(__pyx_n_u_Number_erg_sing);
  PyList_SET_ITEM(__pyx_t_2, 151, __pyx_n_u_Number_erg_sing);
  __Pyx_INCREF(__pyx_n_u_Number_erg_plur);
  __Pyx_GIVEREF(__pyx_n_u_Number_erg_plur);
  PyList_SET_ITEM(__pyx_t_2, 152, __pyx_n_u_Number_erg_plur);
  __Pyx_INCREF(__pyx_n_u_Number_psee_sing);
  __Pyx_GIVEREF(__pyx_n_u_Number_psee_sing);
  PyList_SET_ITEM(__pyx_t_2, 153, __pyx_n_u_Number_psee_sing);
  __Pyx_INCREF(__pyx_n_u_Number_psee_plur);
  __Pyx_GIVEREF(__pyx_n_u_Number_psee_plur);
  PyList_SET_ITEM(__pyx_t_2, 154, __pyx_n_u_Number_psee_plur);
  __Pyx_INCREF(__pyx_n_u_Number_psor_sing);
  __Pyx_GIVEREF(__pyx_n_u_Number_psor_sing);
  PyList_SET_ITEM(__pyx_t_2, 155, __pyx_n_u_Number_psor_sing);
  __Pyx_INCREF(__pyx_n_u_Number_psor_plur);
  __Pyx_GIVEREF(__pyx_n_u_Number_psor_plur);
  PyList_SET_ITEM(__pyx_t_2, 156, __pyx_n_u_Number_psor_plur);
  __Pyx_INCREF(__pyx_n_u_NumForm_digit);
  __Pyx_GIVEREF(__pyx_n_u_NumForm_digit);
  PyList_SET_ITEM(__pyx_t_2, 157, __pyx_n_u_NumForm_digit);
  __Pyx_INCREF(__pyx_n_u_NumForm_roman);
  __Pyx_GIVEREF(__pyx_n_u_NumForm_roman);
  PyList_SET_ITEM(__pyx_t_2, 158, __pyx_n_u_NumForm_roman);
  __Pyx_INCREF(__pyx_n_u_NumForm_word);
  __Pyx_GIVEREF(__pyx_n_u_NumForm_word);
  PyList_SET_ITEM(__pyx_t_2, 159, __pyx_n_u_NumForm_word);
  __Pyx_INCREF(__pyx_n_u_NumForm_combi);
  __Pyx_GIVEREF(__pyx_n_u_NumForm_combi);
  PyList_SET_ITEM(__pyx_t_2, 160, __pyx_n_u_NumForm_combi);
  __Pyx_INCREF(__pyx_n_u_NumType_card);
  __Pyx_GIVEREF(__pyx_n_u_NumType_card);
  PyList_SET_ITEM(__pyx_t_2, 161, __pyx_n_u_NumType_card);
  __Pyx_INCREF(__pyx_n_u_NumType_dist);
  __Pyx_GIVEREF(__pyx_n_u_NumType_dist);
  PyList_SET_ITEM(__pyx_t_2, 162, __pyx_n_u_NumType_dist);
  __Pyx_INCREF(__pyx_n_u_NumType_frac);
  __Pyx_GIVEREF(__pyx_n_u_NumType_frac);
  PyList_SET_ITEM(__pyx_t_2, 163, __pyx_n_u_NumType_frac);
  __Pyx_INCREF(__pyx_n_u_NumType_gen);
  __Pyx_GIVEREF(__pyx_n_u_NumType_gen);
  PyList_SET_ITEM(__pyx_t_2, 164, __pyx_n_u_NumType_gen);
  __Pyx_INCREF(__pyx_n_u_NumType_mult);
  __Pyx_GIVEREF(__pyx_n_u_NumType_mult);
  PyList_SET_ITEM(__pyx_t_2, 165, __pyx_n_u_NumType_mult);
  __Pyx_INCREF(__pyx_n_u_NumType_none);
  __Pyx_GIVEREF(__pyx_n_u_NumType_none);
  PyList_SET_ITEM(__pyx_t_2, 166, __pyx_n_u_NumType_none);
  __Pyx_INCREF(__pyx_n_u_NumType_ord);
  __Pyx_GIVEREF(__pyx_n_u_NumType_ord);
  PyList_SET_ITEM(__pyx_t_2, 167, __pyx_n_u_NumType_ord);
  __Pyx_INCREF(__pyx_n_u_NumType_sets);
  __Pyx_GIVEREF(__pyx_n_u_NumType_sets);
  PyList_SET_ITEM(__pyx_t_2, 168, __pyx_n_u_NumType_sets);
  __Pyx_INCREF(__pyx_n_u_NumType_dual);
  __Pyx_GIVEREF(__pyx_n_u_NumType_dual);
  PyList_SET_ITEM(__pyx_t_2, 169, __pyx_n_u_NumType_dual);
  __Pyx_INCREF(__pyx_n_u_NumValue_one);
  __Pyx_GIVEREF(__pyx_n_u_NumValue_one);
  PyList_SET_ITEM(__pyx_t_2, 170, __pyx_n_u_NumValue_one);
  __Pyx_INCREF(__pyx_n_u_NumValue_two);
  __Pyx_GIVEREF(__pyx_n_u_NumValue_two);
  PyList_SET_ITEM(__pyx_t_2, 171, __pyx_n_u_NumValue_two);
  __Pyx_INCREF(__pyx_n_u_NumValue_three);
  __Pyx_GIVEREF(__pyx_n_u_NumValue_three);
  PyList_SET_ITEM(__pyx_t_2, 172, __pyx_n_u_NumValue_three);
  __Pyx_INCREF(__pyx_n_u_PartForm_pres);
  __Pyx_GIVEREF(__pyx_n_u_PartForm_pres);
  PyList_SET_ITEM(__pyx_t_2, 173, __pyx_n_u_PartForm_pres);
  __Pyx_INCREF(__pyx_n_u_PartForm_past);
  __Pyx_GIVEREF(__pyx_n_u_PartForm_past);
  PyList_SET_ITEM(__pyx_t_2, 174, __pyx_n_u_PartForm_past);
  __Pyx_INCREF(__pyx_n_u_PartForm_agt);
  __Pyx_GIVEREF(__pyx_n_u_PartForm_agt);
  PyList_SET_ITEM(__pyx_t_2, 175, __pyx_n_u_PartForm_agt);
  __Pyx_INCREF(__pyx_n_u_PartForm_neg);
  __Pyx_GIVEREF(__pyx_n_u_PartForm_neg);
  PyList_SET_ITEM(__pyx_t_2, 176, __pyx_n_u_PartForm_neg);
  __Pyx_INCREF(__pyx_n_u_PartType_mod);
  __Pyx_GIVEREF(__pyx_n_u_PartType_mod);
  PyList_SET_ITEM(__pyx_t_2, 177, __pyx_n_u_PartType_mod);
  __Pyx_INCREF(__pyx_n_u_PartType_emp);
  __Pyx_GIVEREF(__pyx_n_u_PartType_emp);
  PyList_SET_ITEM(__pyx_t_2, 178, __pyx_n_u_PartType_emp);
  __Pyx_INCREF(__pyx_n_u_PartType_res);
  __Pyx_GIVEREF(__pyx_n_u_PartType_res);
  PyList_SET_ITEM(__pyx_t_2, 179, __pyx_n_u_PartType_res);
  __Pyx_INCREF(__pyx_n_u_PartType_inf);
  __Pyx_GIVEREF(__pyx_n_u_PartType_inf);
  PyList_SET_ITEM(__pyx_t_2, 180, __pyx_n_u_PartType_inf);
  __Pyx_INCREF(__pyx_n_u_PartType_vbp);
  __Pyx_GIVEREF(__pyx_n_u_PartType_vbp);
  PyList_SET_ITEM(__pyx_t_2, 181, __pyx_n_u_PartType_vbp);
  __Pyx_INCREF(__pyx_n_u_Person_one);
  __Pyx_GIVEREF(__pyx_n_u_Person_one);
  PyList_SET_ITEM(__pyx_t_2, 182, __pyx_n_u_Person_one);
  __Pyx_INCREF(__pyx_n_u_Person_two);
  __Pyx_GIVEREF(__pyx_n_u_Person_two);
  PyList_SET_ITEM(__pyx_t_2, 183, __pyx_n_u_Person_two);
  __Pyx_INCREF(__pyx_n_u_Person_three);
  __Pyx_GIVEREF(__pyx_n_u_Person_three);
  PyList_SET_ITEM(__pyx_t_2, 184, __pyx_n_u_Person_three);
  __Pyx_INCREF(__pyx_n_u_Person_none);
  __Pyx_GIVEREF(__pyx_n_u_Person_none);
  PyList_SET_ITEM(__pyx_t_2, 185, __pyx_n_u_Person_none);
  __Pyx_INCREF(__pyx_n_u_Person_abs_one);
  __Pyx_GIVEREF(__pyx_n_u_Person_abs_one);
  PyList_SET_ITEM(__pyx_t_2, 186, __pyx_n_u_Person_abs_one);
  __Pyx_INCREF(__pyx_n_u_Person_abs_two);
  __Pyx_GIVEREF(__pyx_n_u_Person_abs_two);
  PyList_SET_ITEM(__pyx_t_2, 187, __pyx_n_u_Person_abs_two);
  __Pyx_INCREF(__pyx_n_u_Person_abs_three);
  __Pyx_GIVEREF(__pyx_n_u_Person_abs_three);
  PyList_SET_ITEM(__pyx_t_2, 188, __pyx_n_u_Person_abs_three);
  __Pyx_INCREF(__pyx_n_u_Person_dat_one);
  __Pyx_GIVEREF(__pyx_n_u_Person_dat_one);
  PyList_SET_ITEM(__pyx_t_2, 189, __pyx_n_u_Person_dat_one);
  __Pyx_INCREF(__pyx_n_u_Person_dat_two);
  __Pyx_GIVEREF(__pyx_n_u_Person_dat_two);
  PyList_SET_ITEM(__pyx_t_2, 190, __pyx_n_u_Person_dat_two);
  __Pyx_INCREF(__pyx_n_u_Person_dat_three);
  __Pyx_GIVEREF(__pyx_n_u_Person_dat_three);
  PyList_SET_ITEM(__pyx_t_2, 191, __pyx_n_u_Person_dat_three);
  __Pyx_INCREF(__pyx_n_u_Person_erg_one);
  __Pyx_GIVEREF(__pyx_n_u_Person_erg_one);
  PyList_SET_ITEM(__pyx_t_2, 192, __pyx_n_u_Person_erg_one);
  __Pyx_INCREF(__pyx_n_u_Person_erg_two);
  __Pyx_GIVEREF(__pyx_n_u_Person_erg_two);
  PyList_SET_ITEM(__pyx_t_2, 193, __pyx_n_u_Person_erg_two);
  __Pyx_INCREF(__pyx_n_u_Person_erg_three);
  __Pyx_GIVEREF(__pyx_n_u_Person_erg_three);
  PyList_SET_ITEM(__pyx_t_2, 194, __pyx_n_u_Person_erg_three);
  __Pyx_INCREF(__pyx_n_u_Person_psor_one);
  __Pyx_GIVEREF(__pyx_n_u_Person_psor_one);
  PyList_SET_ITEM(__pyx_t_2, 195, __pyx_n_u_Person_psor_one);
  __Pyx_INCREF(__pyx_n_u_Person_psor_two);
  __Pyx_GIVEREF(__pyx_n_u_Person_psor_two);
  PyList_SET_ITEM(__pyx_t_2, 196, __pyx_n_u_Person_psor_two);
  __Pyx_INCREF(__pyx_n_u_Person_psor_three);
  __Pyx_GIVEREF(__pyx_n_u_Person_psor_three);
  PyList_SET_ITEM(__pyx_t_2, 197, __pyx_n_u_Person_psor_three);
  __Pyx_INCREF(__pyx_n_u_Polarity_neg);
  __Pyx_GIVEREF(__pyx_n_u_Polarity_neg);
  PyList_SET_ITEM(__pyx_t_2, 198, __pyx_n_u_Polarity_neg);
  __Pyx_INCREF(__pyx_n_u_Polarity_pos);
  __Pyx_GIVEREF(__pyx_n_u_Polarity_pos);
  PyList_SET_ITEM(__pyx_t_2, 199, __pyx_n_u_Polarity_pos);
  __Pyx_INCREF(__pyx_n_u_Polite_inf);
  __Pyx_GIVEREF(__pyx_n_u_Polite_inf);
  PyList_SET_ITEM(__pyx_t_2, 200, __pyx_n_u_Polite_inf);
  __Pyx_INCREF(__pyx_n_u_Polite_pol);
  __Pyx_GIVEREF(__pyx_n_u_Polite_pol);
  PyList_SET_ITEM(__pyx_t_2, 201, __pyx_n_u_Polite_pol);
  __Pyx_INCREF(__pyx_n_u_Polite_abs_inf);
  __Pyx_GIVEREF(__pyx_n_u_Polite_abs_inf);
  PyList_SET_ITEM(__pyx_t_2, 202, __pyx_n_u_Polite_abs_inf);
  __Pyx_INCREF(__pyx_n_u_Polite_abs_pol);
  __Pyx_GIVEREF(__pyx_n_u_Polite_abs_pol);
  PyList_SET_ITEM(__pyx_t_2, 203, __pyx_n_u_Polite_abs_pol);
  __Pyx_INCREF(__pyx_n_u_Polite_erg_inf);
  __Pyx_GIVEREF(__pyx_n_u_Polite_erg_inf);
  PyList_SET_ITEM(__pyx_t_2, 204, __pyx_n_u_Polite_erg_inf);
  __Pyx_INCREF(__pyx_n_u_Polite_erg_pol);
  __Pyx_GIVEREF(__pyx_n_u_Polite_erg_pol);
  PyList_SET_ITEM(__pyx_t_2, 205, __pyx_n_u_Polite_erg_pol);
  __Pyx_INCREF(__pyx_n_u_Polite_dat_inf);
  __Pyx_GIVEREF(__pyx_n_u_Polite_dat_inf);
  PyList_SET_ITEM(__pyx_t_2, 206, __pyx_n_u_Polite_dat_inf);
  __Pyx_INCREF(__pyx_n_u_Polite_dat_pol);
  __Pyx_GIVEREF(__pyx_n_u_Polite_dat_pol);
  PyList_SET_ITEM(__pyx_t_2, 207, __pyx_n_u_Polite_dat_pol);
  __Pyx_INCREF(__pyx_n_u_Poss_yes);
  __Pyx_GIVEREF(__pyx_n_u_Poss_yes);
  PyList_SET_ITEM(__pyx_t_2, 208, __pyx_n_u_Poss_yes);
  __Pyx_INCREF(__pyx_n_u_Prefix_yes);
  __Pyx_GIVEREF(__pyx_n_u_Prefix_yes);
  PyList_SET_ITEM(__pyx_t_2, 209, __pyx_n_u_Prefix_yes);
  __Pyx_INCREF(__pyx_n_u_PrepCase_npr);
  __Pyx_GIVEREF(__pyx_n_u_PrepCase_npr);
  PyList_SET_ITEM(__pyx_t_2, 210, __pyx_n_u_PrepCase_npr);
  __Pyx_INCREF(__pyx_n_u_PrepCase_pre);
  __Pyx_GIVEREF(__pyx_n_u_PrepCase_pre);
  PyList_SET_ITEM(__pyx_t_2, 211, __pyx_n_u_PrepCase_pre);
  __Pyx_INCREF(__pyx_n_u_PronType_advPart);
  __Pyx_GIVEREF(__pyx_n_u_PronType_advPart);
  PyList_SET_ITEM(__pyx_t_2, 212, __pyx_n_u_PronType_advPart);
  __Pyx_INCREF(__pyx_n_u_PronType_art);
  __Pyx_GIVEREF(__pyx_n_u_PronType_art);
  PyList_SET_ITEM(__pyx_t_2, 213, __pyx_n_u_PronType_art);
  __Pyx_INCREF(__pyx_n_u_PronType_default);
  __Pyx_GIVEREF(__pyx_n_u_PronType_default);
  PyList_SET_ITEM(__pyx_t_2, 214, __pyx_n_u_PronType_default);
  __Pyx_INCREF(__pyx_n_u_PronType_dem);
  __Pyx_GIVEREF(__pyx_n_u_PronType_dem);
  PyList_SET_ITEM(__pyx_t_2, 215, __pyx_n_u_PronType_dem);
  __Pyx_INCREF(__pyx_n_u_PronType_ind);
  __Pyx_GIVEREF(__pyx_n_u_PronType_ind);
  PyList_SET_ITEM(__pyx_t_2, 216, __pyx_n_u_PronType_ind);
  __Pyx_INCREF(__pyx_n_u_PronType_int);
  __Pyx_GIVEREF(__pyx_n_u_PronType_int);
  PyList_SET_ITEM(__pyx_t_2, 217, __pyx_n_u_PronType_int);
  __Pyx_INCREF(__pyx_n_u_PronType_neg);
  __Pyx_GIVEREF(__pyx_n_u_PronType_neg);
  PyList_SET_ITEM(__pyx_t_2, 218, __pyx_n_u_PronType_neg);
  __Pyx_INCREF(__pyx_n_u_PronType_prs);
  __Pyx_GIVEREF(__pyx_n_u_PronType_prs);
  PyList_SET_ITEM(__pyx_t_2, 219, __pyx_n_u_PronType_prs);
  __Pyx_INCREF(__pyx_n_u_PronType_rcp);
  __Pyx_GIVEREF(__pyx_n_u_PronType_rcp);
  PyList_SET_ITEM(__pyx_t_2, 220, __pyx_n_u_PronType_rcp);
  __Pyx_INCREF(__pyx_n_u_PronType_rel);
  __Pyx_GIVEREF(__pyx_n_u_PronType_rel);
  PyList_SET_ITEM(__pyx_t_2, 221, __pyx_n_u_PronType_rel);
  __Pyx_INCREF(__pyx_n_u_PronType_tot);
  __Pyx_GIVEREF(__pyx_n_u_PronType_tot);
  PyList_SET_ITEM(__pyx_t_2, 222, __pyx_n_u_PronType_tot);
  __Pyx_INCREF(__pyx_n_u_PronType_clit);
  __Pyx_GIVEREF(__pyx_n_u_PronType_clit);
  PyList_SET_ITEM(__pyx_t_2, 223, __pyx_n_u_PronType_clit);
  __Pyx_INCREF(__pyx_n_u_PronType_exc);
  __Pyx_GIVEREF(__pyx_n_u_PronType_exc);
  PyList_SET_ITEM(__pyx_t_2, 224, __pyx_n_u_PronType_exc);
  __Pyx_INCREF(__pyx_n_u_PunctSide_ini);
  __Pyx_GIVEREF(__pyx_n_u_PunctSide_ini);
  PyList_SET_ITEM(__pyx_t_2, 225, __pyx_n_u_PunctSide_ini);
  __Pyx_INCREF(__pyx_n_u_PunctSide_fin);
  __Pyx_GIVEREF(__pyx_n_u_PunctSide_fin);
  PyList_SET_ITEM(__pyx_t_2, 226, __pyx_n_u_PunctSide_fin);
  __Pyx_INCREF(__pyx_n_u_PunctType_peri);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_peri);
  PyList_SET_ITEM(__pyx_t_2, 227, __pyx_n_u_PunctType_peri);
  __Pyx_INCREF(__pyx_n_u_PunctType_qest);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_qest);
  PyList_SET_ITEM(__pyx_t_2, 228, __pyx_n_u_PunctType_qest);
  __Pyx_INCREF(__pyx_n_u_PunctType_excl);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_excl);
  PyList_SET_ITEM(__pyx_t_2, 229, __pyx_n_u_PunctType_excl);
  __Pyx_INCREF(__pyx_n_u_PunctType_quot);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_quot);
  PyList_SET_ITEM(__pyx_t_2, 230, __pyx_n_u_PunctType_quot);
  __Pyx_INCREF(__pyx_n_u_PunctType_brck);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_brck);
  PyList_SET_ITEM(__pyx_t_2, 231, __pyx_n_u_PunctType_brck);
  __Pyx_INCREF(__pyx_n_u_PunctType_comm);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_comm);
  PyList_SET_ITEM(__pyx_t_2, 232, __pyx_n_u_PunctType_comm);
  __Pyx_INCREF(__pyx_n_u_PunctType_colo);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_colo);
  PyList_SET_ITEM(__pyx_t_2, 233, __pyx_n_u_PunctType_colo);
  __Pyx_INCREF(__pyx_n_u_PunctType_semi);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_semi);
  PyList_SET_ITEM(__pyx_t_2, 234, __pyx_n_u_PunctType_semi);
  __Pyx_INCREF(__pyx_n_u_PunctType_dash);
  __Pyx_GIVEREF(__pyx_n_u_PunctType_dash);
  PyList_SET_ITEM(__pyx_t_2, 235, __pyx_n_u_PunctType_dash);
  __Pyx_INCREF(__pyx_n_u_Reflex_yes);
  __Pyx_GIVEREF(__pyx_n_u_Reflex_yes);
  PyList_SET_ITEM(__pyx_t_2, 236, __pyx_n_u_Reflex_yes);
  __Pyx_INCREF(__pyx_n_u_Style_arch);
  __Pyx_GIVEREF(__pyx_n_u_Style_arch);
  PyList_SET_ITEM(__pyx_t_2, 237, __pyx_n_u_Style_arch);
  __Pyx_INCREF(__pyx_n_u_Style_rare);
  __Pyx_GIVEREF(__pyx_n_u_Style_rare);
  PyList_SET_ITEM(__pyx_t_2, 238, __pyx_n_u_Style_rare);
  __Pyx_INCREF(__pyx_n_u_Style_poet);
  __Pyx_GIVEREF(__pyx_n_u_Style_poet);
  PyList_SET_ITEM(__pyx_t_2, 239, __pyx_n_u_Style_poet);
  __Pyx_INCREF(__pyx_n_u_Style_norm);
  __Pyx_GIVEREF(__pyx_n_u_Style_norm);
  PyList_SET_ITEM(__pyx_t_2, 240, __pyx_n_u_Style_norm);
  __Pyx_INCREF(__pyx_n_u_Style_coll);
  __Pyx_GIVEREF(__pyx_n_u_Style_coll);
  PyList_SET_ITEM(__pyx_t_2, 241, __pyx_n_u_Style_coll);
  __Pyx_INCREF(__pyx_n_u_Style_vrnc);
  __Pyx_GIVEREF(__pyx_n_u_Style_vrnc);
  PyList_SET_ITEM(__pyx_t_2, 242, __pyx_n_u_Style_vrnc);
  __Pyx_INCREF(__pyx_n_u_Style_sing);
  __Pyx_GIVEREF(__pyx_n_u_Style_sing);
  PyList_SET_ITEM(__pyx_t_2, 243, __pyx_n_u_Style_sing);
  __Pyx_INCREF(__pyx_n_u_Style_expr);
  __Pyx_GIVEREF(__pyx_n_u_Style_expr);
  PyList_SET_ITEM(__pyx_t_2, 244, __pyx_n_u_Style_expr);
  __Pyx_INCREF(__pyx_n_u_Style_derg);
  __Pyx_GIVEREF(__pyx_n_u_Style_derg);
  PyList_SET_ITEM(__pyx_t_2, 245, __pyx_n_u_Style_derg);
  __Pyx_INCREF(__pyx_n_u_Style_vulg);
  __Pyx_GIVEREF(__pyx_n_u_Style_vulg);
  PyList_SET_ITEM(__pyx_t_2, 246, __pyx_n_u_Style_vulg);
  __Pyx_INCREF(__pyx_n_u_Style_yes);
  __Pyx_GIVEREF(__pyx_n_u_Style_yes);
  PyList_SET_ITEM(__pyx_t_2, 247, __pyx_n_u_Style_yes);
  __Pyx_INCREF(__pyx_n_u_StyleVariant_styleShort);
  __Pyx_GIVEREF(__pyx_n_u_StyleVariant_styleShort);
  PyList_SET_ITEM(__pyx_t_2, 248, __pyx_n_u_StyleVariant_styleShort);
  __Pyx_INCREF(__pyx_n_u_StyleVariant_styleBound);
  __Pyx_GIVEREF(__pyx_n_u_StyleVariant_styleBound);
  PyList_SET_ITEM(__pyx_t_2, 249, __pyx_n_u_StyleVariant_styleBound);
  __Pyx_INCREF(__pyx_n_u_Tense_fut);
  __Pyx_GIVEREF(__pyx_n_u_Tense_fut);
  PyList_SET_ITEM(__pyx_t_2, 250, __pyx_n_u_Tense_fut);
  __Pyx_INCREF(__pyx_n_u_Tense_imp);
  __Pyx_GIVEREF(__pyx_n_u_Tense_imp);
  PyList_SET_ITEM(__pyx_t_2, 251, __pyx_n_u_Tense_imp);
  __Pyx_INCREF(__pyx_n_u_Tense_past);
  __Pyx_GIVEREF(__pyx_n_u_Tense_past);
  PyList_SET_ITEM(__pyx_t_2, 252, __pyx_n_u_Tense_past);
  __Pyx_INCREF(__pyx_n_u_Tense_pres);
  __Pyx_GIVEREF(__pyx_n_u_Tense_pres);
  PyList_SET_ITEM(__pyx_t_2, 253, __pyx_n_u_Tense_pres);
  __Pyx_INCREF(__pyx_n_u_Typo_yes);
  __Pyx_GIVEREF(__pyx_n_u_Typo_yes);
  PyList_SET_ITEM(__pyx_t_2, 254, __pyx_n_u_Typo_yes);
  __Pyx_INCREF(__pyx_n_u_VerbForm_fin);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_fin);
  PyList_SET_ITEM(__pyx_t_2, 255, __pyx_n_u_VerbForm_fin);
  __Pyx_INCREF(__pyx_n_u_VerbForm_ger);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_ger);
  PyList_SET_ITEM(__pyx_t_2, 256, __pyx_n_u_VerbForm_ger);
  __Pyx_INCREF(__pyx_n_u_VerbForm_inf);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_inf);
  PyList_SET_ITEM(__pyx_t_2, 257, __pyx_n_u_VerbForm_inf);
  __Pyx_INCREF(__pyx_n_u_VerbForm_none);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_none);
  PyList_SET_ITEM(__pyx_t_2, 258, __pyx_n_u_VerbForm_none);
  __Pyx_INCREF(__pyx_n_u_VerbForm_part);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_part);
  PyList_SET_ITEM(__pyx_t_2, 259, __pyx_n_u_VerbForm_part);
  __Pyx_INCREF(__pyx_n_u_VerbForm_partFut);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_partFut);
  PyList_SET_ITEM(__pyx_t_2, 260, __pyx_n_u_VerbForm_partFut);
  __Pyx_INCREF(__pyx_n_u_VerbForm_partPast);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_partPast);
  PyList_SET_ITEM(__pyx_t_2, 261, __pyx_n_u_VerbForm_partPast);
  __Pyx_INCREF(__pyx_n_u_VerbForm_partPres);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_partPres);
  PyList_SET_ITEM(__pyx_t_2, 262, __pyx_n_u_VerbForm_partPres);
  __Pyx_INCREF(__pyx_n_u_VerbForm_sup);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_sup);
  PyList_SET_ITEM(__pyx_t_2, 263, __pyx_n_u_VerbForm_sup);
  __Pyx_INCREF(__pyx_n_u_VerbForm_trans);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_trans);
  PyList_SET_ITEM(__pyx_t_2, 264, __pyx_n_u_VerbForm_trans);
  __Pyx_INCREF(__pyx_n_u_VerbForm_conv);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_conv);
  PyList_SET_ITEM(__pyx_t_2, 265, __pyx_n_u_VerbForm_conv);
  __Pyx_INCREF(__pyx_n_u_VerbForm_gdv);
  __Pyx_GIVEREF(__pyx_n_u_VerbForm_gdv);
  PyList_SET_ITEM(__pyx_t_2, 266, __pyx_n_u_VerbForm_gdv);
  __Pyx_INCREF(__pyx_n_u_VerbType_aux);
  __Pyx_GIVEREF(__pyx_n_u_VerbType_aux);
  PyList_SET_ITEM(__pyx_t_2, 267, __pyx_n_u_VerbType_aux);
  __Pyx_INCREF(__pyx_n_u_VerbType_cop);
  __Pyx_GIVEREF(__pyx_n_u_VerbType_cop);
  PyList_SET_ITEM(__pyx_t_2, 268, __pyx_n_u_VerbType_cop);
  __Pyx_INCREF(__pyx_n_u_VerbType_mod);
  __Pyx_GIVEREF(__pyx_n_u_VerbType_mod);
  PyList_SET_ITEM(__pyx_t_2, 269, __pyx_n_u_VerbType_mod);
  __Pyx_INCREF(__pyx_n_u_VerbType_light);
  __Pyx_GIVEREF(__pyx_n_u_VerbType_light);
  PyList_SET_ITEM(__pyx_t_2, 270, __pyx_n_u_VerbType_light);
  __Pyx_INCREF(__pyx_n_u_Voice_act);
  __Pyx_GIVEREF(__pyx_n_u_Voice_act);
  PyList_SET_ITEM(__pyx_t_2, 271, __pyx_n_u_Voice_act);
  __Pyx_INCREF(__pyx_n_u_Voice_cau);
  __Pyx_GIVEREF(__pyx_n_u_Voice_cau);
  PyList_SET_ITEM(__pyx_t_2, 272, __pyx_n_u_Voice_cau);
  __Pyx_INCREF(__pyx_n_u_Voice_pass);
  __Pyx_GIVEREF(__pyx_n_u_Voice_pass);
  PyList_SET_ITEM(__pyx_t_2, 273, __pyx_n_u_Voice_pass);
  __Pyx_INCREF(__pyx_n_u_Voice_mid);
  __Pyx_GIVEREF(__pyx_n_u_Voice_mid);
  PyList_SET_ITEM(__pyx_t_2, 274, __pyx_n_u_Voice_mid);
  __Pyx_INCREF(__pyx_n_u_Voice_int);
  __Pyx_GIVEREF(__pyx_n_u_Voice_int);
  PyList_SET_ITEM(__pyx_t_2, 275, __pyx_n_u_Voice_int);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FEATURES, __pyx_t_2) < 0) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":1106
 * ]
 * 
 * FEATURE_NAMES = {get_string_id(f): f for f in FEATURES}             # <<<<<<<<<<<<<<
 * FEATURE_FIELDS = {f: FIELDS[f.split('_', 1)[0]] for f in FEATURES}
 */
  { /* enter inner scope */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FEATURES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1106, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1106, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1106, __pyx_L4_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1106, __pyx_L4_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1106, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XGOTREF(__pyx_8genexpr5__pyx_v_5spacy_10morphology_f);
      __Pyx_DECREF_SET(__pyx_8genexpr5__pyx_v_5spacy_10morphology_f, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_string_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_8genexpr5__pyx_v_5spacy_10morphology_f) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_8genexpr5__pyx_v_5spacy_10morphology_f);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_2, (PyObject*)__pyx_t_1, (PyObject*)__pyx_8genexpr5__pyx_v_5spacy_10morphology_f))) __PYX_ERR(0, 1106, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_8genexpr5__pyx_v_5spacy_10morphology_f);
    __Pyx_DECREF_SET(__pyx_8genexpr5__pyx_v_5spacy_10morphology_f, Py_None);
    goto __pyx_L7_exit_scope;
    __pyx_L4_error:;
    __Pyx_GOTREF(__pyx_8genexpr5__pyx_v_5spacy_10morphology_f);
    __Pyx_DECREF_SET(__pyx_8genexpr5__pyx_v_5spacy_10morphology_f, Py_None);
    goto __pyx_L1_error;
    __pyx_L7_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FEATURE_NAMES, __pyx_t_2) < 0) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":1107
 * 
 * FEATURE_NAMES = {get_string_id(f): f for f in FEATURES}
 * FEATURE_FIELDS = {f: FIELDS[f.split('_', 1)[0]] for f in FEATURES}             # <<<<<<<<<<<<<<
 */
  { /* enter inner scope */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FEATURES); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1107, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1107, __pyx_L10_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1107, __pyx_L10_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1107, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1107, __pyx_L10_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1107, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1107, __pyx_L10_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XGOTREF(__pyx_8genexpr6__pyx_v_5spacy_10morphology_f);
      __Pyx_DECREF_SET(__pyx_8genexpr6__pyx_v_5spacy_10morphology_f, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FIELDS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1107, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr6__pyx_v_5spacy_10morphology_f, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1107, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1107, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_2, (PyObject*)__pyx_8genexpr6__pyx_v_5spacy_10morphology_f, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1107, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_8genexpr6__pyx_v_5spacy_10morphology_f);
    __Pyx_DECREF_SET(__pyx_8genexpr6__pyx_v_5spacy_10morphology_f, Py_None);
    goto __pyx_L13_exit_scope;
    __pyx_L10_error:;
    __Pyx_GOTREF(__pyx_8genexpr6__pyx_v_5spacy_10morphology_f);
    __Pyx_DECREF_SET(__pyx_8genexpr6__pyx_v_5spacy_10morphology_f, Py_None);
    goto __pyx_L1_error;
    __pyx_L13_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FEATURE_FIELDS, __pyx_t_2) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/morphology.pyx":1
 * # cython: infer_types             # <<<<<<<<<<<<<<
 * # coding: utf8
 * from __future__ import unicode_literals
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lexeme.pxd":102
 * 
 *     @staticmethod
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if value:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init spacy.morphology", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init spacy.morphology");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* py_dict_pop */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B3
    if ((1)) {
        return _PyDict_Pop(d, key, default_value);
    } else
#endif
    if (default_value) {
        return __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_pop, d, key, default_value);
    } else {
        return __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_pop, d, key);
    }
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (__Pyx_CyFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_10morphology_univ_field_t(enum __pyx_t_5spacy_10morphology_univ_field_t value) {
    const enum __pyx_t_5spacy_10morphology_univ_field_t neg_one = (enum __pyx_t_5spacy_10morphology_univ_field_t) ((enum __pyx_t_5spacy_10morphology_univ_field_t) 0 - (enum __pyx_t_5spacy_10morphology_univ_field_t) 1), const_zero = (enum __pyx_t_5spacy_10morphology_univ_field_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(enum __pyx_t_5spacy_5attrs_attr_id_t value) {
    const enum __pyx_t_5spacy_5attrs_attr_id_t neg_one = (enum __pyx_t_5spacy_5attrs_attr_id_t) ((enum __pyx_t_5spacy_5attrs_attr_id_t) 0 - (enum __pyx_t_5spacy_5attrs_attr_id_t) 1), const_zero = (enum __pyx_t_5spacy_5attrs_attr_id_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t value) {
    const enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t neg_one = (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 0 - (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 1), const_zero = (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t __Pyx_PyInt_As_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(PyObject *x) {
    const enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t neg_one = (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) ((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 0 - (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 1), const_zero = (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) >= 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) (((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) >= 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) (((((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) >= 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) (((((((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) (((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)-1)*(((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) ((((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) (((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)-1)*(((((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) ((((((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) (((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)-1)*(((((((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) ((((((((((enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) -1;
        }
    } else {
        enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) -1;
        val = __Pyx_PyInt_As_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t");
    return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t");
    return (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum __pyx_t_5spacy_10morphology_univ_field_t __Pyx_PyInt_As_enum____pyx_t_5spacy_10morphology_univ_field_t(PyObject *x) {
    const enum __pyx_t_5spacy_10morphology_univ_field_t neg_one = (enum __pyx_t_5spacy_10morphology_univ_field_t) ((enum __pyx_t_5spacy_10morphology_univ_field_t) 0 - (enum __pyx_t_5spacy_10morphology_univ_field_t) 1), const_zero = (enum __pyx_t_5spacy_10morphology_univ_field_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum __pyx_t_5spacy_10morphology_univ_field_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_5spacy_10morphology_univ_field_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) >= 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) (((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) >= 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) (((((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) >= 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) (((((((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum __pyx_t_5spacy_10morphology_univ_field_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_5spacy_10morphology_univ_field_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) (((enum __pyx_t_5spacy_10morphology_univ_field_t)-1)*(((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) ((((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) (((enum __pyx_t_5spacy_10morphology_univ_field_t)-1)*(((((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) ((((((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) (((enum __pyx_t_5spacy_10morphology_univ_field_t)-1)*(((((((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_5spacy_10morphology_univ_field_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_5spacy_10morphology_univ_field_t) ((((((((((enum __pyx_t_5spacy_10morphology_univ_field_t)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_5spacy_10morphology_univ_field_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_10morphology_univ_field_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_5spacy_10morphology_univ_field_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_5spacy_10morphology_univ_field_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum __pyx_t_5spacy_10morphology_univ_field_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum __pyx_t_5spacy_10morphology_univ_field_t) -1;
        }
    } else {
        enum __pyx_t_5spacy_10morphology_univ_field_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum __pyx_t_5spacy_10morphology_univ_field_t) -1;
        val = __Pyx_PyInt_As_enum____pyx_t_5spacy_10morphology_univ_field_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum __pyx_t_5spacy_10morphology_univ_field_t");
    return (enum __pyx_t_5spacy_10morphology_univ_field_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum __pyx_t_5spacy_10morphology_univ_field_t");
    return (enum __pyx_t_5spacy_10morphology_univ_field_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
