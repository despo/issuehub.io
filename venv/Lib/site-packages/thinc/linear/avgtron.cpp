/* Generated by Cython 0.29.13 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__thinc__linear__avgtron
#define __PYX_HAVE_API__thinc__linear__avgtron
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <stdlib.h>
#include "math.h"
#include "stdlib.h"
#include <stdio.h>
#include <errno.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "avgtron.pyx",
  "avgtron.pxd",
  "stringsource",
  "eg.pxd",
  "mb.pxd",
  "cymem.pxd",
  "maps.pxd",
  "linalg.pxd",
  "features.pxd",
  "type.pxd",
  "sparse.pxd",
  "serialize.pxd",
};
/* None.proto */
#if defined(__GNUC__)
#define __Pyx_PACKED __attribute__((__packed__))
#else
#define __Pyx_PACKED
#endif


/* "preshed/maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/* "typedefs.pxd":7
 * 
 * 
 * ctypedef float weight_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 */
typedef float __pyx_t_5thinc_8typedefs_weight_t;

/* "typedefs.pxd":8
 * 
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_atom_t;

/* "typedefs.pxd":9
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_feat_t;

/* "typedefs.pxd":10
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_hash_t;

/* "typedefs.pxd":11
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t
 */
typedef int32_t __pyx_t_5thinc_8typedefs_class_t;

/* "typedefs.pxd":12
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t time_t
 * ctypedef int32_t len_t
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_count_t;

/* "typedefs.pxd":13
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t len_t
 * ctypedef int32_t idx_t
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_time_t;

/* "typedefs.pxd":14
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t
 * ctypedef int32_t len_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t idx_t
 * 
 */
typedef int32_t __pyx_t_5thinc_8typedefs_len_t;

/* "typedefs.pxd":15
 * ctypedef uint32_t time_t
 * ctypedef int32_t len_t
 * ctypedef int32_t idx_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef int32_t __pyx_t_5thinc_8typedefs_idx_t;

/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_PyMalloc;
struct __pyx_obj_5cymem_5cymem_PyFree;
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_5thinc_6linalg_Matrix;
struct __pyx_obj_5thinc_6linalg_Vec;
struct __pyx_obj_5thinc_6linalg_VecVec;
struct __pyx_obj_5thinc_6linalg_Mat;
struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter;
struct __pyx_obj_5thinc_6linear_6sparse_SparseArray;
struct __pyx_obj_5thinc_5extra_2eg_Example;
struct __pyx_obj_5thinc_5extra_2mb_Minibatch;
struct __pyx_obj_5thinc_6linear_9serialize_Writer;
struct __pyx_obj_5thinc_6linear_9serialize_Reader;
struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron;

/* "cymem/cymem.pxd":1
 * ctypedef void* (*malloc_t)(size_t n)             # <<<<<<<<<<<<<<
 * ctypedef void (*free_t)(void *p)
 * 
 */
typedef void *(*__pyx_t_5cymem_5cymem_malloc_t)(size_t);

/* "cymem/cymem.pxd":2
 * ctypedef void* (*malloc_t)(size_t n)
 * ctypedef void (*free_t)(void *p)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyMalloc:
 */
typedef void (*__pyx_t_5cymem_5cymem_free_t)(void *);
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_Result;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "preshed/maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "preshed/maps.pxd":13
 * 
 * 
 * cdef struct Result:             # <<<<<<<<<<<<<<
 *     int found
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Result {
  int found;
  void *value;
};

/* "preshed/maps.pxd":18
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
 */
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};
struct __pyx_t_5thinc_7structs_ConstantsC;
struct __pyx_t_5thinc_7structs_EmbedC;
struct __pyx_t_5thinc_7structs_NeuralNetC;
struct __pyx_t_5thinc_7structs_ExampleC;
struct __pyx_t_5thinc_7structs_MinibatchC;
struct __pyx_t_5thinc_7structs_SparseArrayC;
struct __pyx_t_5thinc_7structs_FeatureC;
struct __pyx_t_5thinc_7structs_SparseAverageC;
struct __pyx_t_5thinc_7structs_TemplateC;

/* "structs.pxd":14
 * include "compile_time_constants.pxi"
 * 
 * ctypedef vector[weight_t] vector_weight_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::vector<__pyx_t_5thinc_8typedefs_weight_t>  __pyx_t_5thinc_7structs_vector_weight_t;

/* "structs.pxd":17
 * 
 * 
 * ctypedef void (*do_update_t)(             # <<<<<<<<<<<<<<
 *     weight_t* weights,
 *     weight_t* gradient,
 */
typedef void (*__pyx_t_5thinc_7structs_do_update_t)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_len_t, struct __pyx_t_5thinc_7structs_ConstantsC const *);

/* "structs.pxd":25
 * 
 * 
 * ctypedef void (*do_feed_fwd_t)(             # <<<<<<<<<<<<<<
 *     weight_t** fwd,
 *         const weight_t* W,
 */
typedef void (*__pyx_t_5thinc_7structs_do_feed_fwd_t)(__pyx_t_5thinc_8typedefs_weight_t **, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_len_t const *, int, int, struct __pyx_t_5thinc_7structs_ConstantsC const *);

/* "structs.pxd":35
 * 
 * 
 * ctypedef void (*do_feed_bwd_t)(             # <<<<<<<<<<<<<<
 *     weight_t* G,
 *     weight_t** bwd,
 */
typedef void (*__pyx_t_5thinc_7structs_do_feed_bwd_t)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t **, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *const *, __pyx_t_5thinc_8typedefs_len_t const *, int, int, struct __pyx_t_5thinc_7structs_ConstantsC const *);

/* "structs.pxd":48
 * 
 * # Alias this, so that it matches our naming scheme
 * ctypedef MapStruct MapC             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct __pyx_t_7preshed_4maps_MapStruct __pyx_t_5thinc_7structs_MapC;

/* "structs.pxd":51
 * 
 * 
 * cdef struct ConstantsC:             # <<<<<<<<<<<<<<
 *     weight_t a
 *     weight_t b
 */
struct __pyx_t_5thinc_7structs_ConstantsC {
  __pyx_t_5thinc_8typedefs_weight_t a;
  __pyx_t_5thinc_8typedefs_weight_t b;
  __pyx_t_5thinc_8typedefs_weight_t c;
  __pyx_t_5thinc_8typedefs_weight_t d;
  __pyx_t_5thinc_8typedefs_weight_t e;
  __pyx_t_5thinc_8typedefs_weight_t g;
  __pyx_t_5thinc_8typedefs_weight_t h;
  __pyx_t_5thinc_8typedefs_weight_t i;
  __pyx_t_5thinc_8typedefs_weight_t j;
  __pyx_t_5thinc_8typedefs_weight_t k;
  __pyx_t_5thinc_8typedefs_weight_t l;
  __pyx_t_5thinc_8typedefs_weight_t m;
  __pyx_t_5thinc_8typedefs_weight_t n;
  __pyx_t_5thinc_8typedefs_weight_t o;
  __pyx_t_5thinc_8typedefs_weight_t p;
  __pyx_t_5thinc_8typedefs_weight_t q;
  __pyx_t_5thinc_8typedefs_weight_t r;
  __pyx_t_5thinc_8typedefs_weight_t s;
  __pyx_t_5thinc_8typedefs_weight_t t;
  __pyx_t_5thinc_8typedefs_weight_t u;
  __pyx_t_5thinc_8typedefs_weight_t w;
  __pyx_t_5thinc_8typedefs_weight_t x;
  __pyx_t_5thinc_8typedefs_weight_t y;
  __pyx_t_5thinc_8typedefs_weight_t z;
};

/* "structs.pxd":78
 * 
 * 
 * cdef struct EmbedC:             # <<<<<<<<<<<<<<
 *     MapC** weights
 *     MapC** gradients
 */
struct __pyx_t_5thinc_7structs_EmbedC {
  __pyx_t_5thinc_7structs_MapC **weights;
  __pyx_t_5thinc_7structs_MapC **gradients;
  __pyx_t_5thinc_8typedefs_weight_t **defaults;
  __pyx_t_5thinc_8typedefs_weight_t **d_defaults;
  __pyx_t_5thinc_8typedefs_idx_t *offsets;
  __pyx_t_5thinc_8typedefs_len_t *lengths;
  __pyx_t_5thinc_8typedefs_len_t nr;
  int nr_support;
};

/* "structs.pxd":89
 * 
 * 
 * cdef struct NeuralNetC:             # <<<<<<<<<<<<<<
 *     do_feed_fwd_t feed_fwd
 *     do_feed_bwd_t feed_bwd
 */
struct __pyx_t_5thinc_7structs_NeuralNetC {
  __pyx_t_5thinc_7structs_do_feed_fwd_t feed_fwd;
  __pyx_t_5thinc_7structs_do_feed_bwd_t feed_bwd;
  __pyx_t_5thinc_7structs_do_update_t update;
  __pyx_t_5thinc_8typedefs_len_t *widths;
  __pyx_t_5thinc_8typedefs_weight_t *weights;
  __pyx_t_5thinc_8typedefs_weight_t *gradient;
  struct __pyx_t_5thinc_7structs_EmbedC *embed;
  __pyx_t_5thinc_8typedefs_len_t nr_layer;
  __pyx_t_5thinc_8typedefs_len_t nr_weight;
  __pyx_t_5thinc_8typedefs_len_t nr_node;
  struct __pyx_t_5thinc_7structs_ConstantsC hp;
};

/* "structs.pxd":112
 * 
 * 
 * cdef struct ExampleC:             # <<<<<<<<<<<<<<
 *     int* is_valid
 *     weight_t* costs
 */
struct __pyx_t_5thinc_7structs_ExampleC {
  int *is_valid;
  __pyx_t_5thinc_8typedefs_weight_t *costs;
  uint64_t *atoms;
  struct __pyx_t_5thinc_7structs_FeatureC *features;
  __pyx_t_5thinc_8typedefs_weight_t *scores;
  int nr_class;
  int nr_atom;
  int nr_feat;
};
struct __pyx_t_5thinc_7structs_MinibatchC {

  /* "structs.pxd":124
 * 
 * 
 * cdef cppclass MinibatchC:             # <<<<<<<<<<<<<<
 *     weight_t** _fwd
 *     weight_t** _bwd
 */
  __pyx_t_5thinc_8typedefs_weight_t **_fwd;
  __pyx_t_5thinc_8typedefs_weight_t **_bwd;
  struct __pyx_t_5thinc_7structs_FeatureC **_feats;
  __pyx_t_5thinc_8typedefs_len_t *_nr_feat;
  __pyx_t_5thinc_8typedefs_weight_t *_costs;
  int *_is_valid;
  uint64_t *signatures;
  __pyx_t_5thinc_8typedefs_len_t *widths;
  int i;
  int nr_layer;
  int batch_size;
  void __pyx_f___init__MinibatchC(__pyx_t_5thinc_8typedefs_len_t *, int, int);
  void __pyx_f___dealloc__MinibatchC(void);
  virtual void reset(void);
  virtual int nr_in(void);
  virtual int nr_out(void);
  virtual int push_back(struct __pyx_t_5thinc_7structs_FeatureC const *, int, __pyx_t_5thinc_8typedefs_weight_t const *, int const *, uint64_t);
  virtual struct __pyx_t_5thinc_7structs_FeatureC *features(int);
  virtual int nr_feat(int);
  virtual __pyx_t_5thinc_8typedefs_weight_t *fwd(int, int);
  virtual __pyx_t_5thinc_8typedefs_weight_t *bwd(int, int);
  virtual __pyx_t_5thinc_8typedefs_weight_t *scores(int);
  virtual __pyx_t_5thinc_8typedefs_weight_t *losses(int);
  virtual __pyx_t_5thinc_8typedefs_weight_t *costs(int);
  virtual int *is_valid(int);
  virtual int guess(int);
  virtual int best(int);
  __pyx_t_5thinc_7structs_MinibatchC(__pyx_t_5thinc_8typedefs_len_t *__pyx_v_widths, int __pyx_v_nr_layer, int __pyx_v_batch_size) {
    __pyx_f___init__MinibatchC(__pyx_v_widths, __pyx_v_nr_layer, __pyx_v_batch_size);
  }
  virtual ~__pyx_t_5thinc_7structs_MinibatchC() {
    __pyx_f___dealloc__MinibatchC();
  }
};

/* "structs.pxd":258
 * 
 * 
 * cdef packed struct SparseArrayC:             # <<<<<<<<<<<<<<
 *     int32_t key
 *     weight_t val
 */
#if defined(__SUNPRO_C)
  #pragma pack(1)
#elif !defined(__GNUC__)
  #pragma pack(push, 1)
#endif
struct __Pyx_PACKED __pyx_t_5thinc_7structs_SparseArrayC {
  int32_t key;
  __pyx_t_5thinc_8typedefs_weight_t val;
};
#if defined(__SUNPRO_C)
  #pragma pack()
#elif !defined(__GNUC__)
  #pragma pack(pop)
#endif

/* "structs.pxd":263
 * 
 * 
 * cdef struct FeatureC:             # <<<<<<<<<<<<<<
 *     int i
 *     uint64_t key
 */
struct __pyx_t_5thinc_7structs_FeatureC {
  int i;
  uint64_t key;
  __pyx_t_5thinc_8typedefs_weight_t value;
};

/* "structs.pxd":269
 * 
 * 
 * cdef struct SparseAverageC:             # <<<<<<<<<<<<<<
 *     SparseArrayC* curr
 *     SparseArrayC* mom1
 */
struct __pyx_t_5thinc_7structs_SparseAverageC {
  struct __pyx_t_5thinc_7structs_SparseArrayC *curr;
  struct __pyx_t_5thinc_7structs_SparseArrayC *mom1;
  struct __pyx_t_5thinc_7structs_SparseArrayC *mom2;
  struct __pyx_t_5thinc_7structs_SparseArrayC *avgs;
  struct __pyx_t_5thinc_7structs_SparseArrayC *times;
  struct __pyx_t_5thinc_7structs_SparseArrayC *penalties;
  __pyx_t_5thinc_8typedefs_weight_t penalty;
};

/* "structs.pxd":279
 * 
 * 
 * cdef struct TemplateC:             # <<<<<<<<<<<<<<
 *     int[MAX_TEMPLATE_LEN] indices
 *     int length
 */
struct __pyx_t_5thinc_7structs_TemplateC {
  int indices[10];
  int length;
  __pyx_t_5thinc_8typedefs_atom_t atoms[10];
};
struct __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc;
typedef struct __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc;

/* "thinc/linear/avgtron.pyx":252
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:
 *                 msg = (feat_id, clas, grad)             # <<<<<<<<<<<<<<
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 *             feat.curr  = SparseArray.init(clas, grad)
 */
struct __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc {
  __pyx_t_5thinc_8typedefs_feat_t f0;
  __pyx_t_5thinc_8typedefs_class_t f1;
  __pyx_t_5thinc_8typedefs_weight_t f2;
};

/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
 */
struct __pyx_obj_5cymem_5cymem_PyMalloc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtab;
  __pyx_t_5cymem_5cymem_malloc_t malloc;
};


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
 */
struct __pyx_obj_5cymem_5cymem_PyFree {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtab;
  __pyx_t_5cymem_5cymem_free_t free;
};


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "cymem/cymem.pxd":28
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 *     cdef readonly PyMalloc pymalloc
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "preshed/maps.pxd":41
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "preshed/maps.pxd":49
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "linalg.pxd":22
 * 
 * 
 * cdef class Matrix:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef weight_t* data
 */
struct __pyx_obj_5thinc_6linalg_Matrix {
  PyObject_HEAD
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  __pyx_t_5thinc_8typedefs_weight_t *data;
  int32_t nr_row;
  int32_t nr_col;
};


/* "linalg.pxd":29
 * 
 * 
 * cdef class Vec:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline int arg_max(const weight_t* scores, const int n_classes) nogil:
 */
struct __pyx_obj_5thinc_6linalg_Vec {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linalg_Vec *__pyx_vtab;
};


/* "linalg.pxd":158
 * 
 * 
 * cdef class VecVec:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void add(weight_t* output,
 */
struct __pyx_obj_5thinc_6linalg_VecVec {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linalg_VecVec *__pyx_vtab;
};


/* "linalg.pxd":249
 * 
 * 
 * cdef class Mat:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void mean_row(weight_t* Ex,
 */
struct __pyx_obj_5thinc_6linalg_Mat {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linalg_Mat *__pyx_vtab;
};


/* "features.pxd":7
 * 
 * 
 * cdef class ConjunctionExtracter:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef readonly int nr_templ
 */
struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linear_8features_ConjunctionExtracter *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  int nr_templ;
  int nr_embed;
  int nr_atom;
  int linear_mode;
  struct __pyx_t_5thinc_7structs_TemplateC *templates;
  PyObject *_py_templates;
};


/* "sparse.pxd":8
 * 
 * 
 * cdef class SparseArray:             # <<<<<<<<<<<<<<
 *     cdef SparseArrayC* c
 * 
 */
struct __pyx_obj_5thinc_6linear_6sparse_SparseArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linear_6sparse_SparseArray *__pyx_vtab;
  struct __pyx_t_5thinc_7structs_SparseArrayC *c;
};


/* "extra/eg.pxd":14
 * 
 * 
 * cdef class Example:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef ExampleC c
 */
struct __pyx_obj_5thinc_5extra_2eg_Example {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_5extra_2eg_Example *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_5thinc_7structs_ExampleC c;
};


/* "extra/mb.pxd":5
 * 
 * 
 * cdef class Minibatch:             # <<<<<<<<<<<<<<
 *     cdef MinibatchC* c
 * 
 */
struct __pyx_obj_5thinc_5extra_2mb_Minibatch {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_5extra_2mb_Minibatch *__pyx_vtab;
  __pyx_t_5thinc_7structs_MinibatchC *c;
};


/* "serialize.pxd":10
 * 
 * 
 * cdef class Writer:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 * 
 */
struct __pyx_obj_5thinc_6linear_9serialize_Writer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linear_9serialize_Writer *__pyx_vtab;
  FILE *_fp;
};


/* "serialize.pxd":16
 * 
 * 
 * cdef class Reader:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 *     cdef public int32_t nr_feat
 */
struct __pyx_obj_5thinc_6linear_9serialize_Reader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linear_9serialize_Reader *__pyx_vtab;
  FILE *_fp;
  int32_t nr_feat;
};


/* "thinc/linear/avgtron.pxd":10
 * 
 * 
 * cdef class AveragedPerceptron:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly PreshMap weights
 */
struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_7preshed_4maps_PreshMap *weights;
  struct __pyx_obj_7preshed_4maps_PreshMap *averages;
  struct __pyx_obj_7preshed_4maps_PreshMap *lasso_ledger;
  struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter *extracter;
  int time;
  __pyx_t_5thinc_8typedefs_weight_t learn_rate;
  __pyx_t_5thinc_8typedefs_weight_t l1_penalty;
  __pyx_t_5thinc_8typedefs_weight_t momentum;
};



/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
 */

struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyMalloc *, __pyx_t_5cymem_5cymem_malloc_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtabptr_5cymem_5cymem_PyMalloc;


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
 */

struct __pyx_vtabstruct_5cymem_5cymem_PyFree {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyFree *, __pyx_t_5cymem_5cymem_free_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtabptr_5cymem_5cymem_PyFree;


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "preshed/maps.pxd":41
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "preshed/maps.pxd":49
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "linalg.pxd":29
 * 
 * 
 * cdef class Vec:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline int arg_max(const weight_t* scores, const int n_classes) nogil:
 */

struct __pyx_vtabstruct_5thinc_6linalg_Vec {
  int (*arg_max)(__pyx_t_5thinc_8typedefs_weight_t const *, int const );
  __pyx_t_5thinc_8typedefs_weight_t (*max)(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  __pyx_t_5thinc_8typedefs_weight_t (*sum)(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  __pyx_t_5thinc_8typedefs_weight_t (*norm)(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  void (*add)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*add_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*mul)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*mul_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*pow)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*pow_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const , int32_t);
  void (*div)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*div_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const , int32_t);
  void (*exp)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  void (*exp_i)(__pyx_t_5thinc_8typedefs_weight_t *, int32_t);
  void (*reciprocal_i)(__pyx_t_5thinc_8typedefs_weight_t *, int32_t);
  __pyx_t_5thinc_8typedefs_weight_t (*mean)(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  __pyx_t_5thinc_8typedefs_weight_t (*variance)(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
};
static struct __pyx_vtabstruct_5thinc_6linalg_Vec *__pyx_vtabptr_5thinc_6linalg_Vec;
static CYTHON_INLINE int __pyx_f_5thinc_6linalg_3Vec_arg_max(__pyx_t_5thinc_8typedefs_weight_t const *, int const );
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_max(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_sum(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_norm(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_add(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_add_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_mul(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_mul_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_pow(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_pow_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const , int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_div(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_div_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const , int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_exp(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_exp_i(__pyx_t_5thinc_8typedefs_weight_t *, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_reciprocal_i(__pyx_t_5thinc_8typedefs_weight_t *, int32_t);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_mean(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_variance(__pyx_t_5thinc_8typedefs_weight_t const *, int32_t);


/* "linalg.pxd":158
 * 
 * 
 * cdef class VecVec:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void add(weight_t* output,
 */

struct __pyx_vtabstruct_5thinc_6linalg_VecVec {
  void (*add)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*add_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*batch_add_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t, int32_t);
  void (*add_pow)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*add_pow_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
  void (*mul)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  void (*mul_i)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  __pyx_t_5thinc_8typedefs_weight_t (*dot)(__pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
  int (*arg_max_if_true)(__pyx_t_5thinc_8typedefs_weight_t const *, int const *, int const );
  int (*arg_max_if_zero)(__pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int const );
};
static struct __pyx_vtabstruct_5thinc_6linalg_VecVec *__pyx_vtabptr_5thinc_6linalg_VecVec;
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_batch_add_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_pow(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_pow_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_mul(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_mul_i(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_6VecVec_dot(__pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t);
static CYTHON_INLINE int __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_true(__pyx_t_5thinc_8typedefs_weight_t const *, int const *, int const );
static CYTHON_INLINE int __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_zero(__pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int const );


/* "linalg.pxd":249
 * 
 * 
 * cdef class Mat:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void mean_row(weight_t* Ex,
 */

struct __pyx_vtabstruct_5thinc_6linalg_Mat {
  void (*mean_row)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t, int32_t);
  void (*var_row)(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t, int32_t, __pyx_t_5thinc_8typedefs_weight_t);
};
static struct __pyx_vtabstruct_5thinc_6linalg_Mat *__pyx_vtabptr_5thinc_6linalg_Mat;
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Mat_mean_row(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t, int32_t);
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Mat_var_row(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t const *, __pyx_t_5thinc_8typedefs_weight_t const *, int32_t, int32_t, __pyx_t_5thinc_8typedefs_weight_t);


/* "features.pxd":7
 * 
 * 
 * cdef class ConjunctionExtracter:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef readonly int nr_templ
 */

struct __pyx_vtabstruct_5thinc_6linear_8features_ConjunctionExtracter {
  int (*set_features)(struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter *, struct __pyx_t_5thinc_7structs_FeatureC *, __pyx_t_5thinc_8typedefs_atom_t const *);
};
static struct __pyx_vtabstruct_5thinc_6linear_8features_ConjunctionExtracter *__pyx_vtabptr_5thinc_6linear_8features_ConjunctionExtracter;


/* "sparse.pxd":8
 * 
 * 
 * cdef class SparseArray:             # <<<<<<<<<<<<<<
 *     cdef SparseArrayC* c
 * 
 */

struct __pyx_vtabstruct_5thinc_6linear_6sparse_SparseArray {
  struct __pyx_t_5thinc_7structs_SparseArrayC *(*init)(int, __pyx_t_5thinc_8typedefs_weight_t);
  struct __pyx_t_5thinc_7structs_SparseArrayC *(*clone)(struct __pyx_t_5thinc_7structs_SparseArrayC const *);
  int (*find_key)(struct __pyx_t_5thinc_7structs_SparseArrayC const *, int);
  struct __pyx_t_5thinc_7structs_SparseArrayC *(*resize)(struct __pyx_t_5thinc_7structs_SparseArrayC *);
  int (*cmp)(void const *, void const *);
};
static struct __pyx_vtabstruct_5thinc_6linear_6sparse_SparseArray *__pyx_vtabptr_5thinc_6linear_6sparse_SparseArray;
static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_init(int, __pyx_t_5thinc_8typedefs_weight_t);
static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_clone(struct __pyx_t_5thinc_7structs_SparseArrayC const *);
static CYTHON_INLINE int __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(struct __pyx_t_5thinc_7structs_SparseArrayC const *, int);
static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(struct __pyx_t_5thinc_7structs_SparseArrayC *);
static CYTHON_INLINE int __pyx_f_5thinc_6linear_6sparse_11SparseArray_cmp(void const *, void const *);


/* "extra/eg.pxd":14
 * 
 * 
 * cdef class Example:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef ExampleC c
 */

struct __pyx_vtabstruct_5thinc_5extra_2eg_Example {
  struct __pyx_obj_5thinc_5extra_2eg_Example *(*from_ptr)(struct __pyx_t_5thinc_7structs_ExampleC *);
};
static struct __pyx_vtabstruct_5thinc_5extra_2eg_Example *__pyx_vtabptr_5thinc_5extra_2eg_Example;
static CYTHON_INLINE struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_f_5thinc_5extra_2eg_7Example_from_ptr(struct __pyx_t_5thinc_7structs_ExampleC *);


/* "extra/mb.pxd":5
 * 
 * 
 * cdef class Minibatch:             # <<<<<<<<<<<<<<
 *     cdef MinibatchC* c
 * 
 */

struct __pyx_vtabstruct_5thinc_5extra_2mb_Minibatch {
  PyObject *(*take_ownership)(__pyx_t_5thinc_7structs_MinibatchC *);
};
static struct __pyx_vtabstruct_5thinc_5extra_2mb_Minibatch *__pyx_vtabptr_5thinc_5extra_2mb_Minibatch;
static CYTHON_INLINE PyObject *__pyx_f_5thinc_5extra_2mb_9Minibatch_take_ownership(__pyx_t_5thinc_7structs_MinibatchC *);


/* "serialize.pxd":10
 * 
 * 
 * cdef class Writer:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 * 
 */

struct __pyx_vtabstruct_5thinc_6linear_9serialize_Writer {
  int (*write)(struct __pyx_obj_5thinc_6linear_9serialize_Writer *, __pyx_t_5thinc_8typedefs_feat_t, struct __pyx_t_5thinc_7structs_SparseArrayC *);
};
static struct __pyx_vtabstruct_5thinc_6linear_9serialize_Writer *__pyx_vtabptr_5thinc_6linear_9serialize_Writer;


/* "serialize.pxd":16
 * 
 * 
 * cdef class Reader:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 *     cdef public int32_t nr_feat
 */

struct __pyx_vtabstruct_5thinc_6linear_9serialize_Reader {
  int (*read)(struct __pyx_obj_5thinc_6linear_9serialize_Reader *, struct __pyx_obj_5cymem_5cymem_Pool *, __pyx_t_5thinc_8typedefs_feat_t *, struct __pyx_t_5thinc_7structs_SparseArrayC **);
};
static struct __pyx_vtabstruct_5thinc_6linear_9serialize_Reader *__pyx_vtabptr_5thinc_6linear_9serialize_Reader;


/* "thinc/linear/avgtron.pyx":29
 * 
 * 
 * cdef class AveragedPerceptron:             # <<<<<<<<<<<<<<
 *     '''A linear model for online supervised classification.
 *     Expected use is via Cython --- the Python API is impoverished and inefficient.
 */

struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron {
  void (*set_scoresC)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, __pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_t_5thinc_7structs_FeatureC const *, int);
  int (*updateC)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, struct __pyx_t_5thinc_7structs_ExampleC const *);
  int (*update_weight)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, __pyx_t_5thinc_8typedefs_feat_t, __pyx_t_5thinc_8typedefs_class_t, __pyx_t_5thinc_8typedefs_weight_t, int __pyx_skip_dispatch);
  int (*update_weight_ftrl)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, __pyx_t_5thinc_8typedefs_feat_t, __pyx_t_5thinc_8typedefs_class_t, __pyx_t_5thinc_8typedefs_weight_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_vtabptr_5thinc_6linear_7avgtron_AveragedPerceptron;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* ToPyCTupleUtility.proto */
static PyObject* __pyx_convert__to_py___pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc(__pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_set_scoresC(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_scores, struct __pyx_t_5thinc_7structs_FeatureC const *__pyx_v_feats, int __pyx_v_nr_feat); /* proto*/
static int __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_updateC(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, struct __pyx_t_5thinc_7structs_ExampleC const *__pyx_v_eg); /* proto*/
static int __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight_ftrl(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad, int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE int __pyx_f_5thinc_6linalg_3Vec_arg_max(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, int const __pyx_v_n_classes); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_max(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_sum(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_norm(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_add(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_inc, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_add_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_inc, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_mul(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_mul_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_pow(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_pow_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t const __pyx_v_scal, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_div(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_div_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t const __pyx_v_scal, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_exp(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_exp_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_reciprocal_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_mean(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_X, int32_t __pyx_v_nr_dim); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_variance(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_X, int32_t __pyx_v_nr_dim); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scale, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scale, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_batch_add_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scale, int32_t __pyx_v_nr, int32_t __pyx_v_nr_batch); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_pow(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_power, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_pow_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_power, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_mul(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_mul_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_6VecVec_dot(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, int32_t __pyx_v_nr); /* proto*/
static CYTHON_INLINE int __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_true(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, int const *__pyx_v_is_valid, int const __pyx_v_n_classes); /* proto*/
static CYTHON_INLINE int __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_zero(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_costs, int const __pyx_v_n_classes); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Mat_mean_row(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_Ex, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_mat, int32_t __pyx_v_nr_row, int32_t __pyx_v_nr_col); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Mat_var_row(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_Vx, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_mat, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_Ex, int32_t __pyx_v_nr_row, int32_t __pyx_v_nr_col, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_eps); /* proto*/
static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_init(int __pyx_v_key, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_value); /* proto*/
static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_clone(struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_src); /* proto*/
static CYTHON_INLINE int __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_array, int __pyx_v_key); /* proto*/
static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_array); /* proto*/
static CYTHON_INLINE int __pyx_f_5thinc_6linear_6sparse_11SparseArray_cmp(void const *__pyx_v_a, void const *__pyx_v_b); /* proto*/
static CYTHON_INLINE struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_f_5thinc_5extra_2eg_7Example_from_ptr(struct __pyx_t_5thinc_7structs_ExampleC *__pyx_v_ptr); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5thinc_5extra_2mb_9Minibatch_take_ownership(__pyx_t_5thinc_7structs_MinibatchC *__pyx_v_mb); /* proto*/

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_PyMalloc = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_PyFree = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'preshed.maps' */
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap = 0;
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray = 0;
static void *(*__pyx_f_7preshed_4maps_map_get)(struct __pyx_t_7preshed_4maps_MapStruct const *, __pyx_t_7preshed_4maps_key_t const ); /*proto*/
static void (*__pyx_f_7preshed_4maps_map_set)(struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, __pyx_t_7preshed_4maps_key_t, void *); /*proto*/
static void (*__pyx_f_7preshed_4maps_map_init)(struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, size_t); /*proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'murmurhash.mrmr' */
static uint64_t (*__pyx_f_10murmurhash_4mrmr_real_hash64)(void *, int, uint64_t); /*proto*/

/* Module declarations from 'thinc.typedefs' */

/* Module declarations from 'cython' */

/* Module declarations from 'thinc.linalg' */
static PyTypeObject *__pyx_ptype_5thinc_6linalg_Matrix = 0;
static PyTypeObject *__pyx_ptype_5thinc_6linalg_Vec = 0;
static PyTypeObject *__pyx_ptype_5thinc_6linalg_VecVec = 0;
static PyTypeObject *__pyx_ptype_5thinc_6linalg_Mat = 0;

/* Module declarations from 'thinc.structs' */

/* Module declarations from 'thinc.linear.features' */
static PyTypeObject *__pyx_ptype_5thinc_6linear_8features_ConjunctionExtracter = 0;

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'libc.errno' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'thinc.linear.sparse' */
static PyTypeObject *__pyx_ptype_5thinc_6linear_6sparse_SparseArray = 0;

/* Module declarations from 'thinc.extra.eg' */
static PyTypeObject *__pyx_ptype_5thinc_5extra_2eg_Example = 0;

/* Module declarations from 'thinc.extra.mb' */
static PyTypeObject *__pyx_ptype_5thinc_5extra_2mb_Minibatch = 0;

/* Module declarations from 'thinc.linear.serialize' */
static PyTypeObject *__pyx_ptype_5thinc_6linear_9serialize_Writer = 0;
static PyTypeObject *__pyx_ptype_5thinc_6linear_9serialize_Reader = 0;

/* Module declarations from 'thinc.linear.avgtron' */
static PyTypeObject *__pyx_ptype_5thinc_6linear_7avgtron_AveragedPerceptron = 0;
static void __pyx_f_5thinc_6linear_7avgtron_adam_update(__pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t *, __pyx_t_5thinc_8typedefs_weight_t, __pyx_t_5thinc_8typedefs_weight_t, __pyx_t_5thinc_8typedefs_weight_t, __pyx_t_5thinc_8typedefs_weight_t, __pyx_t_5thinc_8typedefs_weight_t); /*proto*/
static void __pyx_f_5thinc_6linear_7avgtron_update_averages(struct __pyx_t_5thinc_7structs_SparseAverageC *, __pyx_t_5thinc_8typedefs_weight_t); /*proto*/
static int __pyx_f_5thinc_6linear_7avgtron_apply_L1(struct __pyx_t_5thinc_7structs_SparseArrayC *, struct __pyx_t_5thinc_7structs_SparseArrayC *, __pyx_t_5thinc_8typedefs_weight_t); /*proto*/
static PyObject *__pyx_f_5thinc_6linear_7avgtron___pyx_unpickle_AveragedPerceptron__set_state(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "thinc.linear.avgtron"
extern int __pyx_module_is_main_thinc__linear__avgtron;
int __pyx_module_is_main_thinc__linear__avgtron = 0;

/* Implementation of 'thinc.linear.avgtron' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_MemoryError;
static const char __pyx_k_W[] = "W";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_avg[] = "avg";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_clas[] = "clas";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_feat[] = "feat";
static const char __pyx_k_grad[] = "grad";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_loss[] = "loss";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_avg_i[] = "avg_i";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_feat_id[] = "feat_id";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_capacity[] = "capacity";
static const char __pyx_k_eg_or_mb[] = "eg_or_mb";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_momentum[] = "momentum";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_feat_addr[] = "feat_addr";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_templates[] = "templates";
static const char __pyx_k_l1_penalty[] = "l1_penalty";
static const char __pyx_k_learn_rate[] = "learn_rate";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_avgtron_pyx[] = "avgtron.pyx";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_AverageHelper[] = "_AverageHelper";
static const char __pyx_k_apply_owed_L1[] = "apply_owed_L1";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_update_weight[] = "update_weight";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_resume_training[] = "resume_training";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_AveragedPerceptron[] = "AveragedPerceptron";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_update_weight_ftrl[] = "update_weight_ftrl";
static const char __pyx_k_AverageHelper___exit[] = "_AverageHelper.__exit__";
static const char __pyx_k_AverageHelper___init[] = "_AverageHelper.__init__";
static const char __pyx_k_thinc_linear_avgtron[] = "thinc.linear.avgtron";
static const char __pyx_k_AverageHelper___enter[] = "_AverageHelper.__enter__";
static const char __pyx_k_pyx_unpickle_AveragedPerceptro[] = "__pyx_unpickle_AveragedPerceptron";
static const char __pyx_k_Error_allocating_memory_for_feat[] = "Error allocating memory for feature: %s";
static const char __pyx_k_Incompatible_checksums_s_vs_0xec[] = "Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))";
static PyObject *__pyx_n_s_AverageHelper;
static PyObject *__pyx_n_s_AverageHelper___enter;
static PyObject *__pyx_n_s_AverageHelper___exit;
static PyObject *__pyx_n_s_AverageHelper___init;
static PyObject *__pyx_n_s_AveragedPerceptron;
static PyObject *__pyx_kp_s_Error_allocating_memory_for_feat;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xec;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_W;
static PyObject *__pyx_n_s_apply_owed_L1;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_avg;
static PyObject *__pyx_n_s_avg_i;
static PyObject *__pyx_kp_s_avgtron_pyx;
static PyObject *__pyx_n_s_capacity;
static PyObject *__pyx_n_s_clas;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_eg_or_mb;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_feat;
static PyObject *__pyx_n_s_feat_addr;
static PyObject *__pyx_n_s_feat_id;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_grad;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_l1_penalty;
static PyObject *__pyx_n_s_learn_rate;
static PyObject *__pyx_n_s_loss;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_momentum;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_AveragedPerceptro;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_resume_training;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_templates;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thinc_linear_avgtron;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_weight;
static PyObject *__pyx_n_s_update_weight_ftrl;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_values;
static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron___init__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_templates, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_2__dealloc__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4__call__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_eg_or_mb); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_6update(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_v_eg); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8dump(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_loc); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10load(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_loc); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_12apply_owed_L1(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_14end_training(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_16with_averages(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_18resume_training(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_2L1___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_14nr_active_feat___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_9nr_weight___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_7nr_feat___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_20update_weight(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_22update_weight_ftrl(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_3mem___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_7weights___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8averages___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_12lasso_ledger___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4time___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_24__reduce_cython__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_26__setstate_cython__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_model); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper_2__enter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper_4__exit__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5thinc_6linear_7avgtron___pyx_unpickle_AveragedPerceptron(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5thinc_6linear_7avgtron_AveragedPerceptron(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static PyObject *__pyx_float_0_9;
static PyObject *__pyx_float_1eneg_8;
static PyObject *__pyx_float_0_001;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_247848399;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
/* Late includes */

/* "thinc/linear/avgtron.pyx":36
 *     of classes is in the dozens or low hundreds.
 *     '''
 *     def __init__(self, templates, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.time = 0
 *         self.weights = PreshMap()
 */

/* Python wrapper */
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_templates = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_templates,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_templates)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 36, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_templates = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 36, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron___init__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), __pyx_v_templates, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron___init__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_templates, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_2;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "thinc/linear/avgtron.pyx":37
 *     '''
 *     def __init__(self, templates, *args, **kwargs):
 *         self.time = 0             # <<<<<<<<<<<<<<
 *         self.weights = PreshMap()
 *         self.averages = PreshMap()
 */
  __pyx_v_self->time = 0;

  /* "thinc/linear/avgtron.pyx":38
 *     def __init__(self, templates, *args, **kwargs):
 *         self.time = 0
 *         self.weights = PreshMap()             # <<<<<<<<<<<<<<
 *         self.averages = PreshMap()
 *         self.lasso_ledger = PreshMap()
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7preshed_4maps_PreshMap)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->weights);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->weights));
  __pyx_v_self->weights = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":39
 *         self.time = 0
 *         self.weights = PreshMap()
 *         self.averages = PreshMap()             # <<<<<<<<<<<<<<
 *         self.lasso_ledger = PreshMap()
 *         self.mem = Pool()
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7preshed_4maps_PreshMap)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->averages);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->averages));
  __pyx_v_self->averages = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":40
 *         self.weights = PreshMap()
 *         self.averages = PreshMap()
 *         self.lasso_ledger = PreshMap()             # <<<<<<<<<<<<<<
 *         self.mem = Pool()
 *         self.extracter = ConjunctionExtracter(templates)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7preshed_4maps_PreshMap)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->lasso_ledger);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->lasso_ledger));
  __pyx_v_self->lasso_ledger = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":41
 *         self.averages = PreshMap()
 *         self.lasso_ledger = PreshMap()
 *         self.mem = Pool()             # <<<<<<<<<<<<<<
 *         self.extracter = ConjunctionExtracter(templates)
 *         self.learn_rate = kwargs.get('learn_rate', 0.001)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5cymem_5cymem_Pool)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mem));
  __pyx_v_self->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":42
 *         self.lasso_ledger = PreshMap()
 *         self.mem = Pool()
 *         self.extracter = ConjunctionExtracter(templates)             # <<<<<<<<<<<<<<
 *         self.learn_rate = kwargs.get('learn_rate', 0.001)
 *         self.l1_penalty = kwargs.get('l1_penalty', 1e-8)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5thinc_6linear_8features_ConjunctionExtracter), __pyx_v_templates); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->extracter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->extracter));
  __pyx_v_self->extracter = ((struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":43
 *         self.mem = Pool()
 *         self.extracter = ConjunctionExtracter(templates)
 *         self.learn_rate = kwargs.get('learn_rate', 0.001)             # <<<<<<<<<<<<<<
 *         self.l1_penalty = kwargs.get('l1_penalty', 1e-8)
 *         self.momentum = kwargs.get('momentum', 0.9)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_learn_rate, __pyx_float_0_001); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->learn_rate = __pyx_t_2;

  /* "thinc/linear/avgtron.pyx":44
 *         self.extracter = ConjunctionExtracter(templates)
 *         self.learn_rate = kwargs.get('learn_rate', 0.001)
 *         self.l1_penalty = kwargs.get('l1_penalty', 1e-8)             # <<<<<<<<<<<<<<
 *         self.momentum = kwargs.get('momentum', 0.9)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_l1_penalty, __pyx_float_1eneg_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->l1_penalty = __pyx_t_2;

  /* "thinc/linear/avgtron.pyx":45
 *         self.learn_rate = kwargs.get('learn_rate', 0.001)
 *         self.l1_penalty = kwargs.get('l1_penalty', 1e-8)
 *         self.momentum = kwargs.get('momentum', 0.9)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_momentum, __pyx_float_0_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->momentum = __pyx_t_2;

  /* "thinc/linear/avgtron.pyx":36
 *     of classes is in the dozens or low hundreds.
 *     '''
 *     def __init__(self, templates, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.time = 0
 *         self.weights = PreshMap()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":47
 *         self.momentum = kwargs.get('momentum', 0.9)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         # Use 'raw' memory management, instead of cymem.Pool, for weights.
 */

/* Python wrapper */
static void __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_2__dealloc__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_2__dealloc__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  size_t __pyx_v_feat_addr;
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "thinc/linear/avgtron.pyx":51
 *         # Use 'raw' memory management, instead of cymem.Pool, for weights.
 *         # The memory overhead of cymem becomes significant here.
 *         if self.weights is not None:             # <<<<<<<<<<<<<<
 *             for feat_addr in self.weights.values():
 *                 if feat_addr != 0:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->weights) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "thinc/linear/avgtron.pyx":52
 *         # The memory overhead of cymem becomes significant here.
 *         if self.weights is not None:
 *             for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *                 if feat_addr != 0:
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weights), __pyx_n_s_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 52, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 52, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 52, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 52, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_feat_addr = __pyx_t_8;

      /* "thinc/linear/avgtron.pyx":53
 *         if self.weights is not None:
 *             for feat_addr in self.weights.values():
 *                 if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 *         if self.averages is not None:
 */
      __pyx_t_2 = ((__pyx_v_feat_addr != 0) != 0);
      if (__pyx_t_2) {

        /* "thinc/linear/avgtron.pyx":54
 *             for feat_addr in self.weights.values():
 *                 if feat_addr != 0:
 *                     PyMem_Free(<SparseArrayC*>feat_addr)             # <<<<<<<<<<<<<<
 *         if self.averages is not None:
 *             for feat_addr in self.averages.values():
 */
        PyMem_Free(((struct __pyx_t_5thinc_7structs_SparseArrayC *)__pyx_v_feat_addr));

        /* "thinc/linear/avgtron.pyx":53
 *         if self.weights is not None:
 *             for feat_addr in self.weights.values():
 *                 if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 *         if self.averages is not None:
 */
      }

      /* "thinc/linear/avgtron.pyx":52
 *         # The memory overhead of cymem becomes significant here.
 *         if self.weights is not None:
 *             for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *                 if feat_addr != 0:
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "thinc/linear/avgtron.pyx":51
 *         # Use 'raw' memory management, instead of cymem.Pool, for weights.
 *         # The memory overhead of cymem becomes significant here.
 *         if self.weights is not None:             # <<<<<<<<<<<<<<
 *             for feat_addr in self.weights.values():
 *                 if feat_addr != 0:
 */
  }

  /* "thinc/linear/avgtron.pyx":55
 *                 if feat_addr != 0:
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 *         if self.averages is not None:             # <<<<<<<<<<<<<<
 *             for feat_addr in self.averages.values():
 *                 if feat_addr != 0:
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->averages) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "thinc/linear/avgtron.pyx":56
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 *         if self.averages is not None:
 *             for feat_addr in self.averages.values():             # <<<<<<<<<<<<<<
 *                 if feat_addr != 0:
 *                     feat = <SparseAverageC*>feat_addr
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->averages), __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 56, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 56, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_feat_addr = __pyx_t_8;

      /* "thinc/linear/avgtron.pyx":57
 *         if self.averages is not None:
 *             for feat_addr in self.averages.values():
 *                 if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                     feat = <SparseAverageC*>feat_addr
 *                     PyMem_Free(feat.avgs)
 */
      __pyx_t_1 = ((__pyx_v_feat_addr != 0) != 0);
      if (__pyx_t_1) {

        /* "thinc/linear/avgtron.pyx":58
 *             for feat_addr in self.averages.values():
 *                 if feat_addr != 0:
 *                     feat = <SparseAverageC*>feat_addr             # <<<<<<<<<<<<<<
 *                     PyMem_Free(feat.avgs)
 *                     PyMem_Free(feat.times)
 */
        __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)__pyx_v_feat_addr);

        /* "thinc/linear/avgtron.pyx":59
 *                 if feat_addr != 0:
 *                     feat = <SparseAverageC*>feat_addr
 *                     PyMem_Free(feat.avgs)             # <<<<<<<<<<<<<<
 *                     PyMem_Free(feat.times)
 * 
 */
        PyMem_Free(__pyx_v_feat->avgs);

        /* "thinc/linear/avgtron.pyx":60
 *                     feat = <SparseAverageC*>feat_addr
 *                     PyMem_Free(feat.avgs)
 *                     PyMem_Free(feat.times)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, eg_or_mb):
 */
        PyMem_Free(__pyx_v_feat->times);

        /* "thinc/linear/avgtron.pyx":57
 *         if self.averages is not None:
 *             for feat_addr in self.averages.values():
 *                 if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                     feat = <SparseAverageC*>feat_addr
 *                     PyMem_Free(feat.avgs)
 */
      }

      /* "thinc/linear/avgtron.pyx":56
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 *         if self.averages is not None:
 *             for feat_addr in self.averages.values():             # <<<<<<<<<<<<<<
 *                 if feat_addr != 0:
 *                     feat = <SparseAverageC*>feat_addr
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "thinc/linear/avgtron.pyx":55
 *                 if feat_addr != 0:
 *                     PyMem_Free(<SparseArrayC*>feat_addr)
 *         if self.averages is not None:             # <<<<<<<<<<<<<<
 *             for feat_addr in self.averages.values():
 *                 if feat_addr != 0:
 */
  }

  /* "thinc/linear/avgtron.pyx":47
 *         self.momentum = kwargs.get('momentum', 0.9)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         # Use 'raw' memory management, instead of cymem.Pool, for weights.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("thinc.linear.avgtron.AveragedPerceptron.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "thinc/linear/avgtron.pyx":62
 *                     PyMem_Free(feat.times)
 * 
 *     def __call__(self, eg_or_mb):             # <<<<<<<<<<<<<<
 *         cdef Example eg
 *         cdef Minibatch mb
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_eg_or_mb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eg_or_mb,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eg_or_mb)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 62, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_eg_or_mb = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 62, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4__call__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), __pyx_v_eg_or_mb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4__call__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_eg_or_mb) {
  struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_v_eg = 0;
  struct __pyx_obj_5thinc_5extra_2mb_Minibatch *__pyx_v_mb = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "thinc/linear/avgtron.pyx":65
 *         cdef Example eg
 *         cdef Minibatch mb
 *         if isinstance(eg_or_mb, Example):             # <<<<<<<<<<<<<<
 *             eg = eg_or_mb
 *             self.set_scoresC(eg.c.scores, eg.c.features, eg.c.nr_feat)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_eg_or_mb, __pyx_ptype_5thinc_5extra_2eg_Example); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "thinc/linear/avgtron.pyx":66
 *         cdef Minibatch mb
 *         if isinstance(eg_or_mb, Example):
 *             eg = eg_or_mb             # <<<<<<<<<<<<<<
 *             self.set_scoresC(eg.c.scores, eg.c.features, eg.c.nr_feat)
 *         else:
 */
    if (!(likely(((__pyx_v_eg_or_mb) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_eg_or_mb, __pyx_ptype_5thinc_5extra_2eg_Example))))) __PYX_ERR(0, 66, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_eg_or_mb;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_eg = ((struct __pyx_obj_5thinc_5extra_2eg_Example *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "thinc/linear/avgtron.pyx":67
 *         if isinstance(eg_or_mb, Example):
 *             eg = eg_or_mb
 *             self.set_scoresC(eg.c.scores, eg.c.features, eg.c.nr_feat)             # <<<<<<<<<<<<<<
 *         else:
 *             mb = eg_or_mb
 */
    ((struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self->__pyx_vtab)->set_scoresC(__pyx_v_self, __pyx_v_eg->c.scores, __pyx_v_eg->c.features, __pyx_v_eg->c.nr_feat);

    /* "thinc/linear/avgtron.pyx":65
 *         cdef Example eg
 *         cdef Minibatch mb
 *         if isinstance(eg_or_mb, Example):             # <<<<<<<<<<<<<<
 *             eg = eg_or_mb
 *             self.set_scoresC(eg.c.scores, eg.c.features, eg.c.nr_feat)
 */
    goto __pyx_L3;
  }

  /* "thinc/linear/avgtron.pyx":69
 *             self.set_scoresC(eg.c.scores, eg.c.features, eg.c.nr_feat)
 *         else:
 *             mb = eg_or_mb             # <<<<<<<<<<<<<<
 *             for i in range(mb.c.i):
 *                 self.set_scoresC(mb.c.scores(i), mb.c.features(i), mb.c.nr_feat(i))
 */
  /*else*/ {
    if (!(likely(((__pyx_v_eg_or_mb) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_eg_or_mb, __pyx_ptype_5thinc_5extra_2mb_Minibatch))))) __PYX_ERR(0, 69, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_eg_or_mb;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_mb = ((struct __pyx_obj_5thinc_5extra_2mb_Minibatch *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "thinc/linear/avgtron.pyx":70
 *         else:
 *             mb = eg_or_mb
 *             for i in range(mb.c.i):             # <<<<<<<<<<<<<<
 *                 self.set_scoresC(mb.c.scores(i), mb.c.features(i), mb.c.nr_feat(i))
 *         PyErr_CheckSignals()
 */
    __pyx_t_4 = __pyx_v_mb->c->i;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "thinc/linear/avgtron.pyx":71
 *             mb = eg_or_mb
 *             for i in range(mb.c.i):
 *                 self.set_scoresC(mb.c.scores(i), mb.c.features(i), mb.c.nr_feat(i))             # <<<<<<<<<<<<<<
 *         PyErr_CheckSignals()
 *         return eg_or_mb
 */
      ((struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self->__pyx_vtab)->set_scoresC(__pyx_v_self, __pyx_v_mb->c->scores(__pyx_v_i), __pyx_v_mb->c->features(__pyx_v_i), __pyx_v_mb->c->nr_feat(__pyx_v_i));
    }
  }
  __pyx_L3:;

  /* "thinc/linear/avgtron.pyx":72
 *             for i in range(mb.c.i):
 *                 self.set_scoresC(mb.c.scores(i), mb.c.features(i), mb.c.nr_feat(i))
 *         PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *         return eg_or_mb
 * 
 */
  __pyx_t_4 = PyErr_CheckSignals(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 72, __pyx_L1_error)

  /* "thinc/linear/avgtron.pyx":73
 *                 self.set_scoresC(mb.c.scores(i), mb.c.features(i), mb.c.nr_feat(i))
 *         PyErr_CheckSignals()
 *         return eg_or_mb             # <<<<<<<<<<<<<<
 * 
 *     def update(self, Example eg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_eg_or_mb);
  __pyx_r = __pyx_v_eg_or_mb;
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":62
 *                     PyMem_Free(feat.times)
 * 
 *     def __call__(self, eg_or_mb):             # <<<<<<<<<<<<<<
 *         cdef Example eg
 *         cdef Minibatch mb
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_eg);
  __Pyx_XDECREF((PyObject *)__pyx_v_mb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":75
 *         return eg_or_mb
 * 
 *     def update(self, Example eg):             # <<<<<<<<<<<<<<
 *         self(eg)
 *         self.updateC(&eg.c)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7update(PyObject *__pyx_v_self, PyObject *__pyx_v_eg); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7update(PyObject *__pyx_v_self, PyObject *__pyx_v_eg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eg), __pyx_ptype_5thinc_5extra_2eg_Example, 1, "eg", 0))) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_6update(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((struct __pyx_obj_5thinc_5extra_2eg_Example *)__pyx_v_eg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_6update(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_v_eg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("update", 0);

  /* "thinc/linear/avgtron.pyx":76
 * 
 *     def update(self, Example eg):
 *         self(eg)             # <<<<<<<<<<<<<<
 *         self.updateC(&eg.c)
 *         return eg.loss
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = ((PyObject *)__pyx_v_self); __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_eg)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_eg));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":77
 *     def update(self, Example eg):
 *         self(eg)
 *         self.updateC(&eg.c)             # <<<<<<<<<<<<<<
 *         return eg.loss
 * 
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self->__pyx_vtab)->updateC(__pyx_v_self, (&__pyx_v_eg->c)); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 77, __pyx_L1_error)

  /* "thinc/linear/avgtron.pyx":78
 *         self(eg)
 *         self.updateC(&eg.c)
 *         return eg.loss             # <<<<<<<<<<<<<<
 * 
 *     def dump(self, loc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_eg), __pyx_n_s_loss); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":75
 *         return eg_or_mb
 * 
 *     def update(self, Example eg):             # <<<<<<<<<<<<<<
 *         self(eg)
 *         self.updateC(&eg.c)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":80
 *         return eg.loss
 * 
 *     def dump(self, loc):             # <<<<<<<<<<<<<<
 *         cdef Writer writer = Writer(loc, self.weights.capacity)
 *         cdef feat_t key
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_9dump(PyObject *__pyx_v_self, PyObject *__pyx_v_loc); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_9dump(PyObject *__pyx_v_self, PyObject *__pyx_v_loc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8dump(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((PyObject *)__pyx_v_loc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8dump(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_loc) {
  struct __pyx_obj_5thinc_6linear_9serialize_Writer *__pyx_v_writer = 0;
  __pyx_t_5thinc_8typedefs_feat_t __pyx_v_key;
  size_t __pyx_v_feat_addr;
  PyObject *__pyx_v_i = NULL;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_W;
  int __pyx_v_seen_non_zero;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  __pyx_t_5thinc_8typedefs_feat_t __pyx_t_10;
  size_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("dump", 0);

  /* "thinc/linear/avgtron.pyx":81
 * 
 *     def dump(self, loc):
 *         cdef Writer writer = Writer(loc, self.weights.capacity)             # <<<<<<<<<<<<<<
 *         cdef feat_t key
 *         cdef size_t feat_addr
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weights), __pyx_n_s_capacity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_loc);
  __Pyx_GIVEREF(__pyx_v_loc);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_loc);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5thinc_6linear_9serialize_Writer), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_writer = ((struct __pyx_obj_5thinc_6linear_9serialize_Writer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":84
 *         cdef feat_t key
 *         cdef size_t feat_addr
 *         for i, (key, feat_addr) in enumerate(self.weights.items()):             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 W = <SparseArrayC*>feat_addr
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weights), __pyx_n_s_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 84, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 84, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 84, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_key = __pyx_t_10;
    __pyx_v_feat_addr = __pyx_t_11;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "thinc/linear/avgtron.pyx":85
 *         cdef size_t feat_addr
 *         for i, (key, feat_addr) in enumerate(self.weights.items()):
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 W = <SparseArrayC*>feat_addr
 *                 seen_non_zero = False
 */
    __pyx_t_12 = ((__pyx_v_feat_addr != 0) != 0);
    if (__pyx_t_12) {

      /* "thinc/linear/avgtron.pyx":86
 *         for i, (key, feat_addr) in enumerate(self.weights.items()):
 *             if feat_addr != 0:
 *                 W = <SparseArrayC*>feat_addr             # <<<<<<<<<<<<<<
 *                 seen_non_zero = False
 *                 while W.key >= 0:
 */
      __pyx_v_W = ((struct __pyx_t_5thinc_7structs_SparseArrayC *)__pyx_v_feat_addr);

      /* "thinc/linear/avgtron.pyx":87
 *             if feat_addr != 0:
 *                 W = <SparseArrayC*>feat_addr
 *                 seen_non_zero = False             # <<<<<<<<<<<<<<
 *                 while W.key >= 0:
 *                     if W.val != 0:
 */
      __pyx_v_seen_non_zero = 0;

      /* "thinc/linear/avgtron.pyx":88
 *                 W = <SparseArrayC*>feat_addr
 *                 seen_non_zero = False
 *                 while W.key >= 0:             # <<<<<<<<<<<<<<
 *                     if W.val != 0:
 *                         seen_non_zero = True
 */
      while (1) {
        __pyx_t_12 = ((__pyx_v_W->key >= 0) != 0);
        if (!__pyx_t_12) break;

        /* "thinc/linear/avgtron.pyx":89
 *                 seen_non_zero = False
 *                 while W.key >= 0:
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         seen_non_zero = True
 *                         break
 */
        __pyx_t_12 = ((__pyx_v_W->val != 0.0) != 0);
        if (__pyx_t_12) {

          /* "thinc/linear/avgtron.pyx":90
 *                 while W.key >= 0:
 *                     if W.val != 0:
 *                         seen_non_zero = True             # <<<<<<<<<<<<<<
 *                         break
 *                     W += 1
 */
          __pyx_v_seen_non_zero = 1;

          /* "thinc/linear/avgtron.pyx":91
 *                     if W.val != 0:
 *                         seen_non_zero = True
 *                         break             # <<<<<<<<<<<<<<
 *                     W += 1
 *                 if seen_non_zero:
 */
          goto __pyx_L9_break;

          /* "thinc/linear/avgtron.pyx":89
 *                 seen_non_zero = False
 *                 while W.key >= 0:
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         seen_non_zero = True
 *                         break
 */
        }

        /* "thinc/linear/avgtron.pyx":92
 *                         seen_non_zero = True
 *                         break
 *                     W += 1             # <<<<<<<<<<<<<<
 *                 if seen_non_zero:
 *                     writer.write(key, <SparseArrayC*>feat_addr)
 */
        __pyx_v_W = (__pyx_v_W + 1);
      }
      __pyx_L9_break:;

      /* "thinc/linear/avgtron.pyx":93
 *                         break
 *                     W += 1
 *                 if seen_non_zero:             # <<<<<<<<<<<<<<
 *                     writer.write(key, <SparseArrayC*>feat_addr)
 *             if i % 1000 == 0:
 */
      __pyx_t_12 = (__pyx_v_seen_non_zero != 0);
      if (__pyx_t_12) {

        /* "thinc/linear/avgtron.pyx":94
 *                     W += 1
 *                 if seen_non_zero:
 *                     writer.write(key, <SparseArrayC*>feat_addr)             # <<<<<<<<<<<<<<
 *             if i % 1000 == 0:
 *                 PyErr_CheckSignals()
 */
        __pyx_t_13 = ((struct __pyx_vtabstruct_5thinc_6linear_9serialize_Writer *)__pyx_v_writer->__pyx_vtab)->write(__pyx_v_writer, __pyx_v_key, ((struct __pyx_t_5thinc_7structs_SparseArrayC *)__pyx_v_feat_addr)); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 94, __pyx_L1_error)

        /* "thinc/linear/avgtron.pyx":93
 *                         break
 *                     W += 1
 *                 if seen_non_zero:             # <<<<<<<<<<<<<<
 *                     writer.write(key, <SparseArrayC*>feat_addr)
 *             if i % 1000 == 0:
 */
      }

      /* "thinc/linear/avgtron.pyx":85
 *         cdef size_t feat_addr
 *         for i, (key, feat_addr) in enumerate(self.weights.items()):
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 W = <SparseArrayC*>feat_addr
 *                 seen_non_zero = False
 */
    }

    /* "thinc/linear/avgtron.pyx":95
 *                 if seen_non_zero:
 *                     writer.write(key, <SparseArrayC*>feat_addr)
 *             if i % 1000 == 0:             # <<<<<<<<<<<<<<
 *                 PyErr_CheckSignals()
 *         writer.close()
 */
    __pyx_t_2 = __Pyx_PyInt_RemainderObjC(__pyx_v_i, __pyx_int_1000, 0x3E8, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_12) {

      /* "thinc/linear/avgtron.pyx":96
 *                     writer.write(key, <SparseArrayC*>feat_addr)
 *             if i % 1000 == 0:
 *                 PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *         writer.close()
 * 
 */
      __pyx_t_13 = PyErr_CheckSignals(); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 96, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":95
 *                 if seen_non_zero:
 *                     writer.write(key, <SparseArrayC*>feat_addr)
 *             if i % 1000 == 0:             # <<<<<<<<<<<<<<
 *                 PyErr_CheckSignals()
 *         writer.close()
 */
    }

    /* "thinc/linear/avgtron.pyx":84
 *         cdef feat_t key
 *         cdef size_t feat_addr
 *         for i, (key, feat_addr) in enumerate(self.weights.items()):             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 W = <SparseArrayC*>feat_addr
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":97
 *             if i % 1000 == 0:
 *                 PyErr_CheckSignals()
 *         writer.close()             # <<<<<<<<<<<<<<
 * 
 *     def load(self, loc):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_writer), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":80
 *         return eg.loss
 * 
 *     def dump(self, loc):             # <<<<<<<<<<<<<<
 *         cdef Writer writer = Writer(loc, self.weights.capacity)
 *         cdef feat_t key
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_writer);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":99
 *         writer.close()
 * 
 *     def load(self, loc):             # <<<<<<<<<<<<<<
 *         cdef feat_t feat_id
 *         cdef SparseArrayC* feature
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_11load(PyObject *__pyx_v_self, PyObject *__pyx_v_loc); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_11load(PyObject *__pyx_v_self, PyObject *__pyx_v_loc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10load(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((PyObject *)__pyx_v_loc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10load(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_loc) {
  __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_feature;
  struct __pyx_obj_5thinc_6linear_9serialize_Reader *__pyx_v_reader = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("load", 0);

  /* "thinc/linear/avgtron.pyx":102
 *         cdef feat_t feat_id
 *         cdef SparseArrayC* feature
 *         cdef Reader reader = Reader(loc)             # <<<<<<<<<<<<<<
 *         self.weights = PreshMap(reader.nr_feat)
 *         cdef int i = 0
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5thinc_6linear_9serialize_Reader), __pyx_v_loc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_reader = ((struct __pyx_obj_5thinc_6linear_9serialize_Reader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":103
 *         cdef SparseArrayC* feature
 *         cdef Reader reader = Reader(loc)
 *         self.weights = PreshMap(reader.nr_feat)             # <<<<<<<<<<<<<<
 *         cdef int i = 0
 *         while reader.read(self.mem, &feat_id, &feature):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_reader->nr_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7preshed_4maps_PreshMap), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->weights);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->weights));
  __pyx_v_self->weights = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":104
 *         cdef Reader reader = Reader(loc)
 *         self.weights = PreshMap(reader.nr_feat)
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         while reader.read(self.mem, &feat_id, &feature):
 *             self.weights.set(feat_id, feature)
 */
  __pyx_v_i = 0;

  /* "thinc/linear/avgtron.pyx":105
 *         self.weights = PreshMap(reader.nr_feat)
 *         cdef int i = 0
 *         while reader.read(self.mem, &feat_id, &feature):             # <<<<<<<<<<<<<<
 *             self.weights.set(feat_id, feature)
 *             if i % 1000 == 0:
 */
  while (1) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self->mem);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = ((struct __pyx_vtabstruct_5thinc_6linear_9serialize_Reader *)__pyx_v_reader->__pyx_vtab)->read(__pyx_v_reader, ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_2), (&__pyx_v_feat_id), (&__pyx_v_feature)); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) break;

    /* "thinc/linear/avgtron.pyx":106
 *         cdef int i = 0
 *         while reader.read(self.mem, &feat_id, &feature):
 *             self.weights.set(feat_id, feature)             # <<<<<<<<<<<<<<
 *             if i % 1000 == 0:
 *                 PyErr_CheckSignals()
 */
    ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->weights->__pyx_vtab)->set(__pyx_v_self->weights, __pyx_v_feat_id, __pyx_v_feature); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)

    /* "thinc/linear/avgtron.pyx":107
 *         while reader.read(self.mem, &feat_id, &feature):
 *             self.weights.set(feat_id, feature)
 *             if i % 1000 == 0:             # <<<<<<<<<<<<<<
 *                 PyErr_CheckSignals()
 *             i += 1
 */
    __pyx_t_4 = (((__pyx_v_i % 0x3E8) == 0) != 0);
    if (__pyx_t_4) {

      /* "thinc/linear/avgtron.pyx":108
 *             self.weights.set(feat_id, feature)
 *             if i % 1000 == 0:
 *                 PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      __pyx_t_3 = PyErr_CheckSignals(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 108, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":107
 *         while reader.read(self.mem, &feat_id, &feature):
 *             self.weights.set(feat_id, feature)
 *             if i % 1000 == 0:             # <<<<<<<<<<<<<<
 *                 PyErr_CheckSignals()
 *             i += 1
 */
    }

    /* "thinc/linear/avgtron.pyx":109
 *             if i % 1000 == 0:
 *                 PyErr_CheckSignals()
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *     def apply_owed_L1(self):
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "thinc/linear/avgtron.pyx":99
 *         writer.close()
 * 
 *     def load(self, loc):             # <<<<<<<<<<<<<<
 *         cdef feat_t feat_id
 *         cdef SparseArrayC* feature
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_reader);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":111
 *             i += 1
 * 
 *     def apply_owed_L1(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         cdef feat_t feat_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_13apply_owed_L1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_13apply_owed_L1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_owed_L1 (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_12apply_owed_L1(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_12apply_owed_L1(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  size_t __pyx_v_feat_addr;
  CYTHON_UNUSED __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_u;
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  __pyx_t_5thinc_8typedefs_feat_t __pyx_t_10;
  size_t __pyx_t_11;
  __Pyx_RefNannySetupContext("apply_owed_L1", 0);

  /* "thinc/linear/avgtron.pyx":114
 *         cdef size_t feat_addr
 *         cdef feat_t feat_id
 *         u = self.time * self.learn_rate * self.l1_penalty             # <<<<<<<<<<<<<<
 *         if u == 0:
 *             return
 */
  __pyx_v_u = ((__pyx_v_self->time * __pyx_v_self->learn_rate) * __pyx_v_self->l1_penalty);

  /* "thinc/linear/avgtron.pyx":115
 *         cdef feat_t feat_id
 *         u = self.time * self.learn_rate * self.l1_penalty
 *         if u == 0:             # <<<<<<<<<<<<<<
 *             return
 *         for feat_id, feat_addr in self.averages.items():
 */
  __pyx_t_1 = ((__pyx_v_u == 0.0) != 0);
  if (__pyx_t_1) {

    /* "thinc/linear/avgtron.pyx":116
 *         u = self.time * self.learn_rate * self.l1_penalty
 *         if u == 0:
 *             return             # <<<<<<<<<<<<<<
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "thinc/linear/avgtron.pyx":115
 *         cdef feat_t feat_id
 *         u = self.time * self.learn_rate * self.l1_penalty
 *         if u == 0:             # <<<<<<<<<<<<<<
 *             return
 *         for feat_id, feat_addr in self.averages.items():
 */
  }

  /* "thinc/linear/avgtron.pyx":117
 *         if u == 0:
 *             return
 *         for feat_id, feat_addr in self.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->averages), __pyx_n_s_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 117, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 117, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 117, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_feat_id = __pyx_t_10;
    __pyx_v_feat_addr = __pyx_t_11;

    /* "thinc/linear/avgtron.pyx":118
 *             return
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 apply_L1(feat.curr, feat.penalties,
 */
    __pyx_t_1 = ((__pyx_v_feat_addr != 0) != 0);
    if (__pyx_t_1) {

      /* "thinc/linear/avgtron.pyx":119
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr             # <<<<<<<<<<<<<<
 *                 apply_L1(feat.curr, feat.penalties,
 *                     self.time * self.learn_rate * self.l1_penalty)
 */
      __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)__pyx_v_feat_addr);

      /* "thinc/linear/avgtron.pyx":120
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 *                 apply_L1(feat.curr, feat.penalties,             # <<<<<<<<<<<<<<
 *                     self.time * self.learn_rate * self.l1_penalty)
 *                 #update_averages(feat, self.time)
 */
      (void)(__pyx_f_5thinc_6linear_7avgtron_apply_L1(__pyx_v_feat->curr, __pyx_v_feat->penalties, ((__pyx_v_self->time * __pyx_v_self->learn_rate) * __pyx_v_self->l1_penalty)));

      /* "thinc/linear/avgtron.pyx":118
 *             return
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 apply_L1(feat.curr, feat.penalties,
 */
    }

    /* "thinc/linear/avgtron.pyx":117
 *         if u == 0:
 *             return
 *         for feat_id, feat_addr in self.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "thinc/linear/avgtron.pyx":111
 *             i += 1
 * 
 *     def apply_owed_L1(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         cdef feat_t feat_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.apply_owed_L1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":127
 *                 #self.lasso_ledger.set(feat_id, <void*><size_t>l1_paid)
 * 
 *     def end_training(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         self.apply_owed_L1()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_15end_training(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_15end_training(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_training (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_14end_training(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_14end_training(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  size_t __pyx_v_feat_addr;
  CYTHON_UNUSED PyObject *__pyx_v_feat_id = NULL;
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_W;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_avg;
  CYTHON_UNUSED int __pyx_v_avg_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  size_t __pyx_t_9;
  int __pyx_t_10;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("end_training", 0);

  /* "thinc/linear/avgtron.pyx":129
 *     def end_training(self):
 *         cdef size_t feat_addr
 *         self.apply_owed_L1()             # <<<<<<<<<<<<<<
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_apply_owed_L1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":130
 *         cdef size_t feat_addr
 *         self.apply_owed_L1()
 *         for feat_id, feat_addr in self.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->averages), __pyx_n_s_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 130, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 130, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 130, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_6); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_feat_id, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_v_feat_addr = __pyx_t_9;

    /* "thinc/linear/avgtron.pyx":131
 *         self.apply_owed_L1()
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)
 */
    __pyx_t_10 = ((__pyx_v_feat_addr != 0) != 0);
    if (__pyx_t_10) {

      /* "thinc/linear/avgtron.pyx":132
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr             # <<<<<<<<<<<<<<
 *                 update_averages(feat, self.time+1)
 *                 W = feat.curr
 */
      __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)__pyx_v_feat_addr);

      /* "thinc/linear/avgtron.pyx":133
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)             # <<<<<<<<<<<<<<
 *                 W = feat.curr
 *                 avg = feat.avgs
 */
      __pyx_f_5thinc_6linear_7avgtron_update_averages(__pyx_v_feat, (__pyx_v_self->time + 1));

      /* "thinc/linear/avgtron.pyx":134
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)
 *                 W = feat.curr             # <<<<<<<<<<<<<<
 *                 avg = feat.avgs
 *                 while W.key >= 0:
 */
      __pyx_t_11 = __pyx_v_feat->curr;
      __pyx_v_W = __pyx_t_11;

      /* "thinc/linear/avgtron.pyx":135
 *                 update_averages(feat, self.time+1)
 *                 W = feat.curr
 *                 avg = feat.avgs             # <<<<<<<<<<<<<<
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 */
      __pyx_t_11 = __pyx_v_feat->avgs;
      __pyx_v_avg = __pyx_t_11;

      /* "thinc/linear/avgtron.pyx":136
 *                 W = feat.curr
 *                 avg = feat.avgs
 *                 while W.key >= 0:             # <<<<<<<<<<<<<<
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:
 */
      while (1) {
        __pyx_t_10 = ((__pyx_v_W->key >= 0) != 0);
        if (!__pyx_t_10) break;

        /* "thinc/linear/avgtron.pyx":137
 *                 avg = feat.avgs
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)             # <<<<<<<<<<<<<<
 *                     if W.val != 0:
 *                         W.val = avg.val / (self.time+1)
 */
        __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(__pyx_v_avg, __pyx_v_W->key); if (unlikely(__pyx_t_12 == ((int)-2))) __PYX_ERR(0, 137, __pyx_L1_error)
        __pyx_v_avg_i = __pyx_t_12;

        /* "thinc/linear/avgtron.pyx":138
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         W.val = avg.val / (self.time+1)
 *                     W += 1
 */
        __pyx_t_10 = ((__pyx_v_W->val != 0.0) != 0);
        if (__pyx_t_10) {

          /* "thinc/linear/avgtron.pyx":139
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:
 *                         W.val = avg.val / (self.time+1)             # <<<<<<<<<<<<<<
 *                     W += 1
 *                     avg += 1
 */
          __pyx_v_W->val = (__pyx_v_avg->val / (__pyx_v_self->time + 1));

          /* "thinc/linear/avgtron.pyx":138
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         W.val = avg.val / (self.time+1)
 *                     W += 1
 */
        }

        /* "thinc/linear/avgtron.pyx":140
 *                     if W.val != 0:
 *                         W.val = avg.val / (self.time+1)
 *                     W += 1             # <<<<<<<<<<<<<<
 *                     avg += 1
 * 
 */
        __pyx_v_W = (__pyx_v_W + 1);

        /* "thinc/linear/avgtron.pyx":141
 *                         W.val = avg.val / (self.time+1)
 *                     W += 1
 *                     avg += 1             # <<<<<<<<<<<<<<
 * 
 *     def with_averages(self):
 */
        __pyx_v_avg = (__pyx_v_avg + 1);
      }

      /* "thinc/linear/avgtron.pyx":131
 *         self.apply_owed_L1()
 *         for feat_id, feat_addr in self.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)
 */
    }

    /* "thinc/linear/avgtron.pyx":130
 *         cdef size_t feat_addr
 *         self.apply_owed_L1()
 *         for feat_id, feat_addr in self.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":127
 *                 #self.lasso_ledger.set(feat_id, <void*><size_t>l1_paid)
 * 
 *     def end_training(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         self.apply_owed_L1()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.end_training", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_feat_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":143
 *                     avg += 1
 * 
 *     def with_averages(self):             # <<<<<<<<<<<<<<
 *         # Cython doesn't seem to like contextmanagers in Python 2 on cdef class?
 *         return _AverageHelper(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_17with_averages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_17with_averages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("with_averages (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_16with_averages(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_16with_averages(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("with_averages", 0);

  /* "thinc/linear/avgtron.pyx":145
 *     def with_averages(self):
 *         # Cython doesn't seem to like contextmanagers in Python 2 on cdef class?
 *         return _AverageHelper(self)             # <<<<<<<<<<<<<<
 *     def resume_training(self):
 *         cdef feat_t feat_id
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_AverageHelper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":143
 *                     avg += 1
 * 
 *     def with_averages(self):             # <<<<<<<<<<<<<<
 *         # Cython doesn't seem to like contextmanagers in Python 2 on cdef class?
 *         return _AverageHelper(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.with_averages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":146
 *         # Cython doesn't seem to like contextmanagers in Python 2 on cdef class?
 *         return _AverageHelper(self)
 *     def resume_training(self):             # <<<<<<<<<<<<<<
 *         cdef feat_t feat_id
 *         cdef size_t feat_addr
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_19resume_training(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_19resume_training(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resume_training (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_18resume_training(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_18resume_training(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id;
  size_t __pyx_v_feat_addr;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_train_feat;
  __pyx_t_5thinc_8typedefs_feat_t __pyx_v_msg;
  struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  __pyx_t_5thinc_8typedefs_feat_t __pyx_t_10;
  size_t __pyx_t_11;
  int __pyx_t_12;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_t_13;
  __Pyx_RefNannySetupContext("resume_training", 0);

  /* "thinc/linear/avgtron.pyx":149
 *         cdef feat_t feat_id
 *         cdef size_t feat_addr
 *         for i, (feat_id, feat_addr) in enumerate(self.weights.items()):             # <<<<<<<<<<<<<<
 *             if feat_addr == 0:
 *                 continue
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weights), __pyx_n_s_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 149, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 149, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 149, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_10 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_feat_id = __pyx_t_10;
    __pyx_v_feat_addr = __pyx_t_11;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "thinc/linear/avgtron.pyx":150
 *         cdef size_t feat_addr
 *         for i, (feat_id, feat_addr) in enumerate(self.weights.items()):
 *             if feat_addr == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             train_feat = <SparseAverageC*>self.averages.get(feat_id)
 */
    __pyx_t_12 = ((__pyx_v_feat_addr == 0) != 0);
    if (__pyx_t_12) {

      /* "thinc/linear/avgtron.pyx":151
 *         for i, (feat_id, feat_addr) in enumerate(self.weights.items()):
 *             if feat_addr == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             train_feat = <SparseAverageC*>self.averages.get(feat_id)
 *             if train_feat == NULL:
 */
      goto __pyx_L3_continue;

      /* "thinc/linear/avgtron.pyx":150
 *         cdef size_t feat_addr
 *         for i, (feat_id, feat_addr) in enumerate(self.weights.items()):
 *             if feat_addr == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             train_feat = <SparseAverageC*>self.averages.get(feat_id)
 */
    }

    /* "thinc/linear/avgtron.pyx":152
 *             if feat_addr == 0:
 *                 continue
 *             train_feat = <SparseAverageC*>self.averages.get(feat_id)             # <<<<<<<<<<<<<<
 *             if train_feat == NULL:
 *                 train_feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 */
    __pyx_v_train_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->averages->__pyx_vtab)->get(__pyx_v_self->averages, __pyx_v_feat_id));

    /* "thinc/linear/avgtron.pyx":153
 *                 continue
 *             train_feat = <SparseAverageC*>self.averages.get(feat_id)
 *             if train_feat == NULL:             # <<<<<<<<<<<<<<
 *                 train_feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *                 if train_feat is NULL:
 */
    __pyx_t_12 = ((__pyx_v_train_feat == NULL) != 0);
    if (__pyx_t_12) {

      /* "thinc/linear/avgtron.pyx":154
 *             train_feat = <SparseAverageC*>self.averages.get(feat_id)
 *             if train_feat == NULL:
 *                 train_feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))             # <<<<<<<<<<<<<<
 *                 if train_feat is NULL:
 *                     msg = (feat_id)
 */
      __pyx_v_train_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)PyMem_Malloc((sizeof(struct __pyx_t_5thinc_7structs_SparseAverageC))));

      /* "thinc/linear/avgtron.pyx":155
 *             if train_feat == NULL:
 *                 train_feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *                 if train_feat is NULL:             # <<<<<<<<<<<<<<
 *                     msg = (feat_id)
 *                     raise MemoryError(
 */
      __pyx_t_12 = ((__pyx_v_train_feat == NULL) != 0);
      if (unlikely(__pyx_t_12)) {

        /* "thinc/linear/avgtron.pyx":156
 *                 train_feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *                 if train_feat is NULL:
 *                     msg = (feat_id)             # <<<<<<<<<<<<<<
 *                     raise MemoryError(
 *                         "Error allocating memory for feature: %s" % msg)
 */
        __pyx_v_msg = __pyx_v_feat_id;

        /* "thinc/linear/avgtron.pyx":158
 *                     msg = (feat_id)
 *                     raise MemoryError(
 *                         "Error allocating memory for feature: %s" % msg)             # <<<<<<<<<<<<<<
 *                 weights = <const SparseArrayC*>feat_addr
 *                 train_feat.curr  = SparseArray.clone(weights)
 */
        __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_msg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Error_allocating_memory_for_feat, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "thinc/linear/avgtron.pyx":157
 *                 if train_feat is NULL:
 *                     msg = (feat_id)
 *                     raise MemoryError(             # <<<<<<<<<<<<<<
 *                         "Error allocating memory for feature: %s" % msg)
 *                 weights = <const SparseArrayC*>feat_addr
 */
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_MemoryError, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 157, __pyx_L1_error)

        /* "thinc/linear/avgtron.pyx":155
 *             if train_feat == NULL:
 *                 train_feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *                 if train_feat is NULL:             # <<<<<<<<<<<<<<
 *                     msg = (feat_id)
 *                     raise MemoryError(
 */
      }

      /* "thinc/linear/avgtron.pyx":159
 *                     raise MemoryError(
 *                         "Error allocating memory for feature: %s" % msg)
 *                 weights = <const SparseArrayC*>feat_addr             # <<<<<<<<<<<<<<
 *                 train_feat.curr  = SparseArray.clone(weights)
 *                 train_feat.avgs = SparseArray.clone(weights)
 */
      __pyx_v_weights = ((struct __pyx_t_5thinc_7structs_SparseArrayC const *)__pyx_v_feat_addr);

      /* "thinc/linear/avgtron.pyx":160
 *                         "Error allocating memory for feature: %s" % msg)
 *                 weights = <const SparseArrayC*>feat_addr
 *                 train_feat.curr  = SparseArray.clone(weights)             # <<<<<<<<<<<<<<
 *                 train_feat.avgs = SparseArray.clone(weights)
 *                 train_feat.times = SparseArray.clone(weights)
 */
      __pyx_t_13 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_clone(__pyx_v_weights); if (unlikely(__pyx_t_13 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 160, __pyx_L1_error)
      __pyx_v_train_feat->curr = __pyx_t_13;

      /* "thinc/linear/avgtron.pyx":161
 *                 weights = <const SparseArrayC*>feat_addr
 *                 train_feat.curr  = SparseArray.clone(weights)
 *                 train_feat.avgs = SparseArray.clone(weights)             # <<<<<<<<<<<<<<
 *                 train_feat.times = SparseArray.clone(weights)
 *                 self.averages.set(feat_id, train_feat)
 */
      __pyx_t_13 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_clone(__pyx_v_weights); if (unlikely(__pyx_t_13 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 161, __pyx_L1_error)
      __pyx_v_train_feat->avgs = __pyx_t_13;

      /* "thinc/linear/avgtron.pyx":162
 *                 train_feat.curr  = SparseArray.clone(weights)
 *                 train_feat.avgs = SparseArray.clone(weights)
 *                 train_feat.times = SparseArray.clone(weights)             # <<<<<<<<<<<<<<
 *                 self.averages.set(feat_id, train_feat)
 * 
 */
      __pyx_t_13 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_clone(__pyx_v_weights); if (unlikely(__pyx_t_13 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 162, __pyx_L1_error)
      __pyx_v_train_feat->times = __pyx_t_13;

      /* "thinc/linear/avgtron.pyx":163
 *                 train_feat.avgs = SparseArray.clone(weights)
 *                 train_feat.times = SparseArray.clone(weights)
 *                 self.averages.set(feat_id, train_feat)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
      ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->averages->__pyx_vtab)->set(__pyx_v_self->averages, __pyx_v_feat_id, __pyx_v_train_feat); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":153
 *                 continue
 *             train_feat = <SparseAverageC*>self.averages.get(feat_id)
 *             if train_feat == NULL:             # <<<<<<<<<<<<<<
 *                 train_feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *                 if train_feat is NULL:
 */
    }

    /* "thinc/linear/avgtron.pyx":149
 *         cdef feat_t feat_id
 *         cdef size_t feat_addr
 *         for i, (feat_id, feat_addr) in enumerate(self.weights.items()):             # <<<<<<<<<<<<<<
 *             if feat_addr == 0:
 *                 continue
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":146
 *         # Cython doesn't seem to like contextmanagers in Python 2 on cdef class?
 *         return _AverageHelper(self)
 *     def resume_training(self):             # <<<<<<<<<<<<<<
 *         cdef feat_t feat_id
 *         cdef size_t feat_addr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.resume_training", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":166
 * 
 *     @property
 *     def L1(self):             # <<<<<<<<<<<<<<
 *         cdef long double l1 = 0.0
 *         cdef size_t feat_addr
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_2L1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_2L1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_2L1___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_2L1___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  long double __pyx_v_l1;
  size_t __pyx_v_feat_addr;
  struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_feat;
  CYTHON_UNUSED long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  size_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "thinc/linear/avgtron.pyx":167
 *     @property
 *     def L1(self):
 *         cdef long double l1 = 0.0             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 */
  __pyx_v_l1 = 0.0;

  /* "thinc/linear/avgtron.pyx":169
 *         cdef long double l1 = 0.0
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *             if feat_addr == 0: continue
 *             feat = <const SparseArrayC*>feat_addr
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weights), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 169, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 169, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 169, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 169, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_feat_addr = __pyx_t_6;

    /* "thinc/linear/avgtron.pyx":170
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0: continue             # <<<<<<<<<<<<<<
 *             feat = <const SparseArrayC*>feat_addr
 *             i = 0
 */
    __pyx_t_7 = ((__pyx_v_feat_addr == 0) != 0);
    if (__pyx_t_7) {
      goto __pyx_L3_continue;
    }

    /* "thinc/linear/avgtron.pyx":171
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0: continue
 *             feat = <const SparseArrayC*>feat_addr             # <<<<<<<<<<<<<<
 *             i = 0
 *             while feat.key >= 0:
 */
    __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseArrayC const *)__pyx_v_feat_addr);

    /* "thinc/linear/avgtron.pyx":172
 *             if feat_addr == 0: continue
 *             feat = <const SparseArrayC*>feat_addr
 *             i = 0             # <<<<<<<<<<<<<<
 *             while feat.key >= 0:
 *                 if feat.val < 0 or feat.val > 0:
 */
    __pyx_v_i = 0;

    /* "thinc/linear/avgtron.pyx":173
 *             feat = <const SparseArrayC*>feat_addr
 *             i = 0
 *             while feat.key >= 0:             # <<<<<<<<<<<<<<
 *                 if feat.val < 0 or feat.val > 0:
 *                     l1 += abs(feat.val)
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_feat->key >= 0) != 0);
      if (!__pyx_t_7) break;

      /* "thinc/linear/avgtron.pyx":174
 *             i = 0
 *             while feat.key >= 0:
 *                 if feat.val < 0 or feat.val > 0:             # <<<<<<<<<<<<<<
 *                     l1 += abs(feat.val)
 *                 feat += 1
 */
      __pyx_t_8 = ((__pyx_v_feat->val < 0.0) != 0);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_7 = __pyx_t_8;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_feat->val > 0.0) != 0);
      __pyx_t_7 = __pyx_t_8;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_7) {

        /* "thinc/linear/avgtron.pyx":175
 *             while feat.key >= 0:
 *                 if feat.val < 0 or feat.val > 0:
 *                     l1 += abs(feat.val)             # <<<<<<<<<<<<<<
 *                 feat += 1
 *         return l1
 */
        __pyx_v_l1 = (__pyx_v_l1 + fabsf(__pyx_v_feat->val));

        /* "thinc/linear/avgtron.pyx":174
 *             i = 0
 *             while feat.key >= 0:
 *                 if feat.val < 0 or feat.val > 0:             # <<<<<<<<<<<<<<
 *                     l1 += abs(feat.val)
 *                 feat += 1
 */
      }

      /* "thinc/linear/avgtron.pyx":176
 *                 if feat.val < 0 or feat.val > 0:
 *                     l1 += abs(feat.val)
 *                 feat += 1             # <<<<<<<<<<<<<<
 *         return l1
 * 
 */
      __pyx_v_feat = (__pyx_v_feat + 1);
    }

    /* "thinc/linear/avgtron.pyx":169
 *         cdef long double l1 = 0.0
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *             if feat_addr == 0: continue
 *             feat = <const SparseArrayC*>feat_addr
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":177
 *                     l1 += abs(feat.val)
 *                 feat += 1
 *         return l1             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_l1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":166
 * 
 *     @property
 *     def L1(self):             # <<<<<<<<<<<<<<
 *         cdef long double l1 = 0.0
 *         cdef size_t feat_addr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.L1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":180
 * 
 *     @property
 *     def nr_active_feat(self):             # <<<<<<<<<<<<<<
 *         n = 0
 *         cdef size_t feat_addr
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_14nr_active_feat_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_14nr_active_feat_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_14nr_active_feat___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_14nr_active_feat___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  long __pyx_v_n;
  size_t __pyx_v_feat_addr;
  struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_feat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  size_t __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "thinc/linear/avgtron.pyx":181
 *     @property
 *     def nr_active_feat(self):
 *         n = 0             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 */
  __pyx_v_n = 0;

  /* "thinc/linear/avgtron.pyx":183
 *         n = 0
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *             if feat_addr == 0:
 *                 continue
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weights), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 183, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 183, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 183, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_feat_addr = __pyx_t_6;

    /* "thinc/linear/avgtron.pyx":184
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr
 */
    __pyx_t_7 = ((__pyx_v_feat_addr == 0) != 0);
    if (__pyx_t_7) {

      /* "thinc/linear/avgtron.pyx":185
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:
 */
      goto __pyx_L3_continue;

      /* "thinc/linear/avgtron.pyx":184
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr
 */
    }

    /* "thinc/linear/avgtron.pyx":186
 *             if feat_addr == 0:
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr             # <<<<<<<<<<<<<<
 *             while feat.key >= 0:
 *                 if feat.val != 0:
 */
    __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseArrayC const *)__pyx_v_feat_addr);

    /* "thinc/linear/avgtron.pyx":187
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:             # <<<<<<<<<<<<<<
 *                 if feat.val != 0:
 *                     n += 1
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_feat->key >= 0) != 0);
      if (!__pyx_t_7) break;

      /* "thinc/linear/avgtron.pyx":188
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:
 *                 if feat.val != 0:             # <<<<<<<<<<<<<<
 *                     n += 1
 *                     break
 */
      __pyx_t_7 = ((__pyx_v_feat->val != 0.0) != 0);
      if (__pyx_t_7) {

        /* "thinc/linear/avgtron.pyx":189
 *             while feat.key >= 0:
 *                 if feat.val != 0:
 *                     n += 1             # <<<<<<<<<<<<<<
 *                     break
 *                 feat += 1
 */
        __pyx_v_n = (__pyx_v_n + 1);

        /* "thinc/linear/avgtron.pyx":190
 *                 if feat.val != 0:
 *                     n += 1
 *                     break             # <<<<<<<<<<<<<<
 *                 feat += 1
 *         return n
 */
        goto __pyx_L7_break;

        /* "thinc/linear/avgtron.pyx":188
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:
 *                 if feat.val != 0:             # <<<<<<<<<<<<<<
 *                     n += 1
 *                     break
 */
      }

      /* "thinc/linear/avgtron.pyx":191
 *                     n += 1
 *                     break
 *                 feat += 1             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
      __pyx_v_feat = (__pyx_v_feat + 1);
    }
    __pyx_L7_break:;

    /* "thinc/linear/avgtron.pyx":183
 *         n = 0
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *             if feat_addr == 0:
 *                 continue
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":192
 *                     break
 *                 feat += 1
 *         return n             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":180
 * 
 *     @property
 *     def nr_active_feat(self):             # <<<<<<<<<<<<<<
 *         n = 0
 *         cdef size_t feat_addr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.nr_active_feat.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":195
 * 
 *     @property
 *     def nr_weight(self):             # <<<<<<<<<<<<<<
 *         n = 0
 *         cdef size_t feat_addr
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_9nr_weight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_9nr_weight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_9nr_weight___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_9nr_weight___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  long __pyx_v_n;
  size_t __pyx_v_feat_addr;
  struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_feat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  size_t __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "thinc/linear/avgtron.pyx":196
 *     @property
 *     def nr_weight(self):
 *         n = 0             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 */
  __pyx_v_n = 0;

  /* "thinc/linear/avgtron.pyx":198
 *         n = 0
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *             if feat_addr == 0:
 *                 continue
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weights), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 198, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_feat_addr = __pyx_t_6;

    /* "thinc/linear/avgtron.pyx":199
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr
 */
    __pyx_t_7 = ((__pyx_v_feat_addr == 0) != 0);
    if (__pyx_t_7) {

      /* "thinc/linear/avgtron.pyx":200
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:
 */
      goto __pyx_L3_continue;

      /* "thinc/linear/avgtron.pyx":199
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():
 *             if feat_addr == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr
 */
    }

    /* "thinc/linear/avgtron.pyx":201
 *             if feat_addr == 0:
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr             # <<<<<<<<<<<<<<
 *             while feat.key >= 0:
 *                 if feat.val != 0:
 */
    __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseArrayC const *)__pyx_v_feat_addr);

    /* "thinc/linear/avgtron.pyx":202
 *                 continue
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:             # <<<<<<<<<<<<<<
 *                 if feat.val != 0:
 *                     n += 1
 */
    while (1) {
      __pyx_t_7 = ((__pyx_v_feat->key >= 0) != 0);
      if (!__pyx_t_7) break;

      /* "thinc/linear/avgtron.pyx":203
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:
 *                 if feat.val != 0:             # <<<<<<<<<<<<<<
 *                     n += 1
 *                 feat += 1
 */
      __pyx_t_7 = ((__pyx_v_feat->val != 0.0) != 0);
      if (__pyx_t_7) {

        /* "thinc/linear/avgtron.pyx":204
 *             while feat.key >= 0:
 *                 if feat.val != 0:
 *                     n += 1             # <<<<<<<<<<<<<<
 *                 feat += 1
 *         return n
 */
        __pyx_v_n = (__pyx_v_n + 1);

        /* "thinc/linear/avgtron.pyx":203
 *             feat = <const SparseArrayC*>feat_addr
 *             while feat.key >= 0:
 *                 if feat.val != 0:             # <<<<<<<<<<<<<<
 *                     n += 1
 *                 feat += 1
 */
      }

      /* "thinc/linear/avgtron.pyx":205
 *                 if feat.val != 0:
 *                     n += 1
 *                 feat += 1             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
      __pyx_v_feat = (__pyx_v_feat + 1);
    }

    /* "thinc/linear/avgtron.pyx":198
 *         n = 0
 *         cdef size_t feat_addr
 *         for feat_addr in self.weights.values():             # <<<<<<<<<<<<<<
 *             if feat_addr == 0:
 *                 continue
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":206
 *                     n += 1
 *                 feat += 1
 *         return n             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":195
 * 
 *     @property
 *     def nr_weight(self):             # <<<<<<<<<<<<<<
 *         n = 0
 *         cdef size_t feat_addr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.nr_weight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":209
 * 
 *     @property
 *     def nr_feat(self):             # <<<<<<<<<<<<<<
 *         return self.extracter.nr_templ
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7nr_feat_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7nr_feat_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_7nr_feat___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_7nr_feat___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "thinc/linear/avgtron.pyx":210
 *     @property
 *     def nr_feat(self):
 *         return self.extracter.nr_templ             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_scoresC(self, weight_t* scores,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->extracter->nr_templ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":209
 * 
 *     @property
 *     def nr_feat(self):             # <<<<<<<<<<<<<<
 *         return self.extracter.nr_templ
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.nr_feat.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":212
 *         return self.extracter.nr_templ
 * 
 *     cdef void set_scoresC(self, weight_t* scores,             # <<<<<<<<<<<<<<
 *             const FeatureC* feats, int nr_feat) nogil:
 *         # This is the main bottle-neck of spaCy --- where we spend all our time.
 */

static void __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_set_scoresC(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_scores, struct __pyx_t_5thinc_7structs_FeatureC const *__pyx_v_feats, int __pyx_v_nr_feat) {
  struct __pyx_t_7preshed_4maps_MapStruct const *__pyx_v_weights_table;
  int __pyx_v_i;
  struct __pyx_t_5thinc_7structs_FeatureC __pyx_v_feat;
  struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_class_weights;
  struct __pyx_t_7preshed_4maps_MapStruct *__pyx_t_1;
  struct __pyx_t_5thinc_7structs_FeatureC const *__pyx_t_2;
  struct __pyx_t_5thinc_7structs_FeatureC const *__pyx_t_3;
  struct __pyx_t_5thinc_7structs_FeatureC const *__pyx_t_4;
  int __pyx_t_5;
  int32_t __pyx_t_6;

  /* "thinc/linear/avgtron.pyx":221
 *         #
 *         # I think the bottle-neck is actually reading the weights from main memory.
 *         cdef const MapStruct* weights_table = self.weights.c_map             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef FeatureC feat
 */
  __pyx_t_1 = __pyx_v_self->weights->c_map;
  __pyx_v_weights_table = __pyx_t_1;

  /* "thinc/linear/avgtron.pyx":224
 *         cdef int i
 *         cdef FeatureC feat
 *         for feat in feats[:nr_feat]:             # <<<<<<<<<<<<<<
 *             class_weights = <const SparseArrayC*>map_get(weights_table, feat.key)
 *             if class_weights != NULL:
 */
  __pyx_t_3 = (__pyx_v_feats + __pyx_v_nr_feat);
  for (__pyx_t_4 = __pyx_v_feats; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_feat = (__pyx_t_2[0]);

    /* "thinc/linear/avgtron.pyx":225
 *         cdef FeatureC feat
 *         for feat in feats[:nr_feat]:
 *             class_weights = <const SparseArrayC*>map_get(weights_table, feat.key)             # <<<<<<<<<<<<<<
 *             if class_weights != NULL:
 *                 i = 0
 */
    __pyx_v_class_weights = ((struct __pyx_t_5thinc_7structs_SparseArrayC const *)__pyx_f_7preshed_4maps_map_get(__pyx_v_weights_table, __pyx_v_feat.key));

    /* "thinc/linear/avgtron.pyx":226
 *         for feat in feats[:nr_feat]:
 *             class_weights = <const SparseArrayC*>map_get(weights_table, feat.key)
 *             if class_weights != NULL:             # <<<<<<<<<<<<<<
 *                 i = 0
 *                 while class_weights[i].key >= 0:
 */
    __pyx_t_5 = ((__pyx_v_class_weights != NULL) != 0);
    if (__pyx_t_5) {

      /* "thinc/linear/avgtron.pyx":227
 *             class_weights = <const SparseArrayC*>map_get(weights_table, feat.key)
 *             if class_weights != NULL:
 *                 i = 0             # <<<<<<<<<<<<<<
 *                 while class_weights[i].key >= 0:
 *                     scores[class_weights[i].key] += class_weights[i].val * feat.value
 */
      __pyx_v_i = 0;

      /* "thinc/linear/avgtron.pyx":228
 *             if class_weights != NULL:
 *                 i = 0
 *                 while class_weights[i].key >= 0:             # <<<<<<<<<<<<<<
 *                     scores[class_weights[i].key] += class_weights[i].val * feat.value
 *                     i += 1
 */
      while (1) {
        __pyx_t_5 = (((__pyx_v_class_weights[__pyx_v_i]).key >= 0) != 0);
        if (!__pyx_t_5) break;

        /* "thinc/linear/avgtron.pyx":229
 *                 i = 0
 *                 while class_weights[i].key >= 0:
 *                     scores[class_weights[i].key] += class_weights[i].val * feat.value             # <<<<<<<<<<<<<<
 *                     i += 1
 * 
 */
        __pyx_t_6 = (__pyx_v_class_weights[__pyx_v_i]).key;
        (__pyx_v_scores[__pyx_t_6]) = ((__pyx_v_scores[__pyx_t_6]) + ((__pyx_v_class_weights[__pyx_v_i]).val * __pyx_v_feat.value));

        /* "thinc/linear/avgtron.pyx":230
 *                 while class_weights[i].key >= 0:
 *                     scores[class_weights[i].key] += class_weights[i].val * feat.value
 *                     i += 1             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
        __pyx_v_i = (__pyx_v_i + 1);
      }

      /* "thinc/linear/avgtron.pyx":226
 *         for feat in feats[:nr_feat]:
 *             class_weights = <const SparseArrayC*>map_get(weights_table, feat.key)
 *             if class_weights != NULL:             # <<<<<<<<<<<<<<
 *                 i = 0
 *                 while class_weights[i].key >= 0:
 */
    }
  }

  /* "thinc/linear/avgtron.pyx":212
 *         return self.extracter.nr_templ
 * 
 *     cdef void set_scoresC(self, weight_t* scores,             # <<<<<<<<<<<<<<
 *             const FeatureC* feats, int nr_feat) nogil:
 *         # This is the main bottle-neck of spaCy --- where we spend all our time.
 */

  /* function exit code */
}

/* "thinc/linear/avgtron.pyx":233
 * 
 *     @cython.cdivision(True)
 *     cdef int updateC(self, const ExampleC* eg) except -1:             # <<<<<<<<<<<<<<
 *         self.time += 1
 *         guess = VecVec.arg_max_if_true(eg.scores, eg.is_valid, eg.nr_class)
 */

static int __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_updateC(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, struct __pyx_t_5thinc_7structs_ExampleC const *__pyx_v_eg) {
  int __pyx_v_guess;
  int __pyx_v_best;
  struct __pyx_t_5thinc_7structs_FeatureC __pyx_v_feat;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_t_5thinc_7structs_FeatureC *__pyx_t_2;
  struct __pyx_t_5thinc_7structs_FeatureC *__pyx_t_3;
  struct __pyx_t_5thinc_7structs_FeatureC *__pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("updateC", 0);

  /* "thinc/linear/avgtron.pyx":234
 *     @cython.cdivision(True)
 *     cdef int updateC(self, const ExampleC* eg) except -1:
 *         self.time += 1             # <<<<<<<<<<<<<<
 *         guess = VecVec.arg_max_if_true(eg.scores, eg.is_valid, eg.nr_class)
 *         if eg.costs[guess] > 0:
 */
  __pyx_v_self->time = (__pyx_v_self->time + 1);

  /* "thinc/linear/avgtron.pyx":235
 *     cdef int updateC(self, const ExampleC* eg) except -1:
 *         self.time += 1
 *         guess = VecVec.arg_max_if_true(eg.scores, eg.is_valid, eg.nr_class)             # <<<<<<<<<<<<<<
 *         if eg.costs[guess] > 0:
 *             best = VecVec.arg_max_if_zero(eg.scores, eg.costs, eg.nr_class)
 */
  __pyx_v_guess = __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_true(__pyx_v_eg->scores, __pyx_v_eg->is_valid, __pyx_v_eg->nr_class);

  /* "thinc/linear/avgtron.pyx":236
 *         self.time += 1
 *         guess = VecVec.arg_max_if_true(eg.scores, eg.is_valid, eg.nr_class)
 *         if eg.costs[guess] > 0:             # <<<<<<<<<<<<<<
 *             best = VecVec.arg_max_if_zero(eg.scores, eg.costs, eg.nr_class)
 *             for feat in eg.features[:eg.nr_feat]:
 */
  __pyx_t_1 = (((__pyx_v_eg->costs[__pyx_v_guess]) > 0.0) != 0);
  if (__pyx_t_1) {

    /* "thinc/linear/avgtron.pyx":237
 *         guess = VecVec.arg_max_if_true(eg.scores, eg.is_valid, eg.nr_class)
 *         if eg.costs[guess] > 0:
 *             best = VecVec.arg_max_if_zero(eg.scores, eg.costs, eg.nr_class)             # <<<<<<<<<<<<<<
 *             for feat in eg.features[:eg.nr_feat]:
 *                 self.update_weight(feat.key, best,  -feat.value * eg.costs[guess])
 */
    __pyx_v_best = __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_zero(__pyx_v_eg->scores, __pyx_v_eg->costs, __pyx_v_eg->nr_class);

    /* "thinc/linear/avgtron.pyx":238
 *         if eg.costs[guess] > 0:
 *             best = VecVec.arg_max_if_zero(eg.scores, eg.costs, eg.nr_class)
 *             for feat in eg.features[:eg.nr_feat]:             # <<<<<<<<<<<<<<
 *                 self.update_weight(feat.key, best,  -feat.value * eg.costs[guess])
 *                 self.update_weight(feat.key, guess, feat.value * eg.costs[guess])
 */
    __pyx_t_3 = (__pyx_v_eg->features + __pyx_v_eg->nr_feat);
    for (__pyx_t_4 = __pyx_v_eg->features; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
      __pyx_t_2 = __pyx_t_4;
      __pyx_v_feat = (__pyx_t_2[0]);

      /* "thinc/linear/avgtron.pyx":239
 *             best = VecVec.arg_max_if_zero(eg.scores, eg.costs, eg.nr_class)
 *             for feat in eg.features[:eg.nr_feat]:
 *                 self.update_weight(feat.key, best,  -feat.value * eg.costs[guess])             # <<<<<<<<<<<<<<
 *                 self.update_weight(feat.key, guess, feat.value * eg.costs[guess])
 * 
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self->__pyx_vtab)->update_weight(__pyx_v_self, __pyx_v_feat.key, __pyx_v_best, ((-__pyx_v_feat.value) * (__pyx_v_eg->costs[__pyx_v_guess])), 0); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 239, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":240
 *             for feat in eg.features[:eg.nr_feat]:
 *                 self.update_weight(feat.key, best,  -feat.value * eg.costs[guess])
 *                 self.update_weight(feat.key, guess, feat.value * eg.costs[guess])             # <<<<<<<<<<<<<<
 * 
 *     cpdef int update_weight(self, feat_t feat_id, class_t clas,
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self->__pyx_vtab)->update_weight(__pyx_v_self, __pyx_v_feat.key, __pyx_v_guess, (__pyx_v_feat.value * (__pyx_v_eg->costs[__pyx_v_guess])), 0); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 240, __pyx_L1_error)
    }

    /* "thinc/linear/avgtron.pyx":236
 *         self.time += 1
 *         guess = VecVec.arg_max_if_true(eg.scores, eg.is_valid, eg.nr_class)
 *         if eg.costs[guess] > 0:             # <<<<<<<<<<<<<<
 *             best = VecVec.arg_max_if_zero(eg.scores, eg.costs, eg.nr_class)
 *             for feat in eg.features[:eg.nr_feat]:
 */
  }

  /* "thinc/linear/avgtron.pyx":233
 * 
 *     @cython.cdivision(True)
 *     cdef int updateC(self, const ExampleC* eg) except -1:             # <<<<<<<<<<<<<<
 *         self.time += 1
 *         guess = VecVec.arg_max_if_true(eg.scores, eg.is_valid, eg.nr_class)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.updateC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":242
 *                 self.update_weight(feat.key, guess, feat.value * eg.costs[guess])
 * 
 *     cpdef int update_weight(self, feat_t feat_id, class_t clas,             # <<<<<<<<<<<<<<
 *             weight_t grad) except -1:
 *         if grad == 0:
 */

static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_21update_weight(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad, int __pyx_skip_dispatch) {
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat;
  __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc __pyx_v_msg;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc __pyx_t_13;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_t_14;
  __Pyx_RefNannySetupContext("update_weight", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_weight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_21update_weight)) {
        __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_feat_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyInt_From_int32_t(__pyx_v_clas); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_grad); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 242, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "thinc/linear/avgtron.pyx":244
 *     cpdef int update_weight(self, feat_t feat_id, class_t clas,
 *             weight_t grad) except -1:
 *         if grad == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         if len(self.averages) == 0 and len(self.weights) != 0:
 */
  __pyx_t_10 = ((__pyx_v_grad == 0.0) != 0);
  if (__pyx_t_10) {

    /* "thinc/linear/avgtron.pyx":245
 *             weight_t grad) except -1:
 *         if grad == 0:
 *             return 0             # <<<<<<<<<<<<<<
 *         if len(self.averages) == 0 and len(self.weights) != 0:
 *             self.resume_training()
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "thinc/linear/avgtron.pyx":244
 *     cpdef int update_weight(self, feat_t feat_id, class_t clas,
 *             weight_t grad) except -1:
 *         if grad == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         if len(self.averages) == 0 and len(self.weights) != 0:
 */
  }

  /* "thinc/linear/avgtron.pyx":246
 *         if grad == 0:
 *             return 0
 *         if len(self.averages) == 0 and len(self.weights) != 0:             # <<<<<<<<<<<<<<
 *             self.resume_training()
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->averages);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = ((__pyx_t_11 == 0) != 0);
  if (__pyx_t_12) {
  } else {
    __pyx_t_10 = __pyx_t_12;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_self->weights);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = ((__pyx_t_11 != 0) != 0);
  __pyx_t_10 = __pyx_t_12;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_10) {

    /* "thinc/linear/avgtron.pyx":247
 *             return 0
 *         if len(self.averages) == 0 and len(self.weights) != 0:
 *             self.resume_training()             # <<<<<<<<<<<<<<
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resume_training); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "thinc/linear/avgtron.pyx":246
 *         if grad == 0:
 *             return 0
 *         if len(self.averages) == 0 and len(self.weights) != 0:             # <<<<<<<<<<<<<<
 *             self.resume_training()
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 */
  }

  /* "thinc/linear/avgtron.pyx":248
 *         if len(self.averages) == 0 and len(self.weights) != 0:
 *             self.resume_training()
 *         feat = <SparseAverageC*>self.averages.get(feat_id)             # <<<<<<<<<<<<<<
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 */
  __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->averages->__pyx_vtab)->get(__pyx_v_self->averages, __pyx_v_feat_id));

  /* "thinc/linear/avgtron.pyx":249
 *             self.resume_training()
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:             # <<<<<<<<<<<<<<
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:
 */
  __pyx_t_10 = ((__pyx_v_feat == NULL) != 0);
  if (__pyx_t_10) {

    /* "thinc/linear/avgtron.pyx":250
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))             # <<<<<<<<<<<<<<
 *             if feat is NULL:
 *                 msg = (feat_id, clas, grad)
 */
    __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)PyMem_Malloc((sizeof(struct __pyx_t_5thinc_7structs_SparseAverageC))));

    /* "thinc/linear/avgtron.pyx":251
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:             # <<<<<<<<<<<<<<
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 */
    __pyx_t_10 = ((__pyx_v_feat == NULL) != 0);
    if (unlikely(__pyx_t_10)) {

      /* "thinc/linear/avgtron.pyx":252
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:
 *                 msg = (feat_id, clas, grad)             # <<<<<<<<<<<<<<
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 *             feat.curr  = SparseArray.init(clas, grad)
 */
      __pyx_t_13.f0 = __pyx_v_feat_id;
      __pyx_t_13.f1 = __pyx_v_clas;
      __pyx_t_13.f2 = __pyx_v_grad;
      __pyx_v_msg = __pyx_t_13;

      /* "thinc/linear/avgtron.pyx":253
 *             if feat is NULL:
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)             # <<<<<<<<<<<<<<
 *             feat.curr  = SparseArray.init(clas, grad)
 *             feat.avgs  = SparseArray.init(clas, 0)
 */
      __pyx_t_1 = __pyx_convert__to_py___pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc(__pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Error_allocating_memory_for_feat, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_MemoryError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 253, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":251
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:             # <<<<<<<<<<<<<<
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 */
    }

    /* "thinc/linear/avgtron.pyx":254
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 *             feat.curr  = SparseArray.init(clas, grad)             # <<<<<<<<<<<<<<
 *             feat.avgs  = SparseArray.init(clas, 0)
 *             feat.times = SparseArray.init(clas, <weight_t>self.time)
 */
    __pyx_t_14 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, __pyx_v_grad); if (unlikely(__pyx_t_14 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 254, __pyx_L1_error)
    __pyx_v_feat->curr = __pyx_t_14;

    /* "thinc/linear/avgtron.pyx":255
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 *             feat.curr  = SparseArray.init(clas, grad)
 *             feat.avgs  = SparseArray.init(clas, 0)             # <<<<<<<<<<<<<<
 *             feat.times = SparseArray.init(clas, <weight_t>self.time)
 *             self.averages.set(feat_id, feat)
 */
    __pyx_t_14 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, 0.0); if (unlikely(__pyx_t_14 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 255, __pyx_L1_error)
    __pyx_v_feat->avgs = __pyx_t_14;

    /* "thinc/linear/avgtron.pyx":256
 *             feat.curr  = SparseArray.init(clas, grad)
 *             feat.avgs  = SparseArray.init(clas, 0)
 *             feat.times = SparseArray.init(clas, <weight_t>self.time)             # <<<<<<<<<<<<<<
 *             self.averages.set(feat_id, feat)
 *             feat.mom1 = NULL
 */
    __pyx_t_14 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, ((__pyx_t_5thinc_8typedefs_weight_t)__pyx_v_self->time)); if (unlikely(__pyx_t_14 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 256, __pyx_L1_error)
    __pyx_v_feat->times = __pyx_t_14;

    /* "thinc/linear/avgtron.pyx":257
 *             feat.avgs  = SparseArray.init(clas, 0)
 *             feat.times = SparseArray.init(clas, <weight_t>self.time)
 *             self.averages.set(feat_id, feat)             # <<<<<<<<<<<<<<
 *             feat.mom1 = NULL
 *             feat.mom2 = NULL
 */
    ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->averages->__pyx_vtab)->set(__pyx_v_self->averages, __pyx_v_feat_id, __pyx_v_feat); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)

    /* "thinc/linear/avgtron.pyx":258
 *             feat.times = SparseArray.init(clas, <weight_t>self.time)
 *             self.averages.set(feat_id, feat)
 *             feat.mom1 = NULL             # <<<<<<<<<<<<<<
 *             feat.mom2 = NULL
 *             feat.penalties = NULL
 */
    __pyx_v_feat->mom1 = NULL;

    /* "thinc/linear/avgtron.pyx":259
 *             self.averages.set(feat_id, feat)
 *             feat.mom1 = NULL
 *             feat.mom2 = NULL             # <<<<<<<<<<<<<<
 *             feat.penalties = NULL
 *             self.weights.set(feat_id, feat.curr)
 */
    __pyx_v_feat->mom2 = NULL;

    /* "thinc/linear/avgtron.pyx":260
 *             feat.mom1 = NULL
 *             feat.mom2 = NULL
 *             feat.penalties = NULL             # <<<<<<<<<<<<<<
 *             self.weights.set(feat_id, feat.curr)
 *         else:
 */
    __pyx_v_feat->penalties = NULL;

    /* "thinc/linear/avgtron.pyx":261
 *             feat.mom2 = NULL
 *             feat.penalties = NULL
 *             self.weights.set(feat_id, feat.curr)             # <<<<<<<<<<<<<<
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)
 */
    ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->weights->__pyx_vtab)->set(__pyx_v_self->weights, __pyx_v_feat_id, __pyx_v_feat->curr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)

    /* "thinc/linear/avgtron.pyx":249
 *             self.resume_training()
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:             # <<<<<<<<<<<<<<
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:
 */
    goto __pyx_L7;
  }

  /* "thinc/linear/avgtron.pyx":263
 *             self.weights.set(feat_id, feat.curr)
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)             # <<<<<<<<<<<<<<
 *             if i < 0:
 *                 feat.curr = SparseArray.resize(feat.curr)
 */
  /*else*/ {
    __pyx_t_8 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(__pyx_v_feat->curr, __pyx_v_clas); if (unlikely(__pyx_t_8 == ((int)-2))) __PYX_ERR(0, 263, __pyx_L1_error)
    __pyx_v_i = __pyx_t_8;

    /* "thinc/linear/avgtron.pyx":264
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)
 *             if i < 0:             # <<<<<<<<<<<<<<
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 */
    __pyx_t_10 = ((__pyx_v_i < 0) != 0);
    if (__pyx_t_10) {

      /* "thinc/linear/avgtron.pyx":265
 *             i = SparseArray.find_key(feat.curr, clas)
 *             if i < 0:
 *                 feat.curr = SparseArray.resize(feat.curr)             # <<<<<<<<<<<<<<
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 *                 feat.times = SparseArray.resize(feat.times)
 */
      __pyx_t_14 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->curr); if (unlikely(__pyx_t_14 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 265, __pyx_L1_error)
      __pyx_v_feat->curr = __pyx_t_14;

      /* "thinc/linear/avgtron.pyx":266
 *             if i < 0:
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.avgs = SparseArray.resize(feat.avgs)             # <<<<<<<<<<<<<<
 *                 feat.times = SparseArray.resize(feat.times)
 *                 self.weights.set(feat_id, feat.curr)
 */
      __pyx_t_14 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->avgs); if (unlikely(__pyx_t_14 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 266, __pyx_L1_error)
      __pyx_v_feat->avgs = __pyx_t_14;

      /* "thinc/linear/avgtron.pyx":267
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 *                 feat.times = SparseArray.resize(feat.times)             # <<<<<<<<<<<<<<
 *                 self.weights.set(feat_id, feat.curr)
 *                 i = SparseArray.find_key(feat.curr, clas)
 */
      __pyx_t_14 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->times); if (unlikely(__pyx_t_14 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 267, __pyx_L1_error)
      __pyx_v_feat->times = __pyx_t_14;

      /* "thinc/linear/avgtron.pyx":268
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 *                 feat.times = SparseArray.resize(feat.times)
 *                 self.weights.set(feat_id, feat.curr)             # <<<<<<<<<<<<<<
 *                 i = SparseArray.find_key(feat.curr, clas)
 *             feat.curr[i].key = clas
 */
      ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->weights->__pyx_vtab)->set(__pyx_v_self->weights, __pyx_v_feat_id, __pyx_v_feat->curr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":269
 *                 feat.times = SparseArray.resize(feat.times)
 *                 self.weights.set(feat_id, feat.curr)
 *                 i = SparseArray.find_key(feat.curr, clas)             # <<<<<<<<<<<<<<
 *             feat.curr[i].key = clas
 *             feat.avgs[i].key = clas
 */
      __pyx_t_8 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(__pyx_v_feat->curr, __pyx_v_clas); if (unlikely(__pyx_t_8 == ((int)-2))) __PYX_ERR(0, 269, __pyx_L1_error)
      __pyx_v_i = __pyx_t_8;

      /* "thinc/linear/avgtron.pyx":264
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)
 *             if i < 0:             # <<<<<<<<<<<<<<
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 */
    }

    /* "thinc/linear/avgtron.pyx":270
 *                 self.weights.set(feat_id, feat.curr)
 *                 i = SparseArray.find_key(feat.curr, clas)
 *             feat.curr[i].key = clas             # <<<<<<<<<<<<<<
 *             feat.avgs[i].key = clas
 *             feat.times[i].key = clas
 */
    (__pyx_v_feat->curr[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":271
 *                 i = SparseArray.find_key(feat.curr, clas)
 *             feat.curr[i].key = clas
 *             feat.avgs[i].key = clas             # <<<<<<<<<<<<<<
 *             feat.times[i].key = clas
 *             # Apply the last round of updates, multiplied by the time unchanged
 */
    (__pyx_v_feat->avgs[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":272
 *             feat.curr[i].key = clas
 *             feat.avgs[i].key = clas
 *             feat.times[i].key = clas             # <<<<<<<<<<<<<<
 *             # Apply the last round of updates, multiplied by the time unchanged
 *             feat.avgs[i].val += (self.time - feat.times[i].val) * feat.curr[i].val
 */
    (__pyx_v_feat->times[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":274
 *             feat.times[i].key = clas
 *             # Apply the last round of updates, multiplied by the time unchanged
 *             feat.avgs[i].val += (self.time - feat.times[i].val) * feat.curr[i].val             # <<<<<<<<<<<<<<
 *             feat.curr[i].val -= grad
 *             feat.times[i].val = self.time
 */
    __pyx_t_8 = __pyx_v_i;
    (__pyx_v_feat->avgs[__pyx_t_8]).val = ((__pyx_v_feat->avgs[__pyx_t_8]).val + ((__pyx_v_self->time - (__pyx_v_feat->times[__pyx_v_i]).val) * (__pyx_v_feat->curr[__pyx_v_i]).val));

    /* "thinc/linear/avgtron.pyx":275
 *             # Apply the last round of updates, multiplied by the time unchanged
 *             feat.avgs[i].val += (self.time - feat.times[i].val) * feat.curr[i].val
 *             feat.curr[i].val -= grad             # <<<<<<<<<<<<<<
 *             feat.times[i].val = self.time
 * 
 */
    __pyx_t_8 = __pyx_v_i;
    (__pyx_v_feat->curr[__pyx_t_8]).val = ((__pyx_v_feat->curr[__pyx_t_8]).val - __pyx_v_grad);

    /* "thinc/linear/avgtron.pyx":276
 *             feat.avgs[i].val += (self.time - feat.times[i].val) * feat.curr[i].val
 *             feat.curr[i].val -= grad
 *             feat.times[i].val = self.time             # <<<<<<<<<<<<<<
 * 
 *     cpdef int update_weight_ftrl(
 */
    __pyx_t_8 = __pyx_v_self->time;
    (__pyx_v_feat->times[__pyx_v_i]).val = __pyx_t_8;
  }
  __pyx_L7:;

  /* "thinc/linear/avgtron.pyx":242
 *                 self.update_weight(feat.key, guess, feat.value * eg.costs[guess])
 * 
 *     cpdef int update_weight(self, feat_t feat_id, class_t clas,             # <<<<<<<<<<<<<<
 *             weight_t grad) except -1:
 *         if grad == 0:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.update_weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_21update_weight(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_21update_weight(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id;
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_weight (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_feat_id,&__pyx_n_s_clas,&__pyx_n_s_grad,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feat_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_weight", 1, 3, 3, 1); __PYX_ERR(0, 242, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grad)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_weight", 1, 3, 3, 2); __PYX_ERR(0, 242, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update_weight") < 0)) __PYX_ERR(0, 242, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_feat_id = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_feat_id == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L3_error)
    __pyx_v_clas = __Pyx_PyInt_As_int32_t(values[1]); if (unlikely((__pyx_v_clas == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L3_error)
    __pyx_v_grad = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_grad == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_weight", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 242, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.update_weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_20update_weight(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), __pyx_v_feat_id, __pyx_v_clas, __pyx_v_grad);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_20update_weight(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("update_weight", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight(__pyx_v_self, __pyx_v_feat_id, __pyx_v_clas, __pyx_v_grad, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.update_weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":278
 *             feat.times[i].val = self.time
 * 
 *     cpdef int update_weight_ftrl(             # <<<<<<<<<<<<<<
 *             self, feat_t feat_id, class_t clas, weight_t grad) except -1:
 *         if grad == 0:
 */

static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_23update_weight_ftrl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight_ftrl(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad, int __pyx_skip_dispatch) {
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat;
  __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc __pyx_v_msg;
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc __pyx_t_11;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_t_12;
  long __pyx_t_13;
  __Pyx_RefNannySetupContext("update_weight_ftrl", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_weight_ftrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_23update_weight_ftrl)) {
        __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_feat_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyInt_From_int32_t(__pyx_v_clas); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_grad); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 278, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "thinc/linear/avgtron.pyx":280
 *     cpdef int update_weight_ftrl(
 *             self, feat_t feat_id, class_t clas, weight_t grad) except -1:
 *         if grad == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 */
  __pyx_t_10 = ((__pyx_v_grad == 0.0) != 0);
  if (__pyx_t_10) {

    /* "thinc/linear/avgtron.pyx":281
 *             self, feat_t feat_id, class_t clas, weight_t grad) except -1:
 *         if grad == 0:
 *             return 0             # <<<<<<<<<<<<<<
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "thinc/linear/avgtron.pyx":280
 *     cpdef int update_weight_ftrl(
 *             self, feat_t feat_id, class_t clas, weight_t grad) except -1:
 *         if grad == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 */
  }

  /* "thinc/linear/avgtron.pyx":282
 *         if grad == 0:
 *             return 0
 *         feat = <SparseAverageC*>self.averages.get(feat_id)             # <<<<<<<<<<<<<<
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 */
  __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->averages->__pyx_vtab)->get(__pyx_v_self->averages, __pyx_v_feat_id));

  /* "thinc/linear/avgtron.pyx":283
 *             return 0
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:             # <<<<<<<<<<<<<<
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:
 */
  __pyx_t_10 = ((__pyx_v_feat == NULL) != 0);
  if (__pyx_t_10) {

    /* "thinc/linear/avgtron.pyx":284
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))             # <<<<<<<<<<<<<<
 *             if feat is NULL:
 *                 msg = (feat_id, clas, grad)
 */
    __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)PyMem_Malloc((sizeof(struct __pyx_t_5thinc_7structs_SparseAverageC))));

    /* "thinc/linear/avgtron.pyx":285
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:             # <<<<<<<<<<<<<<
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 */
    __pyx_t_10 = ((__pyx_v_feat == NULL) != 0);
    if (unlikely(__pyx_t_10)) {

      /* "thinc/linear/avgtron.pyx":286
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:
 *                 msg = (feat_id, clas, grad)             # <<<<<<<<<<<<<<
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 *             feat.curr  = SparseArray.init(clas, 0)
 */
      __pyx_t_11.f0 = __pyx_v_feat_id;
      __pyx_t_11.f1 = __pyx_v_clas;
      __pyx_t_11.f2 = __pyx_v_grad;
      __pyx_v_msg = __pyx_t_11;

      /* "thinc/linear/avgtron.pyx":287
 *             if feat is NULL:
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)             # <<<<<<<<<<<<<<
 *             feat.curr  = SparseArray.init(clas, 0)
 *             feat.mom1  = SparseArray.init(clas, 0)
 */
      __pyx_t_1 = __pyx_convert__to_py___pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc(__pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Error_allocating_memory_for_feat, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_MemoryError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 287, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":285
 *         if feat == NULL:
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:             # <<<<<<<<<<<<<<
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 */
    }

    /* "thinc/linear/avgtron.pyx":288
 *                 msg = (feat_id, clas, grad)
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 *             feat.curr  = SparseArray.init(clas, 0)             # <<<<<<<<<<<<<<
 *             feat.mom1  = SparseArray.init(clas, 0)
 *             feat.mom2  = SparseArray.init(clas, 0)
 */
    __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, 0.0); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_v_feat->curr = __pyx_t_12;

    /* "thinc/linear/avgtron.pyx":289
 *                 raise MemoryError("Error allocating memory for feature: %s" % msg)
 *             feat.curr  = SparseArray.init(clas, 0)
 *             feat.mom1  = SparseArray.init(clas, 0)             # <<<<<<<<<<<<<<
 *             feat.mom2  = SparseArray.init(clas, 0)
 *             feat.penalties  = SparseArray.init(clas, 0)
 */
    __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, 0.0); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 289, __pyx_L1_error)
    __pyx_v_feat->mom1 = __pyx_t_12;

    /* "thinc/linear/avgtron.pyx":290
 *             feat.curr  = SparseArray.init(clas, 0)
 *             feat.mom1  = SparseArray.init(clas, 0)
 *             feat.mom2  = SparseArray.init(clas, 0)             # <<<<<<<<<<<<<<
 *             feat.penalties  = SparseArray.init(clas, 0)
 *             feat.avgs  = SparseArray.init(clas, 0)
 */
    __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, 0.0); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_v_feat->mom2 = __pyx_t_12;

    /* "thinc/linear/avgtron.pyx":291
 *             feat.mom1  = SparseArray.init(clas, 0)
 *             feat.mom2  = SparseArray.init(clas, 0)
 *             feat.penalties  = SparseArray.init(clas, 0)             # <<<<<<<<<<<<<<
 *             feat.avgs  = SparseArray.init(clas, 0)
 *             feat.times = SparseArray.init(clas, 0)
 */
    __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, 0.0); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 291, __pyx_L1_error)
    __pyx_v_feat->penalties = __pyx_t_12;

    /* "thinc/linear/avgtron.pyx":292
 *             feat.mom2  = SparseArray.init(clas, 0)
 *             feat.penalties  = SparseArray.init(clas, 0)
 *             feat.avgs  = SparseArray.init(clas, 0)             # <<<<<<<<<<<<<<
 *             feat.times = SparseArray.init(clas, 0)
 *             self.averages.set(feat_id, feat)
 */
    __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, 0.0); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_v_feat->avgs = __pyx_t_12;

    /* "thinc/linear/avgtron.pyx":293
 *             feat.penalties  = SparseArray.init(clas, 0)
 *             feat.avgs  = SparseArray.init(clas, 0)
 *             feat.times = SparseArray.init(clas, 0)             # <<<<<<<<<<<<<<
 *             self.averages.set(feat_id, feat)
 *             self.weights.set(feat_id, feat.curr)
 */
    __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_init(__pyx_v_clas, 0.0); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 293, __pyx_L1_error)
    __pyx_v_feat->times = __pyx_t_12;

    /* "thinc/linear/avgtron.pyx":294
 *             feat.avgs  = SparseArray.init(clas, 0)
 *             feat.times = SparseArray.init(clas, 0)
 *             self.averages.set(feat_id, feat)             # <<<<<<<<<<<<<<
 *             self.weights.set(feat_id, feat.curr)
 *             i = 0
 */
    ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->averages->__pyx_vtab)->set(__pyx_v_self->averages, __pyx_v_feat_id, __pyx_v_feat); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)

    /* "thinc/linear/avgtron.pyx":295
 *             feat.times = SparseArray.init(clas, 0)
 *             self.averages.set(feat_id, feat)
 *             self.weights.set(feat_id, feat.curr)             # <<<<<<<<<<<<<<
 *             i = 0
 *         else:
 */
    ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->weights->__pyx_vtab)->set(__pyx_v_self->weights, __pyx_v_feat_id, __pyx_v_feat->curr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)

    /* "thinc/linear/avgtron.pyx":296
 *             self.averages.set(feat_id, feat)
 *             self.weights.set(feat_id, feat.curr)
 *             i = 0             # <<<<<<<<<<<<<<
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)
 */
    __pyx_v_i = 0;

    /* "thinc/linear/avgtron.pyx":283
 *             return 0
 *         feat = <SparseAverageC*>self.averages.get(feat_id)
 *         if feat == NULL:             # <<<<<<<<<<<<<<
 *             feat = <SparseAverageC*>PyMem_Malloc(sizeof(SparseAverageC))
 *             if feat is NULL:
 */
    goto __pyx_L4;
  }

  /* "thinc/linear/avgtron.pyx":298
 *             i = 0
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)             # <<<<<<<<<<<<<<
 *             if i < 0:
 *                 feat.curr = SparseArray.resize(feat.curr)
 */
  /*else*/ {
    __pyx_t_8 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(__pyx_v_feat->curr, __pyx_v_clas); if (unlikely(__pyx_t_8 == ((int)-2))) __PYX_ERR(0, 298, __pyx_L1_error)
    __pyx_v_i = __pyx_t_8;

    /* "thinc/linear/avgtron.pyx":299
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)
 *             if i < 0:             # <<<<<<<<<<<<<<
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.mom1 = SparseArray.resize(feat.mom1)
 */
    __pyx_t_10 = ((__pyx_v_i < 0) != 0);
    if (__pyx_t_10) {

      /* "thinc/linear/avgtron.pyx":300
 *             i = SparseArray.find_key(feat.curr, clas)
 *             if i < 0:
 *                 feat.curr = SparseArray.resize(feat.curr)             # <<<<<<<<<<<<<<
 *                 feat.mom1 = SparseArray.resize(feat.mom1)
 *                 feat.mom2 = SparseArray.resize(feat.mom2)
 */
      __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->curr); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 300, __pyx_L1_error)
      __pyx_v_feat->curr = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":301
 *             if i < 0:
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.mom1 = SparseArray.resize(feat.mom1)             # <<<<<<<<<<<<<<
 *                 feat.mom2 = SparseArray.resize(feat.mom2)
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 */
      __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->mom1); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 301, __pyx_L1_error)
      __pyx_v_feat->mom1 = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":302
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.mom1 = SparseArray.resize(feat.mom1)
 *                 feat.mom2 = SparseArray.resize(feat.mom2)             # <<<<<<<<<<<<<<
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 *                 feat.penalties = SparseArray.resize(feat.penalties)
 */
      __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->mom2); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 302, __pyx_L1_error)
      __pyx_v_feat->mom2 = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":303
 *                 feat.mom1 = SparseArray.resize(feat.mom1)
 *                 feat.mom2 = SparseArray.resize(feat.mom2)
 *                 feat.avgs = SparseArray.resize(feat.avgs)             # <<<<<<<<<<<<<<
 *                 feat.penalties = SparseArray.resize(feat.penalties)
 *                 feat.times = SparseArray.resize(feat.times)
 */
      __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->avgs); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 303, __pyx_L1_error)
      __pyx_v_feat->avgs = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":304
 *                 feat.mom2 = SparseArray.resize(feat.mom2)
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 *                 feat.penalties = SparseArray.resize(feat.penalties)             # <<<<<<<<<<<<<<
 *                 feat.times = SparseArray.resize(feat.times)
 *                 self.weights.set(feat_id, feat.curr)
 */
      __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->penalties); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 304, __pyx_L1_error)
      __pyx_v_feat->penalties = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":305
 *                 feat.avgs = SparseArray.resize(feat.avgs)
 *                 feat.penalties = SparseArray.resize(feat.penalties)
 *                 feat.times = SparseArray.resize(feat.times)             # <<<<<<<<<<<<<<
 *                 self.weights.set(feat_id, feat.curr)
 *                 i = SparseArray.find_key(feat.curr, clas)
 */
      __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(__pyx_v_feat->times); if (unlikely(__pyx_t_12 == ((struct __pyx_t_5thinc_7structs_SparseArrayC *)NULL))) __PYX_ERR(0, 305, __pyx_L1_error)
      __pyx_v_feat->times = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":306
 *                 feat.penalties = SparseArray.resize(feat.penalties)
 *                 feat.times = SparseArray.resize(feat.times)
 *                 self.weights.set(feat_id, feat.curr)             # <<<<<<<<<<<<<<
 *                 i = SparseArray.find_key(feat.curr, clas)
 *             feat.curr[i].key = clas
 */
      ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->weights->__pyx_vtab)->set(__pyx_v_self->weights, __pyx_v_feat_id, __pyx_v_feat->curr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)

      /* "thinc/linear/avgtron.pyx":307
 *                 feat.times = SparseArray.resize(feat.times)
 *                 self.weights.set(feat_id, feat.curr)
 *                 i = SparseArray.find_key(feat.curr, clas)             # <<<<<<<<<<<<<<
 *             feat.curr[i].key = clas
 *             feat.mom1[i].key = clas
 */
      __pyx_t_8 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(__pyx_v_feat->curr, __pyx_v_clas); if (unlikely(__pyx_t_8 == ((int)-2))) __PYX_ERR(0, 307, __pyx_L1_error)
      __pyx_v_i = __pyx_t_8;

      /* "thinc/linear/avgtron.pyx":299
 *         else:
 *             i = SparseArray.find_key(feat.curr, clas)
 *             if i < 0:             # <<<<<<<<<<<<<<
 *                 feat.curr = SparseArray.resize(feat.curr)
 *                 feat.mom1 = SparseArray.resize(feat.mom1)
 */
    }

    /* "thinc/linear/avgtron.pyx":308
 *                 self.weights.set(feat_id, feat.curr)
 *                 i = SparseArray.find_key(feat.curr, clas)
 *             feat.curr[i].key = clas             # <<<<<<<<<<<<<<
 *             feat.mom1[i].key = clas
 *             feat.mom2[i].key = clas
 */
    (__pyx_v_feat->curr[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":309
 *                 i = SparseArray.find_key(feat.curr, clas)
 *             feat.curr[i].key = clas
 *             feat.mom1[i].key = clas             # <<<<<<<<<<<<<<
 *             feat.mom2[i].key = clas
 *             feat.avgs[i].key = clas
 */
    (__pyx_v_feat->mom1[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":310
 *             feat.curr[i].key = clas
 *             feat.mom1[i].key = clas
 *             feat.mom2[i].key = clas             # <<<<<<<<<<<<<<
 *             feat.avgs[i].key = clas
 *             feat.penalties[i].key = clas
 */
    (__pyx_v_feat->mom2[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":311
 *             feat.mom1[i].key = clas
 *             feat.mom2[i].key = clas
 *             feat.avgs[i].key = clas             # <<<<<<<<<<<<<<
 *             feat.penalties[i].key = clas
 *             feat.times[i].key = clas
 */
    (__pyx_v_feat->avgs[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":312
 *             feat.mom2[i].key = clas
 *             feat.avgs[i].key = clas
 *             feat.penalties[i].key = clas             # <<<<<<<<<<<<<<
 *             feat.times[i].key = clas
 *             # Apply the last round of updates, multiplied by the time unchanged
 */
    (__pyx_v_feat->penalties[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":313
 *             feat.avgs[i].key = clas
 *             feat.penalties[i].key = clas
 *             feat.times[i].key = clas             # <<<<<<<<<<<<<<
 *             # Apply the last round of updates, multiplied by the time unchanged
 *             feat.avgs[i].val += (self.time - feat.times[i].val) * feat.curr[i].val
 */
    (__pyx_v_feat->times[__pyx_v_i]).key = __pyx_v_clas;

    /* "thinc/linear/avgtron.pyx":315
 *             feat.times[i].key = clas
 *             # Apply the last round of updates, multiplied by the time unchanged
 *             feat.avgs[i].val += (self.time - feat.times[i].val) * feat.curr[i].val             # <<<<<<<<<<<<<<
 *         adam_update(&feat.curr[i].val, &feat.mom1[i].val, &feat.mom2[i].val,
 *             self.time, feat.times[i].val, grad, self.learn_rate, self.momentum)
 */
    __pyx_t_13 = __pyx_v_i;
    (__pyx_v_feat->avgs[__pyx_t_13]).val = ((__pyx_v_feat->avgs[__pyx_t_13]).val + ((__pyx_v_self->time - (__pyx_v_feat->times[__pyx_v_i]).val) * (__pyx_v_feat->curr[__pyx_v_i]).val));
  }
  __pyx_L4:;

  /* "thinc/linear/avgtron.pyx":316
 *             # Apply the last round of updates, multiplied by the time unchanged
 *             feat.avgs[i].val += (self.time - feat.times[i].val) * feat.curr[i].val
 *         adam_update(&feat.curr[i].val, &feat.mom1[i].val, &feat.mom2[i].val,             # <<<<<<<<<<<<<<
 *             self.time, feat.times[i].val, grad, self.learn_rate, self.momentum)
 *         feat.times[i].val = self.time
 */
  __pyx_f_5thinc_6linear_7avgtron_adam_update((&(__pyx_v_feat->curr[__pyx_v_i]).val), (&(__pyx_v_feat->mom1[__pyx_v_i]).val), (&(__pyx_v_feat->mom2[__pyx_v_i]).val), __pyx_v_self->time, (__pyx_v_feat->times[__pyx_v_i]).val, __pyx_v_grad, __pyx_v_self->learn_rate, __pyx_v_self->momentum);

  /* "thinc/linear/avgtron.pyx":318
 *         adam_update(&feat.curr[i].val, &feat.mom1[i].val, &feat.mom2[i].val,
 *             self.time, feat.times[i].val, grad, self.learn_rate, self.momentum)
 *         feat.times[i].val = self.time             # <<<<<<<<<<<<<<
 *         # Apply cumulative L1 penalty, from here:
 *         # http://www.aclweb.org/anthology/P09-1054
 */
  __pyx_t_8 = __pyx_v_self->time;
  (__pyx_v_feat->times[__pyx_v_i]).val = __pyx_t_8;

  /* "thinc/linear/avgtron.pyx":321
 *         # Apply cumulative L1 penalty, from here:
 *         # http://www.aclweb.org/anthology/P09-1054
 *         apply_L1(feat.curr, feat.penalties,             # <<<<<<<<<<<<<<
 *             self.time * self.learn_rate * self.l1_penalty)
 *         # Group lasso
 */
  (void)(__pyx_f_5thinc_6linear_7avgtron_apply_L1(__pyx_v_feat->curr, __pyx_v_feat->penalties, ((__pyx_v_self->time * __pyx_v_self->learn_rate) * __pyx_v_self->l1_penalty)));

  /* "thinc/linear/avgtron.pyx":278
 *             feat.times[i].val = self.time
 * 
 *     cpdef int update_weight_ftrl(             # <<<<<<<<<<<<<<
 *             self, feat_t feat_id, class_t clas, weight_t grad) except -1:
 *         if grad == 0:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.update_weight_ftrl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_23update_weight_ftrl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_23update_weight_ftrl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id;
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_weight_ftrl (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_feat_id,&__pyx_n_s_clas,&__pyx_n_s_grad,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feat_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_weight_ftrl", 1, 3, 3, 1); __PYX_ERR(0, 278, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grad)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_weight_ftrl", 1, 3, 3, 2); __PYX_ERR(0, 278, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update_weight_ftrl") < 0)) __PYX_ERR(0, 278, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_feat_id = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_feat_id == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
    __pyx_v_clas = __Pyx_PyInt_As_int32_t(values[1]); if (unlikely((__pyx_v_clas == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
    __pyx_v_grad = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_grad == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_weight_ftrl", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 278, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.update_weight_ftrl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_22update_weight_ftrl(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), __pyx_v_feat_id, __pyx_v_clas, __pyx_v_grad);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_22update_weight_ftrl(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, __pyx_t_5thinc_8typedefs_feat_t __pyx_v_feat_id, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("update_weight_ftrl", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight_ftrl(__pyx_v_self, __pyx_v_feat_id, __pyx_v_clas, __pyx_v_grad, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.update_weight_ftrl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":11
 * 
 * cdef class AveragedPerceptron:
 *     cdef readonly Pool mem             # <<<<<<<<<<<<<<
 *     cdef readonly PreshMap weights
 *     cdef readonly PreshMap averages
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_3mem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_3mem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_3mem___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_3mem___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __pyx_r = ((PyObject *)__pyx_v_self->mem);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":12
 * cdef class AveragedPerceptron:
 *     cdef readonly Pool mem
 *     cdef readonly PreshMap weights             # <<<<<<<<<<<<<<
 *     cdef readonly PreshMap averages
 *     cdef readonly PreshMap lasso_ledger
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7weights_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7weights_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_7weights___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_7weights___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->weights));
  __pyx_r = ((PyObject *)__pyx_v_self->weights);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":13
 *     cdef readonly Pool mem
 *     cdef readonly PreshMap weights
 *     cdef readonly PreshMap averages             # <<<<<<<<<<<<<<
 *     cdef readonly PreshMap lasso_ledger
 *     cdef ConjunctionExtracter extracter
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8averages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8averages_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8averages___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8averages___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->averages));
  __pyx_r = ((PyObject *)__pyx_v_self->averages);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":14
 *     cdef readonly PreshMap weights
 *     cdef readonly PreshMap averages
 *     cdef readonly PreshMap lasso_ledger             # <<<<<<<<<<<<<<
 *     cdef ConjunctionExtracter extracter
 *     cdef public int time
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_12lasso_ledger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_12lasso_ledger_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_12lasso_ledger___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_12lasso_ledger___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->lasso_ledger));
  __pyx_r = ((PyObject *)__pyx_v_self->lasso_ledger);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":16
 *     cdef readonly PreshMap lasso_ledger
 *     cdef ConjunctionExtracter extracter
 *     cdef public int time             # <<<<<<<<<<<<<<
 *     cdef public weight_t learn_rate
 *     cdef public weight_t l1_penalty
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4time___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4time___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->time); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_2__set__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L1_error)
  __pyx_v_self->time = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":17
 *     cdef ConjunctionExtracter extracter
 *     cdef public int time
 *     cdef public weight_t learn_rate             # <<<<<<<<<<<<<<
 *     cdef public weight_t l1_penalty
 *     cdef public weight_t momentum
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->learn_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.learn_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_2__set__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_v_self->learn_rate = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.learn_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":18
 *     cdef public int time
 *     cdef public weight_t learn_rate
 *     cdef public weight_t l1_penalty             # <<<<<<<<<<<<<<
 *     cdef public weight_t momentum
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->l1_penalty); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.l1_penalty.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_2__set__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 18, __pyx_L1_error)
  __pyx_v_self->l1_penalty = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.l1_penalty.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pxd":19
 *     cdef public weight_t learn_rate
 *     cdef public weight_t l1_penalty
 *     cdef public weight_t momentum             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_scoresC(self, weight_t* scores, const FeatureC* feats, int nr_feat) nogil
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum___get__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum___get__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->momentum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.momentum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_2__set__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_2__set__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 19, __pyx_L1_error)
  __pyx_v_self->momentum = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.momentum.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_24__reduce_cython__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_24__reduce_cython__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.averages, self.extracter, self.l1_penalty, self.lasso_ledger, self.learn_rate, self.mem, self.momentum, self.time, self.weights)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->l1_penalty); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->learn_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->momentum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->time); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(9); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->averages));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->averages));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self->averages));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->extracter));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->extracter));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_self->extracter));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->lasso_ledger));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->lasso_ledger));
  PyTuple_SET_ITEM(__pyx_t_5, 3, ((PyObject *)__pyx_v_self->lasso_ledger));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mem));
  PyTuple_SET_ITEM(__pyx_t_5, 5, ((PyObject *)__pyx_v_self->mem));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->weights));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->weights));
  PyTuple_SET_ITEM(__pyx_t_5, 8, ((PyObject *)__pyx_v_self->weights));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.averages, self.extracter, self.l1_penalty, self.lasso_ledger, self.learn_rate, self.mem, self.momentum, self.time, self.weights)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self.averages, self.extracter, self.l1_penalty, self.lasso_ledger, self.learn_rate, self.mem, self.momentum, self.time, self.weights)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.averages is not None or self.extracter is not None or self.lasso_ledger is not None or self.mem is not None or self.weights is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.averages, self.extracter, self.l1_penalty, self.lasso_ledger, self.learn_rate, self.mem, self.momentum, self.time, self.weights)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.averages is not None or self.extracter is not None or self.lasso_ledger is not None or self.mem is not None or self.weights is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, None), state
 */
  /*else*/ {
    __pyx_t_6 = (((PyObject *)__pyx_v_self->averages) != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (((PyObject *)__pyx_v_self->extracter) != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (((PyObject *)__pyx_v_self->lasso_ledger) != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (((PyObject *)__pyx_v_self->mem) != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (((PyObject *)__pyx_v_self->weights) != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_7;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.averages is not None or self.extracter is not None or self.lasso_ledger is not None or self.mem is not None or self.weights is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, None), state
 *     else:
 */
  __pyx_t_7 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":13
 *         use_setstate = self.averages is not None or self.extracter is not None or self.lasso_ledger is not None or self.mem is not None or self.weights is not None
 *     if use_setstate:
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_AveragedPerceptro); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_247848399);
    __Pyx_GIVEREF(__pyx_int_247848399);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_247848399);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.averages is not None or self.extracter is not None or self.lasso_ledger is not None or self.mem is not None or self.weights is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, None), state
 *     else:
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AveragedPerceptron__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_AveragedPerceptro); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_247848399);
    __Pyx_GIVEREF(__pyx_int_247848399);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_247848399);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AveragedPerceptron__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_26__setstate_cython__(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_18AveragedPerceptron_26__setstate_cython__(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AveragedPerceptron__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5thinc_6linear_7avgtron___pyx_unpickle_AveragedPerceptron__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AveragedPerceptron, (type(self), 0xec5ddcf, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AveragedPerceptron__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.linear.avgtron.AveragedPerceptron.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":330
 * 
 * class _AverageHelper(object):
 *     def __init__(self, model):             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5thinc_6linear_7avgtron_14_AverageHelper_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_model = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_model,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 330, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 330, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_model = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 330, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron._AverageHelper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper___init__(__pyx_self, __pyx_v_self, __pyx_v_model);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "thinc/linear/avgtron.pyx":331
 * class _AverageHelper(object):
 *     def __init__(self, model):
 *         self.model = model             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_model, __pyx_v_model) < 0) __PYX_ERR(0, 331, __pyx_L1_error)

  /* "thinc/linear/avgtron.pyx":330
 * 
 * class _AverageHelper(object):
 *     def __init__(self, model):             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron._AverageHelper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":333
 *         self.model = model
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         cdef AveragedPerceptron model = self.model
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_3__enter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5thinc_6linear_7avgtron_14_AverageHelper_3__enter__ = {"__enter__", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_3__enter__, METH_O, 0};
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_3__enter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper_2__enter__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper_2__enter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  size_t __pyx_v_feat_addr;
  struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_model = 0;
  CYTHON_UNUSED PyObject *__pyx_v_feat_id = NULL;
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_W;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_avg;
  CYTHON_UNUSED int __pyx_v_avg_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  size_t __pyx_t_9;
  int __pyx_t_10;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_11;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_t_12;
  int __pyx_t_13;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_14;
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "thinc/linear/avgtron.pyx":335
 *     def __enter__(self):
 *         cdef size_t feat_addr
 *         cdef AveragedPerceptron model = self.model             # <<<<<<<<<<<<<<
 *         for feat_id, feat_addr in model.averages.items():
 *             if feat_addr != 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5thinc_6linear_7avgtron_AveragedPerceptron))))) __PYX_ERR(0, 335, __pyx_L1_error)
  __pyx_v_model = ((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":336
 *         cdef size_t feat_addr
 *         cdef AveragedPerceptron model = self.model
 *         for feat_id, feat_addr in model.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model->averages), __pyx_n_s_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 336, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 336, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 336, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 336, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_6); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_feat_id, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_v_feat_addr = __pyx_t_9;

    /* "thinc/linear/avgtron.pyx":337
 *         cdef AveragedPerceptron model = self.model
 *         for feat_id, feat_addr in model.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)
 */
    __pyx_t_10 = ((__pyx_v_feat_addr != 0) != 0);
    if (__pyx_t_10) {

      /* "thinc/linear/avgtron.pyx":338
 *         for feat_id, feat_addr in model.averages.items():
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr             # <<<<<<<<<<<<<<
 *                 update_averages(feat, self.time+1)
 *                 W = feat.curr
 */
      __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)__pyx_v_feat_addr);

      /* "thinc/linear/avgtron.pyx":339
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)             # <<<<<<<<<<<<<<
 *                 W = feat.curr
 *                 avg = feat.avgs
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 339, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_f_5thinc_6linear_7avgtron_update_averages(__pyx_v_feat, __pyx_t_11);

      /* "thinc/linear/avgtron.pyx":340
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)
 *                 W = feat.curr             # <<<<<<<<<<<<<<
 *                 avg = feat.avgs
 *                 while W.key >= 0:
 */
      __pyx_t_12 = __pyx_v_feat->curr;
      __pyx_v_W = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":341
 *                 update_averages(feat, self.time+1)
 *                 W = feat.curr
 *                 avg = feat.avgs             # <<<<<<<<<<<<<<
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 */
      __pyx_t_12 = __pyx_v_feat->avgs;
      __pyx_v_avg = __pyx_t_12;

      /* "thinc/linear/avgtron.pyx":342
 *                 W = feat.curr
 *                 avg = feat.avgs
 *                 while W.key >= 0:             # <<<<<<<<<<<<<<
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:
 */
      while (1) {
        __pyx_t_10 = ((__pyx_v_W->key >= 0) != 0);
        if (!__pyx_t_10) break;

        /* "thinc/linear/avgtron.pyx":343
 *                 avg = feat.avgs
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)             # <<<<<<<<<<<<<<
 *                     if W.val != 0:
 *                         avg.val, W.val = W.val, avg.val / (self.time+1)
 */
        __pyx_t_13 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(__pyx_v_avg, __pyx_v_W->key); if (unlikely(__pyx_t_13 == ((int)-2))) __PYX_ERR(0, 343, __pyx_L1_error)
        __pyx_v_avg_i = __pyx_t_13;

        /* "thinc/linear/avgtron.pyx":344
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         avg.val, W.val = W.val, avg.val / (self.time+1)
 *                     W += 1
 */
        __pyx_t_10 = ((__pyx_v_W->val != 0.0) != 0);
        if (__pyx_t_10) {

          /* "thinc/linear/avgtron.pyx":345
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:
 *                         avg.val, W.val = W.val, avg.val / (self.time+1)             # <<<<<<<<<<<<<<
 *                     W += 1
 *                     avg += 1
 */
          __pyx_t_11 = __pyx_v_W->val;
          __pyx_t_6 = PyFloat_FromDouble(__pyx_v_avg->val); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_avg->val = __pyx_t_11;
          __pyx_v_W->val = __pyx_t_14;

          /* "thinc/linear/avgtron.pyx":344
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         avg.val, W.val = W.val, avg.val / (self.time+1)
 *                     W += 1
 */
        }

        /* "thinc/linear/avgtron.pyx":346
 *                     if W.val != 0:
 *                         avg.val, W.val = W.val, avg.val / (self.time+1)
 *                     W += 1             # <<<<<<<<<<<<<<
 *                     avg += 1
 * 
 */
        __pyx_v_W = (__pyx_v_W + 1);

        /* "thinc/linear/avgtron.pyx":347
 *                         avg.val, W.val = W.val, avg.val / (self.time+1)
 *                     W += 1
 *                     avg += 1             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, *args, **kwargs):
 */
        __pyx_v_avg = (__pyx_v_avg + 1);
      }

      /* "thinc/linear/avgtron.pyx":337
 *         cdef AveragedPerceptron model = self.model
 *         for feat_id, feat_addr in model.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 update_averages(feat, self.time+1)
 */
    }

    /* "thinc/linear/avgtron.pyx":336
 *         cdef size_t feat_addr
 *         cdef AveragedPerceptron model = self.model
 *         for feat_id, feat_addr in model.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":333
 *         self.model = model
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         cdef AveragedPerceptron model = self.model
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("thinc.linear.avgtron._AverageHelper.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_feat_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":349
 *                     avg += 1
 * 
 *     def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef AveragedPerceptron model = self.model
 *         cdef size_t feat_addr
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_5__exit__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5thinc_6linear_7avgtron_14_AverageHelper_5__exit__ = {"__exit__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_5__exit__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_14_AverageHelper_5__exit__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__exit__") < 0)) __PYX_ERR(0, 349, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 349, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("thinc.linear.avgtron._AverageHelper.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper_4__exit__(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron_14_AverageHelper_4__exit__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v_model = 0;
  size_t __pyx_v_feat_addr;
  CYTHON_UNUSED PyObject *__pyx_v_feat_id = NULL;
  struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_W;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_avg;
  CYTHON_UNUSED int __pyx_v_avg_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  size_t __pyx_t_9;
  int __pyx_t_10;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_t_11;
  int __pyx_t_12;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_13;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_14;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "thinc/linear/avgtron.pyx":350
 * 
 *     def __exit__(self, *args, **kwargs):
 *         cdef AveragedPerceptron model = self.model             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         for feat_id, feat_addr in model.averages.items():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5thinc_6linear_7avgtron_AveragedPerceptron))))) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_v_model = ((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/linear/avgtron.pyx":352
 *         cdef AveragedPerceptron model = self.model
 *         cdef size_t feat_addr
 *         for feat_id, feat_addr in model.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model->averages), __pyx_n_s_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 352, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 352, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 352, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_6); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_feat_id, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_v_feat_addr = __pyx_t_9;

    /* "thinc/linear/avgtron.pyx":353
 *         cdef size_t feat_addr
 *         for feat_id, feat_addr in model.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 W = feat.curr
 */
    __pyx_t_10 = ((__pyx_v_feat_addr != 0) != 0);
    if (__pyx_t_10) {

      /* "thinc/linear/avgtron.pyx":354
 *         for feat_id, feat_addr in model.averages.items():
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr             # <<<<<<<<<<<<<<
 *                 W = feat.curr
 *                 avg = feat.avgs
 */
      __pyx_v_feat = ((struct __pyx_t_5thinc_7structs_SparseAverageC *)__pyx_v_feat_addr);

      /* "thinc/linear/avgtron.pyx":355
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 *                 W = feat.curr             # <<<<<<<<<<<<<<
 *                 avg = feat.avgs
 *                 while W.key >= 0:
 */
      __pyx_t_11 = __pyx_v_feat->curr;
      __pyx_v_W = __pyx_t_11;

      /* "thinc/linear/avgtron.pyx":356
 *                 feat = <SparseAverageC*>feat_addr
 *                 W = feat.curr
 *                 avg = feat.avgs             # <<<<<<<<<<<<<<
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 */
      __pyx_t_11 = __pyx_v_feat->avgs;
      __pyx_v_avg = __pyx_t_11;

      /* "thinc/linear/avgtron.pyx":357
 *                 W = feat.curr
 *                 avg = feat.avgs
 *                 while W.key >= 0:             # <<<<<<<<<<<<<<
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:
 */
      while (1) {
        __pyx_t_10 = ((__pyx_v_W->key >= 0) != 0);
        if (!__pyx_t_10) break;

        /* "thinc/linear/avgtron.pyx":358
 *                 avg = feat.avgs
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)             # <<<<<<<<<<<<<<
 *                     if W.val != 0:
 *                         W.val, avg.val = avg.val, W.val * (self.time+1)
 */
        __pyx_t_12 = __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(__pyx_v_avg, __pyx_v_W->key); if (unlikely(__pyx_t_12 == ((int)-2))) __PYX_ERR(0, 358, __pyx_L1_error)
        __pyx_v_avg_i = __pyx_t_12;

        /* "thinc/linear/avgtron.pyx":359
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         W.val, avg.val = avg.val, W.val * (self.time+1)
 *                     W += 1
 */
        __pyx_t_10 = ((__pyx_v_W->val != 0.0) != 0);
        if (__pyx_t_10) {

          /* "thinc/linear/avgtron.pyx":360
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:
 *                         W.val, avg.val = avg.val, W.val * (self.time+1)             # <<<<<<<<<<<<<<
 *                     W += 1
 *                     avg += 1
 */
          __pyx_t_13 = __pyx_v_avg->val;
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_W->val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_v_W->val = __pyx_t_13;
          __pyx_v_avg->val = __pyx_t_14;

          /* "thinc/linear/avgtron.pyx":359
 *                 while W.key >= 0:
 *                     avg_i = SparseArray.find_key(avg, W.key)
 *                     if W.val != 0:             # <<<<<<<<<<<<<<
 *                         W.val, avg.val = avg.val, W.val * (self.time+1)
 *                     W += 1
 */
        }

        /* "thinc/linear/avgtron.pyx":361
 *                     if W.val != 0:
 *                         W.val, avg.val = avg.val, W.val * (self.time+1)
 *                     W += 1             # <<<<<<<<<<<<<<
 *                     avg += 1
 * 
 */
        __pyx_v_W = (__pyx_v_W + 1);

        /* "thinc/linear/avgtron.pyx":362
 *                         W.val, avg.val = avg.val, W.val * (self.time+1)
 *                     W += 1
 *                     avg += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_avg = (__pyx_v_avg + 1);
      }

      /* "thinc/linear/avgtron.pyx":353
 *         cdef size_t feat_addr
 *         for feat_id, feat_addr in model.averages.items():
 *             if feat_addr != 0:             # <<<<<<<<<<<<<<
 *                 feat = <SparseAverageC*>feat_addr
 *                 W = feat.curr
 */
    }

    /* "thinc/linear/avgtron.pyx":352
 *         cdef AveragedPerceptron model = self.model
 *         cdef size_t feat_addr
 *         for feat_id, feat_addr in model.averages.items():             # <<<<<<<<<<<<<<
 *             if feat_addr != 0:
 *                 feat = <SparseAverageC*>feat_addr
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":349
 *                     avg += 1
 * 
 *     def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef AveragedPerceptron model = self.model
 *         cdef size_t feat_addr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("thinc.linear.avgtron._AverageHelper.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_feat_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":365
 * 
 * 
 * cdef void adam_update(weight_t* w, weight_t* m1, weight_t* m2,             # <<<<<<<<<<<<<<
 *         weight_t t, weight_t last_upd, weight_t grad, weight_t learn_rate, weight_t _) nogil:
 *      # Calculate update with Adam
 */

static void __pyx_f_5thinc_6linear_7avgtron_adam_update(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_w, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_m1, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_m2, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_t, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_last_upd, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_grad, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_learn_rate, CYTHON_UNUSED __pyx_t_5thinc_8typedefs_weight_t __pyx_v__) {
  double __pyx_v_beta1;
  double __pyx_v_beta2;
  double __pyx_v_eps;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_nr_update;
  double __pyx_v_m1t;
  double __pyx_v_m2t;
  long __pyx_t_1;

  /* "thinc/linear/avgtron.pyx":368
 *         weight_t t, weight_t last_upd, weight_t grad, weight_t learn_rate, weight_t _) nogil:
 *      # Calculate update with Adam
 *      beta1 = 0.9             # <<<<<<<<<<<<<<
 *      beta2 = 0.999
 *      eps = 1e-08
 */
  __pyx_v_beta1 = 0.9;

  /* "thinc/linear/avgtron.pyx":369
 *      # Calculate update with Adam
 *      beta1 = 0.9
 *      beta2 = 0.999             # <<<<<<<<<<<<<<
 *      eps = 1e-08
 * 
 */
  __pyx_v_beta2 = 0.999;

  /* "thinc/linear/avgtron.pyx":370
 *      beta1 = 0.9
 *      beta2 = 0.999
 *      eps = 1e-08             # <<<<<<<<<<<<<<
 * 
 *      m1[0] = (m1[0] * beta1) + ((1-beta1) * grad)
 */
  __pyx_v_eps = 1e-08;

  /* "thinc/linear/avgtron.pyx":372
 *      eps = 1e-08
 * 
 *      m1[0] = (m1[0] * beta1) + ((1-beta1) * grad)             # <<<<<<<<<<<<<<
 *      m2[0] = (m2[0] * beta2) + ((1-beta2) * grad**2)
 * 
 */
  (__pyx_v_m1[0]) = (((__pyx_v_m1[0]) * __pyx_v_beta1) + ((1.0 - __pyx_v_beta1) * __pyx_v_grad));

  /* "thinc/linear/avgtron.pyx":373
 * 
 *      m1[0] = (m1[0] * beta1) + ((1-beta1) * grad)
 *      m2[0] = (m2[0] * beta2) + ((1-beta2) * grad**2)             # <<<<<<<<<<<<<<
 * 
 *      # Estimate the number of updates, using time from last update
 */
  (__pyx_v_m2[0]) = (((__pyx_v_m2[0]) * __pyx_v_beta2) + ((1.0 - __pyx_v_beta2) * powf(__pyx_v_grad, 2.0)));

  /* "thinc/linear/avgtron.pyx":376
 * 
 *      # Estimate the number of updates, using time from last update
 *      nr_update = (t * (last_upd / t)) + 1             # <<<<<<<<<<<<<<
 * 
 *      m1t = m1[0] / (1-beta1**nr_update)
 */
  __pyx_v_nr_update = ((__pyx_v_t * (__pyx_v_last_upd / __pyx_v_t)) + 1.0);

  /* "thinc/linear/avgtron.pyx":378
 *      nr_update = (t * (last_upd / t)) + 1
 * 
 *      m1t = m1[0] / (1-beta1**nr_update)             # <<<<<<<<<<<<<<
 *      m2t = m2[0] / (1-beta2**nr_update)
 * 
 */
  __pyx_v_m1t = ((__pyx_v_m1[0]) / (1.0 - pow(__pyx_v_beta1, ((double)__pyx_v_nr_update))));

  /* "thinc/linear/avgtron.pyx":379
 * 
 *      m1t = m1[0] / (1-beta1**nr_update)
 *      m2t = m2[0] / (1-beta2**nr_update)             # <<<<<<<<<<<<<<
 * 
 *      w[0] -= learn_rate * m1t / (sqrt(m2t) + eps)
 */
  __pyx_v_m2t = ((__pyx_v_m2[0]) / (1.0 - pow(__pyx_v_beta2, ((double)__pyx_v_nr_update))));

  /* "thinc/linear/avgtron.pyx":381
 *      m2t = m2[0] / (1-beta2**nr_update)
 * 
 *      w[0] -= learn_rate * m1t / (sqrt(m2t) + eps)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = 0;
  (__pyx_v_w[__pyx_t_1]) = ((__pyx_v_w[__pyx_t_1]) - ((__pyx_v_learn_rate * __pyx_v_m1t) / (sqrt(__pyx_v_m2t) + __pyx_v_eps)));

  /* "thinc/linear/avgtron.pyx":365
 * 
 * 
 * cdef void adam_update(weight_t* w, weight_t* m1, weight_t* m2,             # <<<<<<<<<<<<<<
 *         weight_t t, weight_t last_upd, weight_t grad, weight_t learn_rate, weight_t _) nogil:
 *      # Calculate update with Adam
 */

  /* function exit code */
}

/* "thinc/linear/avgtron.pyx":384
 * 
 * 
 * cdef void update_averages(SparseAverageC* feat, weight_t time) nogil:             # <<<<<<<<<<<<<<
 *     W = feat.curr
 *     avg = feat.avgs
 */

static void __pyx_f_5thinc_6linear_7avgtron_update_averages(struct __pyx_t_5thinc_7structs_SparseAverageC *__pyx_v_feat, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_time) {
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_W;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_avg;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_times;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_unchanged;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "thinc/linear/avgtron.pyx":385
 * 
 * cdef void update_averages(SparseAverageC* feat, weight_t time) nogil:
 *     W = feat.curr             # <<<<<<<<<<<<<<
 *     avg = feat.avgs
 *     times = feat.times
 */
  __pyx_t_1 = __pyx_v_feat->curr;
  __pyx_v_W = __pyx_t_1;

  /* "thinc/linear/avgtron.pyx":386
 * cdef void update_averages(SparseAverageC* feat, weight_t time) nogil:
 *     W = feat.curr
 *     avg = feat.avgs             # <<<<<<<<<<<<<<
 *     times = feat.times
 *     while W.key >= 0:
 */
  __pyx_t_1 = __pyx_v_feat->avgs;
  __pyx_v_avg = __pyx_t_1;

  /* "thinc/linear/avgtron.pyx":387
 *     W = feat.curr
 *     avg = feat.avgs
 *     times = feat.times             # <<<<<<<<<<<<<<
 *     while W.key >= 0:
 *         if W.key == avg.key == times.key:
 */
  __pyx_t_1 = __pyx_v_feat->times;
  __pyx_v_times = __pyx_t_1;

  /* "thinc/linear/avgtron.pyx":388
 *     avg = feat.avgs
 *     times = feat.times
 *     while W.key >= 0:             # <<<<<<<<<<<<<<
 *         if W.key == avg.key == times.key:
 *             unchanged = time - times.val
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_W->key >= 0) != 0);
    if (!__pyx_t_2) break;

    /* "thinc/linear/avgtron.pyx":389
 *     times = feat.times
 *     while W.key >= 0:
 *         if W.key == avg.key == times.key:             # <<<<<<<<<<<<<<
 *             unchanged = time - times.val
 *             avg.val += unchanged * W.val
 */
    __pyx_t_2 = (__pyx_v_W->key == __pyx_v_avg->key);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_avg->key == __pyx_v_times->key);
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "thinc/linear/avgtron.pyx":390
 *     while W.key >= 0:
 *         if W.key == avg.key == times.key:
 *             unchanged = time - times.val             # <<<<<<<<<<<<<<
 *             avg.val += unchanged * W.val
 *             times.val = time
 */
      __pyx_v_unchanged = (__pyx_v_time - __pyx_v_times->val);

      /* "thinc/linear/avgtron.pyx":391
 *         if W.key == avg.key == times.key:
 *             unchanged = time - times.val
 *             avg.val += unchanged * W.val             # <<<<<<<<<<<<<<
 *             times.val = time
 *         W += 1
 */
      __pyx_v_avg->val = (__pyx_v_avg->val + (__pyx_v_unchanged * __pyx_v_W->val));

      /* "thinc/linear/avgtron.pyx":392
 *             unchanged = time - times.val
 *             avg.val += unchanged * W.val
 *             times.val = time             # <<<<<<<<<<<<<<
 *         W += 1
 *         times += 1
 */
      __pyx_v_times->val = __pyx_v_time;

      /* "thinc/linear/avgtron.pyx":389
 *     times = feat.times
 *     while W.key >= 0:
 *         if W.key == avg.key == times.key:             # <<<<<<<<<<<<<<
 *             unchanged = time - times.val
 *             avg.val += unchanged * W.val
 */
    }

    /* "thinc/linear/avgtron.pyx":393
 *             avg.val += unchanged * W.val
 *             times.val = time
 *         W += 1             # <<<<<<<<<<<<<<
 *         times += 1
 *         avg += 1
 */
    __pyx_v_W = (__pyx_v_W + 1);

    /* "thinc/linear/avgtron.pyx":394
 *             times.val = time
 *         W += 1
 *         times += 1             # <<<<<<<<<<<<<<
 *         avg += 1
 * 
 */
    __pyx_v_times = (__pyx_v_times + 1);

    /* "thinc/linear/avgtron.pyx":395
 *         W += 1
 *         times += 1
 *         avg += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_avg = (__pyx_v_avg + 1);
  }

  /* "thinc/linear/avgtron.pyx":384
 * 
 * 
 * cdef void update_averages(SparseAverageC* feat, weight_t time) nogil:             # <<<<<<<<<<<<<<
 *     W = feat.curr
 *     avg = feat.avgs
 */

  /* function exit code */
}

/* "thinc/linear/avgtron.pyx":398
 * 
 * 
 * cdef int apply_L1(SparseArrayC* W, SparseArrayC* ledger, weight_t total_penalty) nogil:             # <<<<<<<<<<<<<<
 *     if ledger is NULL:
 *         return 0
 */

static int __pyx_f_5thinc_6linear_7avgtron_apply_L1(struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_W, struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_ledger, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_total_penalty) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_u;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_z;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_q;
  int __pyx_r;
  int __pyx_t_1;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_2;
  long __pyx_t_3;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_4;

  /* "thinc/linear/avgtron.pyx":399
 * 
 * cdef int apply_L1(SparseArrayC* W, SparseArrayC* ledger, weight_t total_penalty) nogil:
 *     if ledger is NULL:             # <<<<<<<<<<<<<<
 *         return 0
 *     while W.key >= 0:
 */
  __pyx_t_1 = ((__pyx_v_ledger == NULL) != 0);
  if (__pyx_t_1) {

    /* "thinc/linear/avgtron.pyx":400
 * cdef int apply_L1(SparseArrayC* W, SparseArrayC* ledger, weight_t total_penalty) nogil:
 *     if ledger is NULL:
 *         return 0             # <<<<<<<<<<<<<<
 *     while W.key >= 0:
 *         u = total_penalty
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "thinc/linear/avgtron.pyx":399
 * 
 * cdef int apply_L1(SparseArrayC* W, SparseArrayC* ledger, weight_t total_penalty) nogil:
 *     if ledger is NULL:             # <<<<<<<<<<<<<<
 *         return 0
 *     while W.key >= 0:
 */
  }

  /* "thinc/linear/avgtron.pyx":401
 *     if ledger is NULL:
 *         return 0
 *     while W.key >= 0:             # <<<<<<<<<<<<<<
 *         u = total_penalty
 *         z = W.val
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_W->key >= 0) != 0);
    if (!__pyx_t_1) break;

    /* "thinc/linear/avgtron.pyx":402
 *         return 0
 *     while W.key >= 0:
 *         u = total_penalty             # <<<<<<<<<<<<<<
 *         z = W.val
 *         q = ledger.val
 */
    __pyx_v_u = __pyx_v_total_penalty;

    /* "thinc/linear/avgtron.pyx":403
 *     while W.key >= 0:
 *         u = total_penalty
 *         z = W.val             # <<<<<<<<<<<<<<
 *         q = ledger.val
 *         if z > 0:
 */
    __pyx_t_2 = __pyx_v_W->val;
    __pyx_v_z = __pyx_t_2;

    /* "thinc/linear/avgtron.pyx":404
 *         u = total_penalty
 *         z = W.val
 *         q = ledger.val             # <<<<<<<<<<<<<<
 *         if z > 0:
 *             W.val = max(0, z-(u+q))
 */
    __pyx_t_2 = __pyx_v_ledger->val;
    __pyx_v_q = __pyx_t_2;

    /* "thinc/linear/avgtron.pyx":405
 *         z = W.val
 *         q = ledger.val
 *         if z > 0:             # <<<<<<<<<<<<<<
 *             W.val = max(0, z-(u+q))
 *         elif z < 0:
 */
    __pyx_t_1 = ((__pyx_v_z > 0.0) != 0);
    if (__pyx_t_1) {

      /* "thinc/linear/avgtron.pyx":406
 *         q = ledger.val
 *         if z > 0:
 *             W.val = max(0, z-(u+q))             # <<<<<<<<<<<<<<
 *         elif z < 0:
 *             W.val = min(0, z+(u-q))
 */
      __pyx_t_2 = (__pyx_v_z - (__pyx_v_u + __pyx_v_q));
      __pyx_t_3 = 0;
      if (((__pyx_t_2 > __pyx_t_3) != 0)) {
        __pyx_t_4 = __pyx_t_2;
      } else {
        __pyx_t_4 = __pyx_t_3;
      }
      __pyx_v_W->val = __pyx_t_4;

      /* "thinc/linear/avgtron.pyx":405
 *         z = W.val
 *         q = ledger.val
 *         if z > 0:             # <<<<<<<<<<<<<<
 *             W.val = max(0, z-(u+q))
 *         elif z < 0:
 */
      goto __pyx_L6;
    }

    /* "thinc/linear/avgtron.pyx":407
 *         if z > 0:
 *             W.val = max(0, z-(u+q))
 *         elif z < 0:             # <<<<<<<<<<<<<<
 *             W.val = min(0, z+(u-q))
 *         ledger.val += W.val - z
 */
    __pyx_t_1 = ((__pyx_v_z < 0.0) != 0);
    if (__pyx_t_1) {

      /* "thinc/linear/avgtron.pyx":408
 *             W.val = max(0, z-(u+q))
 *         elif z < 0:
 *             W.val = min(0, z+(u-q))             # <<<<<<<<<<<<<<
 *         ledger.val += W.val - z
 *         W += 1
 */
      __pyx_t_4 = (__pyx_v_z + (__pyx_v_u - __pyx_v_q));
      __pyx_t_3 = 0;
      if (((__pyx_t_4 < __pyx_t_3) != 0)) {
        __pyx_t_2 = __pyx_t_4;
      } else {
        __pyx_t_2 = __pyx_t_3;
      }
      __pyx_v_W->val = __pyx_t_2;

      /* "thinc/linear/avgtron.pyx":407
 *         if z > 0:
 *             W.val = max(0, z-(u+q))
 *         elif z < 0:             # <<<<<<<<<<<<<<
 *             W.val = min(0, z+(u-q))
 *         ledger.val += W.val - z
 */
    }
    __pyx_L6:;

    /* "thinc/linear/avgtron.pyx":409
 *         elif z < 0:
 *             W.val = min(0, z+(u-q))
 *         ledger.val += W.val - z             # <<<<<<<<<<<<<<
 *         W += 1
 *         ledger += 1
 */
    __pyx_v_ledger->val = (__pyx_v_ledger->val + (__pyx_v_W->val - __pyx_v_z));

    /* "thinc/linear/avgtron.pyx":410
 *             W.val = min(0, z+(u-q))
 *         ledger.val += W.val - z
 *         W += 1             # <<<<<<<<<<<<<<
 *         ledger += 1
 * 
 */
    __pyx_v_W = (__pyx_v_W + 1);

    /* "thinc/linear/avgtron.pyx":411
 *         ledger.val += W.val - z
 *         W += 1
 *         ledger += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_ledger = (__pyx_v_ledger + 1);
  }

  /* "thinc/linear/avgtron.pyx":398
 * 
 * 
 * cdef int apply_L1(SparseArrayC* W, SparseArrayC* ledger, weight_t total_penalty) nogil:             # <<<<<<<<<<<<<<
 *     if ledger is NULL:
 *         return 0
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "thinc/linear/avgtron.pyx":414
 * 
 * 
 * cdef weight_t group_lasso(SparseArrayC* weights, weight_t penalty_paid,             # <<<<<<<<<<<<<<
 *                           weight_t total_penalty) nogil:
 *     norm = 0.0
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linear_7avgtron_group_lasso(struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_weights, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_penalty_paid, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_total_penalty) {
  double __pyx_v_norm;
  long __pyx_v_i;
  double __pyx_v_target;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  int __pyx_t_1;
  double __pyx_t_2;
  long __pyx_t_3;
  double __pyx_t_4;

  /* "thinc/linear/avgtron.pyx":416
 * cdef weight_t group_lasso(SparseArrayC* weights, weight_t penalty_paid,
 *                           weight_t total_penalty) nogil:
 *     norm = 0.0             # <<<<<<<<<<<<<<
 *     i = 0
 *     while weights[i].key >= 0:
 */
  __pyx_v_norm = 0.0;

  /* "thinc/linear/avgtron.pyx":417
 *                           weight_t total_penalty) nogil:
 *     norm = 0.0
 *     i = 0             # <<<<<<<<<<<<<<
 *     while weights[i].key >= 0:
 *         if weights[i].val > 0:
 */
  __pyx_v_i = 0;

  /* "thinc/linear/avgtron.pyx":418
 *     norm = 0.0
 *     i = 0
 *     while weights[i].key >= 0:             # <<<<<<<<<<<<<<
 *         if weights[i].val > 0:
 *             norm += weights[i].val
 */
  while (1) {
    __pyx_t_1 = (((__pyx_v_weights[__pyx_v_i]).key >= 0) != 0);
    if (!__pyx_t_1) break;

    /* "thinc/linear/avgtron.pyx":419
 *     i = 0
 *     while weights[i].key >= 0:
 *         if weights[i].val > 0:             # <<<<<<<<<<<<<<
 *             norm += weights[i].val
 *         else:
 */
    __pyx_t_1 = (((__pyx_v_weights[__pyx_v_i]).val > 0.0) != 0);
    if (__pyx_t_1) {

      /* "thinc/linear/avgtron.pyx":420
 *     while weights[i].key >= 0:
 *         if weights[i].val > 0:
 *             norm += weights[i].val             # <<<<<<<<<<<<<<
 *         else:
 *             norm -= weights[i].val
 */
      __pyx_v_norm = (__pyx_v_norm + (__pyx_v_weights[__pyx_v_i]).val);

      /* "thinc/linear/avgtron.pyx":419
 *     i = 0
 *     while weights[i].key >= 0:
 *         if weights[i].val > 0:             # <<<<<<<<<<<<<<
 *             norm += weights[i].val
 *         else:
 */
      goto __pyx_L5;
    }

    /* "thinc/linear/avgtron.pyx":422
 *             norm += weights[i].val
 *         else:
 *             norm -= weights[i].val             # <<<<<<<<<<<<<<
 *         i += 1
 *     # Find what we want the norm to be
 */
    /*else*/ {
      __pyx_v_norm = (__pyx_v_norm - (__pyx_v_weights[__pyx_v_i]).val);
    }
    __pyx_L5:;

    /* "thinc/linear/avgtron.pyx":423
 *         else:
 *             norm -= weights[i].val
 *         i += 1             # <<<<<<<<<<<<<<
 *     # Find what we want the norm to be
 *     target = max(0, norm - (penalty_paid + total_penalty))
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "thinc/linear/avgtron.pyx":425
 *         i += 1
 *     # Find what we want the norm to be
 *     target = max(0, norm - (penalty_paid + total_penalty))             # <<<<<<<<<<<<<<
 *     while weights.key >= 0:
 *         # If weights[i].val is negative, we want to add anyway ---
 */
  __pyx_t_2 = (__pyx_v_norm - (__pyx_v_penalty_paid + __pyx_v_total_penalty));
  __pyx_t_3 = 0;
  if (((__pyx_t_2 > __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_v_target = __pyx_t_4;

  /* "thinc/linear/avgtron.pyx":426
 *     # Find what we want the norm to be
 *     target = max(0, norm - (penalty_paid + total_penalty))
 *     while weights.key >= 0:             # <<<<<<<<<<<<<<
 *         # If weights[i].val is negative, we want to add anyway ---
 *         # so should all work out.
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_weights->key >= 0) != 0);
    if (!__pyx_t_1) break;

    /* "thinc/linear/avgtron.pyx":431
 *         # The ideea here is to reduce the norm of the feature
 *         # proportionally.
 *         weights.val = (weights.val/norm) * target             # <<<<<<<<<<<<<<
 *         weights += 1
 *     return target - norm
 */
    __pyx_v_weights->val = ((__pyx_v_weights->val / __pyx_v_norm) * __pyx_v_target);

    /* "thinc/linear/avgtron.pyx":432
 *         # proportionally.
 *         weights.val = (weights.val/norm) * target
 *         weights += 1             # <<<<<<<<<<<<<<
 *     return target - norm
 */
    __pyx_v_weights = (__pyx_v_weights + 1);
  }

  /* "thinc/linear/avgtron.pyx":433
 *         weights.val = (weights.val/norm) * target
 *         weights += 1
 *     return target - norm             # <<<<<<<<<<<<<<
 */
  __pyx_r = (__pyx_v_target - __pyx_v_norm);
  goto __pyx_L0;

  /* "thinc/linear/avgtron.pyx":414
 * 
 * 
 * cdef weight_t group_lasso(SparseArrayC* weights, weight_t penalty_paid,             # <<<<<<<<<<<<<<
 *                           weight_t total_penalty) nogil:
 *     norm = 0.0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_AveragedPerceptron(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_1__pyx_unpickle_AveragedPerceptron(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5thinc_6linear_7avgtron_1__pyx_unpickle_AveragedPerceptron = {"__pyx_unpickle_AveragedPerceptron", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5thinc_6linear_7avgtron_1__pyx_unpickle_AveragedPerceptron, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5thinc_6linear_7avgtron_1__pyx_unpickle_AveragedPerceptron(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_AveragedPerceptron (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AveragedPerceptron", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AveragedPerceptron", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_AveragedPerceptron") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AveragedPerceptron", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinc.linear.avgtron.__pyx_unpickle_AveragedPerceptron", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6linear_7avgtron___pyx_unpickle_AveragedPerceptron(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6linear_7avgtron___pyx_unpickle_AveragedPerceptron(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AveragedPerceptron", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xec5ddcf:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xec5ddcf) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xec5ddcf:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))" % __pyx_checksum)
 *     __pyx_result = AveragedPerceptron.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xec5ddcf:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = AveragedPerceptron.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xec, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xec5ddcf:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))" % __pyx_checksum)
 *     __pyx_result = AveragedPerceptron.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AveragedPerceptron__set_state(<AveragedPerceptron> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5thinc_6linear_7avgtron_AveragedPerceptron), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))" % __pyx_checksum)
 *     __pyx_result = AveragedPerceptron.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AveragedPerceptron__set_state(<AveragedPerceptron> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = AveragedPerceptron.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AveragedPerceptron__set_state(<AveragedPerceptron> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_AveragedPerceptron__set_state(AveragedPerceptron __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_5thinc_6linear_7avgtron___pyx_unpickle_AveragedPerceptron__set_state(((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec5ddcf = (averages, extracter, l1_penalty, lasso_ledger, learn_rate, mem, momentum, time, weights))" % __pyx_checksum)
 *     __pyx_result = AveragedPerceptron.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AveragedPerceptron__set_state(<AveragedPerceptron> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AveragedPerceptron__set_state(<AveragedPerceptron> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_AveragedPerceptron__set_state(AveragedPerceptron __pyx_result, tuple __pyx_state):
 *     __pyx_result.averages = __pyx_state[0]; __pyx_result.extracter = __pyx_state[1]; __pyx_result.l1_penalty = __pyx_state[2]; __pyx_result.lasso_ledger = __pyx_state[3]; __pyx_result.learn_rate = __pyx_state[4]; __pyx_result.mem = __pyx_state[5]; __pyx_result.momentum = __pyx_state[6]; __pyx_result.time = __pyx_state[7]; __pyx_result.weights = __pyx_state[8]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_AveragedPerceptron(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("thinc.linear.avgtron.__pyx_unpickle_AveragedPerceptron", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_AveragedPerceptron__set_state(<AveragedPerceptron> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AveragedPerceptron__set_state(AveragedPerceptron __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.averages = __pyx_state[0]; __pyx_result.extracter = __pyx_state[1]; __pyx_result.l1_penalty = __pyx_state[2]; __pyx_result.lasso_ledger = __pyx_state[3]; __pyx_result.learn_rate = __pyx_state[4]; __pyx_result.mem = __pyx_state[5]; __pyx_result.momentum = __pyx_state[6]; __pyx_result.time = __pyx_state[7]; __pyx_result.weights = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5thinc_6linear_7avgtron___pyx_unpickle_AveragedPerceptron__set_state(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AveragedPerceptron__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_AveragedPerceptron__set_state(AveragedPerceptron __pyx_result, tuple __pyx_state):
 *     __pyx_result.averages = __pyx_state[0]; __pyx_result.extracter = __pyx_state[1]; __pyx_result.l1_penalty = __pyx_state[2]; __pyx_result.lasso_ledger = __pyx_state[3]; __pyx_result.learn_rate = __pyx_state[4]; __pyx_result.mem = __pyx_state[5]; __pyx_result.momentum = __pyx_state[6]; __pyx_result.time = __pyx_state[7]; __pyx_result.weights = __pyx_state[8]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7preshed_4maps_PreshMap))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->averages);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->averages));
  __pyx_v___pyx_result->averages = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5thinc_6linear_8features_ConjunctionExtracter))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->extracter);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->extracter));
  __pyx_v___pyx_result->extracter = ((struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->l1_penalty = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7preshed_4maps_PreshMap))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->lasso_ledger);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->lasso_ledger));
  __pyx_v___pyx_result->lasso_ledger = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->learn_rate = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5cymem_5cymem_Pool))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->mem));
  __pyx_v___pyx_result->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->momentum = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->time = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7preshed_4maps_PreshMap))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->weights);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->weights));
  __pyx_v___pyx_result->weights = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_AveragedPerceptron__set_state(AveragedPerceptron __pyx_result, tuple __pyx_state):
 *     __pyx_result.averages = __pyx_state[0]; __pyx_result.extracter = __pyx_state[1]; __pyx_result.l1_penalty = __pyx_state[2]; __pyx_result.lasso_ledger = __pyx_state[3]; __pyx_result.learn_rate = __pyx_state[4]; __pyx_result.mem = __pyx_state[5]; __pyx_result.momentum = __pyx_state[6]; __pyx_result.time = __pyx_state[7]; __pyx_result.weights = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 9) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.averages = __pyx_state[0]; __pyx_result.extracter = __pyx_state[1]; __pyx_result.l1_penalty = __pyx_state[2]; __pyx_result.lasso_ledger = __pyx_state[3]; __pyx_result.learn_rate = __pyx_state[4]; __pyx_result.mem = __pyx_state[5]; __pyx_result.momentum = __pyx_state[6]; __pyx_result.time = __pyx_state[7]; __pyx_result.weights = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[9])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_AveragedPerceptron__set_state(AveragedPerceptron __pyx_result, tuple __pyx_state):
 *     __pyx_result.averages = __pyx_state[0]; __pyx_result.extracter = __pyx_state[1]; __pyx_result.l1_penalty = __pyx_state[2]; __pyx_result.lasso_ledger = __pyx_state[3]; __pyx_result.learn_rate = __pyx_state[4]; __pyx_result.mem = __pyx_state[5]; __pyx_result.momentum = __pyx_state[6]; __pyx_result.time = __pyx_state[7]; __pyx_result.weights = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_AveragedPerceptron__set_state(<AveragedPerceptron> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AveragedPerceptron__set_state(AveragedPerceptron __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.averages = __pyx_state[0]; __pyx_result.extracter = __pyx_state[1]; __pyx_result.l1_penalty = __pyx_state[2]; __pyx_result.lasso_ledger = __pyx_state[3]; __pyx_result.learn_rate = __pyx_state[4]; __pyx_result.mem = __pyx_state[5]; __pyx_result.momentum = __pyx_state[6]; __pyx_result.time = __pyx_state[7]; __pyx_result.weights = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("thinc.linear.avgtron.__pyx_unpickle_AveragedPerceptron__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "linalg.pxd":31
 * cdef class Vec:
 *     @staticmethod
 *     cdef inline int arg_max(const weight_t* scores, const int n_classes) nogil:             # <<<<<<<<<<<<<<
 *         if n_classes == 2:
 *             return 0 if scores[0] > scores[1] else 1
 */

static CYTHON_INLINE int __pyx_f_5thinc_6linalg_3Vec_arg_max(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, int const __pyx_v_n_classes) {
  int __pyx_v_i;
  int __pyx_v_best;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_mode;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":32
 *     @staticmethod
 *     cdef inline int arg_max(const weight_t* scores, const int n_classes) nogil:
 *         if n_classes == 2:             # <<<<<<<<<<<<<<
 *             return 0 if scores[0] > scores[1] else 1
 *         cdef int i
 */
  __pyx_t_1 = ((__pyx_v_n_classes == 2) != 0);
  if (__pyx_t_1) {

    /* "linalg.pxd":33
 *     cdef inline int arg_max(const weight_t* scores, const int n_classes) nogil:
 *         if n_classes == 2:
 *             return 0 if scores[0] > scores[1] else 1             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef int best = 0
 */
    if ((((__pyx_v_scores[0]) > (__pyx_v_scores[1])) != 0)) {
      __pyx_t_2 = 0;
    } else {
      __pyx_t_2 = 1;
    }
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "linalg.pxd":32
 *     @staticmethod
 *     cdef inline int arg_max(const weight_t* scores, const int n_classes) nogil:
 *         if n_classes == 2:             # <<<<<<<<<<<<<<
 *             return 0 if scores[0] > scores[1] else 1
 *         cdef int i
 */
  }

  /* "linalg.pxd":35
 *             return 0 if scores[0] > scores[1] else 1
 *         cdef int i
 *         cdef int best = 0             # <<<<<<<<<<<<<<
 *         cdef weight_t mode = scores[0]
 *         for i in range(1, n_classes):
 */
  __pyx_v_best = 0;

  /* "linalg.pxd":36
 *         cdef int i
 *         cdef int best = 0
 *         cdef weight_t mode = scores[0]             # <<<<<<<<<<<<<<
 *         for i in range(1, n_classes):
 *             if scores[i] > mode:
 */
  __pyx_v_mode = (__pyx_v_scores[0]);

  /* "linalg.pxd":37
 *         cdef int best = 0
 *         cdef weight_t mode = scores[0]
 *         for i in range(1, n_classes):             # <<<<<<<<<<<<<<
 *             if scores[i] > mode:
 *                 mode = scores[i]
 */
  __pyx_t_2 = __pyx_v_n_classes;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "linalg.pxd":38
 *         cdef weight_t mode = scores[0]
 *         for i in range(1, n_classes):
 *             if scores[i] > mode:             # <<<<<<<<<<<<<<
 *                 mode = scores[i]
 *                 best = i
 */
    __pyx_t_1 = (((__pyx_v_scores[__pyx_v_i]) > __pyx_v_mode) != 0);
    if (__pyx_t_1) {

      /* "linalg.pxd":39
 *         for i in range(1, n_classes):
 *             if scores[i] > mode:
 *                 mode = scores[i]             # <<<<<<<<<<<<<<
 *                 best = i
 *         return best
 */
      __pyx_v_mode = (__pyx_v_scores[__pyx_v_i]);

      /* "linalg.pxd":40
 *             if scores[i] > mode:
 *                 mode = scores[i]
 *                 best = i             # <<<<<<<<<<<<<<
 *         return best
 * 
 */
      __pyx_v_best = __pyx_v_i;

      /* "linalg.pxd":38
 *         cdef weight_t mode = scores[0]
 *         for i in range(1, n_classes):
 *             if scores[i] > mode:             # <<<<<<<<<<<<<<
 *                 mode = scores[i]
 *                 best = i
 */
    }
  }

  /* "linalg.pxd":41
 *                 mode = scores[i]
 *                 best = i
 *         return best             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_best;
  goto __pyx_L0;

  /* "linalg.pxd":31
 * cdef class Vec:
 *     @staticmethod
 *     cdef inline int arg_max(const weight_t* scores, const int n_classes) nogil:             # <<<<<<<<<<<<<<
 *         if n_classes == 2:
 *             return 0 if scores[0] > scores[1] else 1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":44
 * 
 *     @staticmethod
 *     cdef inline weight_t max(const weight_t* x, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         if nr == 0:
 *             return 0
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_max(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_mode;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  int __pyx_t_1;
  int32_t __pyx_t_2;
  int32_t __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":45
 *     @staticmethod
 *     cdef inline weight_t max(const weight_t* x, int32_t nr) nogil:
 *         if nr == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef int i
 */
  __pyx_t_1 = ((__pyx_v_nr == 0) != 0);
  if (__pyx_t_1) {

    /* "linalg.pxd":46
 *     cdef inline weight_t max(const weight_t* x, int32_t nr) nogil:
 *         if nr == 0:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef weight_t mode = x[0]
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "linalg.pxd":45
 *     @staticmethod
 *     cdef inline weight_t max(const weight_t* x, int32_t nr) nogil:
 *         if nr == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef int i
 */
  }

  /* "linalg.pxd":48
 *             return 0
 *         cdef int i
 *         cdef weight_t mode = x[0]             # <<<<<<<<<<<<<<
 *         for i in range(1, nr):
 *             if x[i] > mode:
 */
  __pyx_v_mode = (__pyx_v_x[0]);

  /* "linalg.pxd":49
 *         cdef int i
 *         cdef weight_t mode = x[0]
 *         for i in range(1, nr):             # <<<<<<<<<<<<<<
 *             if x[i] > mode:
 *                 mode = x[i]
 */
  __pyx_t_2 = __pyx_v_nr;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "linalg.pxd":50
 *         cdef weight_t mode = x[0]
 *         for i in range(1, nr):
 *             if x[i] > mode:             # <<<<<<<<<<<<<<
 *                 mode = x[i]
 *         return mode
 */
    __pyx_t_1 = (((__pyx_v_x[__pyx_v_i]) > __pyx_v_mode) != 0);
    if (__pyx_t_1) {

      /* "linalg.pxd":51
 *         for i in range(1, nr):
 *             if x[i] > mode:
 *                 mode = x[i]             # <<<<<<<<<<<<<<
 *         return mode
 * 
 */
      __pyx_v_mode = (__pyx_v_x[__pyx_v_i]);

      /* "linalg.pxd":50
 *         cdef weight_t mode = x[0]
 *         for i in range(1, nr):
 *             if x[i] > mode:             # <<<<<<<<<<<<<<
 *                 mode = x[i]
 *         return mode
 */
    }
  }

  /* "linalg.pxd":52
 *             if x[i] > mode:
 *                 mode = x[i]
 *         return mode             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_mode;
  goto __pyx_L0;

  /* "linalg.pxd":44
 * 
 *     @staticmethod
 *     cdef inline weight_t max(const weight_t* x, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         if nr == 0:
 *             return 0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":55
 * 
 *     @staticmethod
 *     cdef inline weight_t sum(const weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef weight_t total = 0
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_sum(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_total;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;

  /* "linalg.pxd":57
 *     cdef inline weight_t sum(const weight_t* vec, int32_t nr) nogil:
 *         cdef int i
 *         cdef weight_t total = 0             # <<<<<<<<<<<<<<
 *         for i in range(nr):
 *             total += vec[i]
 */
  __pyx_v_total = 0.0;

  /* "linalg.pxd":58
 *         cdef int i
 *         cdef weight_t total = 0
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             total += vec[i]
 *         return total
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":59
 *         cdef weight_t total = 0
 *         for i in range(nr):
 *             total += vec[i]             # <<<<<<<<<<<<<<
 *         return total
 * 
 */
    __pyx_v_total = (__pyx_v_total + (__pyx_v_vec[__pyx_v_i]));
  }

  /* "linalg.pxd":60
 *         for i in range(nr):
 *             total += vec[i]
 *         return total             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_total;
  goto __pyx_L0;

  /* "linalg.pxd":55
 * 
 *     @staticmethod
 *     cdef inline weight_t sum(const weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef weight_t total = 0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":63
 * 
 *     @staticmethod
 *     cdef inline weight_t norm(const weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t total = 0
 *         for i in range(nr):
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_norm(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, int32_t __pyx_v_nr) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_total;
  int32_t __pyx_v_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int32_t __pyx_t_3;

  /* "linalg.pxd":64
 *     @staticmethod
 *     cdef inline weight_t norm(const weight_t* vec, int32_t nr) nogil:
 *         cdef weight_t total = 0             # <<<<<<<<<<<<<<
 *         for i in range(nr):
 *             total += vec[i] ** 2
 */
  __pyx_v_total = 0.0;

  /* "linalg.pxd":65
 *     cdef inline weight_t norm(const weight_t* vec, int32_t nr) nogil:
 *         cdef weight_t total = 0
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             total += vec[i] ** 2
 *         return sqrt(total)
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":66
 *         cdef weight_t total = 0
 *         for i in range(nr):
 *             total += vec[i] ** 2             # <<<<<<<<<<<<<<
 *         return sqrt(total)
 * 
 */
    __pyx_v_total = (__pyx_v_total + powf(((__pyx_t_5thinc_8typedefs_weight_t)(__pyx_v_vec[__pyx_v_i])), 2.0));
  }

  /* "linalg.pxd":67
 *         for i in range(nr):
 *             total += vec[i] ** 2
 *         return sqrt(total)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = sqrt(__pyx_v_total);
  goto __pyx_L0;

  /* "linalg.pxd":63
 * 
 *     @staticmethod
 *     cdef inline weight_t norm(const weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t total = 0
 *         for i in range(nr):
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":70
 * 
 *     @staticmethod
 *     cdef inline void add(weight_t* output, const weight_t* x,             # <<<<<<<<<<<<<<
 *             weight_t inc, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_add(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_inc, int32_t __pyx_v_nr) {

  /* "linalg.pxd":72
 *     cdef inline void add(weight_t* output, const weight_t* x,
 *             weight_t inc, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         Vec.add_i(output, inc, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_x, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":73
 *             weight_t inc, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 *         Vec.add_i(output, inc, nr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_3Vec_add_i(__pyx_v_output, __pyx_v_inc, __pyx_v_nr);

  /* "linalg.pxd":70
 * 
 *     @staticmethod
 *     cdef inline void add(weight_t* output, const weight_t* x,             # <<<<<<<<<<<<<<
 *             weight_t inc, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 */

  /* function exit code */
}

/* "linalg.pxd":76
 * 
 *     @staticmethod
 *     cdef inline void add_i(weight_t* vec, weight_t inc, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_add_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_inc, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":78
 *     cdef inline void add_i(weight_t* vec, weight_t inc, int32_t nr) nogil:
 *         cdef int i
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             vec[i] += inc
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":79
 *         cdef int i
 *         for i in range(nr):
 *             vec[i] += inc             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_vec[__pyx_t_4]) = ((__pyx_v_vec[__pyx_t_4]) + __pyx_v_inc);
  }

  /* "linalg.pxd":76
 * 
 *     @staticmethod
 *     cdef inline void add_i(weight_t* vec, weight_t inc, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

  /* function exit code */
}

/* "linalg.pxd":82
 * 
 *     @staticmethod
 *     cdef inline void mul(weight_t* output, const weight_t* vec, weight_t scal,             # <<<<<<<<<<<<<<
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_mul(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr) {

  /* "linalg.pxd":84
 *     cdef inline void mul(weight_t* output, const weight_t* vec, weight_t scal,
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         Vec.mul_i(output, scal, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_vec, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":85
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 *         Vec.mul_i(output, scal, nr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_3Vec_mul_i(__pyx_v_output, __pyx_v_scal, __pyx_v_nr);

  /* "linalg.pxd":82
 * 
 *     @staticmethod
 *     cdef inline void mul(weight_t* output, const weight_t* vec, weight_t scal,             # <<<<<<<<<<<<<<
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 */

  /* function exit code */
}

/* "linalg.pxd":88
 * 
 *     @staticmethod
 *     cdef inline void mul_i(weight_t* vec, weight_t scal, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         IF USE_BLAS:
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_mul_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":93
 *             blis.cy.scalv(BLIS_NO_CONJUGATE, nr, scal, vec, 1)
 *         ELSE:
 *             for i in range(nr):             # <<<<<<<<<<<<<<
 *                 vec[i] *= scal
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":94
 *         ELSE:
 *             for i in range(nr):
 *                 vec[i] *= scal             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_vec[__pyx_t_4]) = ((__pyx_v_vec[__pyx_t_4]) * __pyx_v_scal);
  }

  /* "linalg.pxd":88
 * 
 *     @staticmethod
 *     cdef inline void mul_i(weight_t* vec, weight_t scal, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         IF USE_BLAS:
 */

  /* function exit code */
}

/* "linalg.pxd":97
 * 
 *     @staticmethod
 *     cdef inline void pow(weight_t* output, const weight_t* vec, weight_t scal,             # <<<<<<<<<<<<<<
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_pow(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr) {

  /* "linalg.pxd":99
 *     cdef inline void pow(weight_t* output, const weight_t* vec, weight_t scal,
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         Vec.pow_i(output, scal, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_vec, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":100
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 *         Vec.pow_i(output, scal, nr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_3Vec_pow_i(__pyx_v_output, __pyx_v_scal, __pyx_v_nr);

  /* "linalg.pxd":97
 * 
 *     @staticmethod
 *     cdef inline void pow(weight_t* output, const weight_t* vec, weight_t scal,             # <<<<<<<<<<<<<<
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 */

  /* function exit code */
}

/* "linalg.pxd":103
 * 
 *     @staticmethod
 *     cdef inline void pow_i(weight_t* vec, const weight_t scal, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_pow_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t const __pyx_v_scal, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":105
 *     cdef inline void pow_i(weight_t* vec, const weight_t scal, int32_t nr) nogil:
 *         cdef int i
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             vec[i] **= scal
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":106
 *         cdef int i
 *         for i in range(nr):
 *             vec[i] **= scal             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_vec[__pyx_t_4]) = powf((__pyx_v_vec[__pyx_t_4]), ((__pyx_t_5thinc_8typedefs_weight_t)__pyx_v_scal));
  }

  /* "linalg.pxd":103
 * 
 *     @staticmethod
 *     cdef inline void pow_i(weight_t* vec, const weight_t scal, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

  /* function exit code */
}

/* "linalg.pxd":110
 *     @staticmethod
 *     @cython.cdivision(True)
 *     cdef inline void div(weight_t* output, const weight_t* vec, weight_t scal,             # <<<<<<<<<<<<<<
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_div(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scal, int32_t __pyx_v_nr) {

  /* "linalg.pxd":112
 *     cdef inline void div(weight_t* output, const weight_t* vec, weight_t scal,
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         Vec.div_i(output, scal, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_vec, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":113
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 *         Vec.div_i(output, scal, nr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_3Vec_div_i(__pyx_v_output, __pyx_v_scal, __pyx_v_nr);

  /* "linalg.pxd":110
 *     @staticmethod
 *     @cython.cdivision(True)
 *     cdef inline void div(weight_t* output, const weight_t* vec, weight_t scal,             # <<<<<<<<<<<<<<
 *             int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 */

  /* function exit code */
}

/* "linalg.pxd":117
 *     @staticmethod
 *     @cython.cdivision(True)
 *     cdef inline void div_i(weight_t* vec, const weight_t scal, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_div_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, __pyx_t_5thinc_8typedefs_weight_t const __pyx_v_scal, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":119
 *     cdef inline void div_i(weight_t* vec, const weight_t scal, int32_t nr) nogil:
 *         cdef int i
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             vec[i] /= scal
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":120
 *         cdef int i
 *         for i in range(nr):
 *             vec[i] /= scal             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_vec[__pyx_t_4]) = ((__pyx_v_vec[__pyx_t_4]) / __pyx_v_scal);
  }

  /* "linalg.pxd":117
 *     @staticmethod
 *     @cython.cdivision(True)
 *     cdef inline void div_i(weight_t* vec, const weight_t scal, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

  /* function exit code */
}

/* "linalg.pxd":123
 * 
 *     @staticmethod
 *     cdef inline void exp(weight_t* output, const weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 *         Vec.exp_i(output, nr)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_exp(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_vec, int32_t __pyx_v_nr) {

  /* "linalg.pxd":124
 *     @staticmethod
 *     cdef inline void exp(weight_t* output, const weight_t* vec, int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         Vec.exp_i(output, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_vec, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":125
 *     cdef inline void exp(weight_t* output, const weight_t* vec, int32_t nr) nogil:
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 *         Vec.exp_i(output, nr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_3Vec_exp_i(__pyx_v_output, __pyx_v_nr);

  /* "linalg.pxd":123
 * 
 *     @staticmethod
 *     cdef inline void exp(weight_t* output, const weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         memcpy(output, vec, sizeof(output[0]) * nr)
 *         Vec.exp_i(output, nr)
 */

  /* function exit code */
}

/* "linalg.pxd":128
 * 
 *     @staticmethod
 *     cdef inline void exp_i(weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_exp_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;

  /* "linalg.pxd":130
 *     cdef inline void exp_i(weight_t* vec, int32_t nr) nogil:
 *         cdef int i
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             vec[i] = exp(vec[i])
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":131
 *         cdef int i
 *         for i in range(nr):
 *             vec[i] = exp(vec[i])             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    (__pyx_v_vec[__pyx_v_i]) = exp((__pyx_v_vec[__pyx_v_i]));
  }

  /* "linalg.pxd":128
 * 
 *     @staticmethod
 *     cdef inline void exp_i(weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

  /* function exit code */
}

/* "linalg.pxd":134
 * 
 *     @staticmethod
 *     cdef inline void reciprocal_i(weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Vec_reciprocal_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_vec, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;

  /* "linalg.pxd":136
 *     cdef inline void reciprocal_i(weight_t* vec, int32_t nr) nogil:
 *         cdef int i
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             vec[i] = 1.0 / vec[i]
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":137
 *         cdef int i
 *         for i in range(nr):
 *             vec[i] = 1.0 / vec[i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    (__pyx_v_vec[__pyx_v_i]) = (1.0 / (__pyx_v_vec[__pyx_v_i]));
  }

  /* "linalg.pxd":134
 * 
 *     @staticmethod
 *     cdef inline void reciprocal_i(weight_t* vec, int32_t nr) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(nr):
 */

  /* function exit code */
}

/* "linalg.pxd":140
 * 
 *     @staticmethod
 *     cdef inline weight_t mean(const weight_t* X, int32_t nr_dim) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t mean = 0.
 *         for x in X[:nr_dim]:
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_mean(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_X, int32_t __pyx_v_nr_dim) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_mean;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_x;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __pyx_t_5thinc_8typedefs_weight_t const *__pyx_t_1;
  __pyx_t_5thinc_8typedefs_weight_t const *__pyx_t_2;
  __pyx_t_5thinc_8typedefs_weight_t const *__pyx_t_3;

  /* "linalg.pxd":141
 *     @staticmethod
 *     cdef inline weight_t mean(const weight_t* X, int32_t nr_dim) nogil:
 *         cdef weight_t mean = 0.             # <<<<<<<<<<<<<<
 *         for x in X[:nr_dim]:
 *             mean += x
 */
  __pyx_v_mean = 0.;

  /* "linalg.pxd":142
 *     cdef inline weight_t mean(const weight_t* X, int32_t nr_dim) nogil:
 *         cdef weight_t mean = 0.
 *         for x in X[:nr_dim]:             # <<<<<<<<<<<<<<
 *             mean += x
 *         return mean / nr_dim
 */
  __pyx_t_2 = (__pyx_v_X + __pyx_v_nr_dim);
  for (__pyx_t_3 = __pyx_v_X; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_x = (__pyx_t_1[0]);

    /* "linalg.pxd":143
 *         cdef weight_t mean = 0.
 *         for x in X[:nr_dim]:
 *             mean += x             # <<<<<<<<<<<<<<
 *         return mean / nr_dim
 * 
 */
    __pyx_v_mean = (__pyx_v_mean + __pyx_v_x);
  }

  /* "linalg.pxd":144
 *         for x in X[:nr_dim]:
 *             mean += x
 *         return mean / nr_dim             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (__pyx_v_mean / __pyx_v_nr_dim);
  goto __pyx_L0;

  /* "linalg.pxd":140
 * 
 *     @staticmethod
 *     cdef inline weight_t mean(const weight_t* X, int32_t nr_dim) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t mean = 0.
 *         for x in X[:nr_dim]:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":147
 * 
 *     @staticmethod
 *     cdef inline weight_t variance(const weight_t* X, int32_t nr_dim) nogil:             # <<<<<<<<<<<<<<
 *         # See https://www.johndcook.com/blog/standard_deviation/
 *         cdef double m = X[0]
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_3Vec_variance(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_X, int32_t __pyx_v_nr_dim) {
  double __pyx_v_m;
  double __pyx_v_v;
  long __pyx_v_i;
  double __pyx_v_diff;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  long __pyx_t_3;

  /* "linalg.pxd":149
 *     cdef inline weight_t variance(const weight_t* X, int32_t nr_dim) nogil:
 *         # See https://www.johndcook.com/blog/standard_deviation/
 *         cdef double m = X[0]             # <<<<<<<<<<<<<<
 *         cdef double v = 0.
 *         for i in range(1, nr_dim):
 */
  __pyx_v_m = (__pyx_v_X[0]);

  /* "linalg.pxd":150
 *         # See https://www.johndcook.com/blog/standard_deviation/
 *         cdef double m = X[0]
 *         cdef double v = 0.             # <<<<<<<<<<<<<<
 *         for i in range(1, nr_dim):
 *             diff = X[i]-m
 */
  __pyx_v_v = 0.;

  /* "linalg.pxd":151
 *         cdef double m = X[0]
 *         cdef double v = 0.
 *         for i in range(1, nr_dim):             # <<<<<<<<<<<<<<
 *             diff = X[i]-m
 *             m += diff / (i+1)
 */
  __pyx_t_1 = __pyx_v_nr_dim;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":152
 *         cdef double v = 0.
 *         for i in range(1, nr_dim):
 *             diff = X[i]-m             # <<<<<<<<<<<<<<
 *             m += diff / (i+1)
 *             v += diff * (X[i] - m)
 */
    __pyx_v_diff = ((__pyx_v_X[__pyx_v_i]) - __pyx_v_m);

    /* "linalg.pxd":153
 *         for i in range(1, nr_dim):
 *             diff = X[i]-m
 *             m += diff / (i+1)             # <<<<<<<<<<<<<<
 *             v += diff * (X[i] - m)
 *         return v / nr_dim
 */
    __pyx_v_m = (__pyx_v_m + (__pyx_v_diff / (__pyx_v_i + 1)));

    /* "linalg.pxd":154
 *             diff = X[i]-m
 *             m += diff / (i+1)
 *             v += diff * (X[i] - m)             # <<<<<<<<<<<<<<
 *         return v / nr_dim
 * 
 */
    __pyx_v_v = (__pyx_v_v + (__pyx_v_diff * ((__pyx_v_X[__pyx_v_i]) - __pyx_v_m)));
  }

  /* "linalg.pxd":155
 *             m += diff / (i+1)
 *             v += diff * (X[i] - m)
 *         return v / nr_dim             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_v / __pyx_v_nr_dim);
  goto __pyx_L0;

  /* "linalg.pxd":147
 * 
 *     @staticmethod
 *     cdef inline weight_t variance(const weight_t* X, int32_t nr_dim) nogil:             # <<<<<<<<<<<<<<
 *         # See https://www.johndcook.com/blog/standard_deviation/
 *         cdef double m = X[0]
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":160
 * cdef class VecVec:
 *     @staticmethod
 *     cdef inline void add(weight_t* output,             # <<<<<<<<<<<<<<
 *                          const weight_t* x,
 *                          const weight_t* y,
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scale, int32_t __pyx_v_nr) {

  /* "linalg.pxd":165
 *                          weight_t scale,
 *                          int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         VecVec.add_i(output, y, scale, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_x, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":166
 *                          int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 *         VecVec.add_i(output, y, scale, nr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_6VecVec_add_i(__pyx_v_output, __pyx_v_y, __pyx_v_scale, __pyx_v_nr);

  /* "linalg.pxd":160
 * cdef class VecVec:
 *     @staticmethod
 *     cdef inline void add(weight_t* output,             # <<<<<<<<<<<<<<
 *                          const weight_t* x,
 *                          const weight_t* y,
 */

  /* function exit code */
}

/* "linalg.pxd":169
 * 
 *     @staticmethod
 *     cdef inline void add_i(weight_t* x,             # <<<<<<<<<<<<<<
 *                            const weight_t* y,
 *                            weight_t scale,
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scale, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":177
 *             blis.cy.axpyv(BLIS_NO_CONJUGATE, nr, scale, y, 1, x, 1)
 *         ELSE:
 *             for i in range(nr):             # <<<<<<<<<<<<<<
 *                 x[i] += y[i] * scale
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":178
 *         ELSE:
 *             for i in range(nr):
 *                 x[i] += y[i] * scale             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_x[__pyx_t_4]) = ((__pyx_v_x[__pyx_t_4]) + ((__pyx_v_y[__pyx_v_i]) * __pyx_v_scale));
  }

  /* "linalg.pxd":169
 * 
 *     @staticmethod
 *     cdef inline void add_i(weight_t* x,             # <<<<<<<<<<<<<<
 *                            const weight_t* y,
 *                            weight_t scale,
 */

  /* function exit code */
}

/* "linalg.pxd":181
 * 
 *     @staticmethod
 *     cdef inline void batch_add_i(weight_t* x,             # <<<<<<<<<<<<<<
 *                            const weight_t* y,
 *                            weight_t scale,
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_batch_add_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_scale, int32_t __pyx_v_nr, int32_t __pyx_v_nr_batch) {
  CYTHON_UNUSED int __pyx_v__;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;

  /* "linalg.pxd":187
 *         # For fixed x, matrix of y
 *         cdef int i, _
 *         for _ in range(nr_batch):             # <<<<<<<<<<<<<<
 *             VecVec.add_i(x,
 *                 y, scale, nr)
 */
  __pyx_t_1 = __pyx_v_nr_batch;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v__ = __pyx_t_3;

    /* "linalg.pxd":188
 *         cdef int i, _
 *         for _ in range(nr_batch):
 *             VecVec.add_i(x,             # <<<<<<<<<<<<<<
 *                 y, scale, nr)
 *             y += nr
 */
    __pyx_f_5thinc_6linalg_6VecVec_add_i(__pyx_v_x, __pyx_v_y, __pyx_v_scale, __pyx_v_nr);

    /* "linalg.pxd":190
 *             VecVec.add_i(x,
 *                 y, scale, nr)
 *             y += nr             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_v_y = (__pyx_v_y + __pyx_v_nr);
  }

  /* "linalg.pxd":181
 * 
 *     @staticmethod
 *     cdef inline void batch_add_i(weight_t* x,             # <<<<<<<<<<<<<<
 *                            const weight_t* y,
 *                            weight_t scale,
 */

  /* function exit code */
}

/* "linalg.pxd":193
 * 
 *     @staticmethod
 *     cdef inline void add_pow(weight_t* output,             # <<<<<<<<<<<<<<
 *             const weight_t* x, const weight_t* y, weight_t power, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_pow(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_power, int32_t __pyx_v_nr) {

  /* "linalg.pxd":195
 *     cdef inline void add_pow(weight_t* output,
 *             const weight_t* x, const weight_t* y, weight_t power, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         VecVec.add_pow_i(output, y, power, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_x, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":196
 *             const weight_t* x, const weight_t* y, weight_t power, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 *         VecVec.add_pow_i(output, y, power, nr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_5thinc_6linalg_6VecVec_add_pow_i(__pyx_v_output, __pyx_v_y, __pyx_v_power, __pyx_v_nr);

  /* "linalg.pxd":193
 * 
 *     @staticmethod
 *     cdef inline void add_pow(weight_t* output,             # <<<<<<<<<<<<<<
 *             const weight_t* x, const weight_t* y, weight_t power, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 */

  /* function exit code */
}

/* "linalg.pxd":200
 * 
 *     @staticmethod
 *     cdef inline void add_pow_i(weight_t* x,             # <<<<<<<<<<<<<<
 *             const weight_t* y, weight_t power, int32_t nr) nogil:
 *         cdef int i
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_add_pow_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_power, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":203
 *             const weight_t* y, weight_t power, int32_t nr) nogil:
 *         cdef int i
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             x[i] += y[i] ** power
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":204
 *         cdef int i
 *         for i in range(nr):
 *             x[i] += y[i] ** power             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_x[__pyx_t_4]) = ((__pyx_v_x[__pyx_t_4]) + powf(((__pyx_t_5thinc_8typedefs_weight_t)(__pyx_v_y[__pyx_v_i])), __pyx_v_power));
  }

  /* "linalg.pxd":200
 * 
 *     @staticmethod
 *     cdef inline void add_pow_i(weight_t* x,             # <<<<<<<<<<<<<<
 *             const weight_t* y, weight_t power, int32_t nr) nogil:
 *         cdef int i
 */

  /* function exit code */
}

/* "linalg.pxd":207
 * 
 *     @staticmethod
 *     cdef inline void mul(weight_t* output,             # <<<<<<<<<<<<<<
 *             const weight_t* x, const weight_t* y, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_mul(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_output, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, int32_t __pyx_v_nr) {

  /* "linalg.pxd":209
 *     cdef inline void mul(weight_t* output,
 *             const weight_t* x, const weight_t* y, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)             # <<<<<<<<<<<<<<
 *         VecVec.mul_i(output, y, nr)
 * 
 */
  (void)(memcpy(__pyx_v_output, __pyx_v_x, ((sizeof((__pyx_v_output[0]))) * __pyx_v_nr)));

  /* "linalg.pxd":210
 *             const weight_t* x, const weight_t* y, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 *         VecVec.mul_i(output, y, nr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_6VecVec_mul_i(__pyx_v_output, __pyx_v_y, __pyx_v_nr);

  /* "linalg.pxd":207
 * 
 *     @staticmethod
 *     cdef inline void mul(weight_t* output,             # <<<<<<<<<<<<<<
 *             const weight_t* x, const weight_t* y, int32_t nr) nogil:
 *         memcpy(output, x, sizeof(output[0]) * nr)
 */

  /* function exit code */
}

/* "linalg.pxd":213
 * 
 *     @staticmethod
 *     cdef inline void mul_i(weight_t* x,             # <<<<<<<<<<<<<<
 *             const weight_t* y, int32_t nr) nogil:
 *         cdef int i
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_6VecVec_mul_i(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "linalg.pxd":216
 *             const weight_t* y, int32_t nr) nogil:
 *         cdef int i
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             x[i] *= y[i]
 * 
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":217
 *         cdef int i
 *         for i in range(nr):
 *             x[i] *= y[i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_x[__pyx_t_4]) = ((__pyx_v_x[__pyx_t_4]) * (__pyx_v_y[__pyx_v_i]));
  }

  /* "linalg.pxd":213
 * 
 *     @staticmethod
 *     cdef inline void mul_i(weight_t* x,             # <<<<<<<<<<<<<<
 *             const weight_t* y, int32_t nr) nogil:
 *         cdef int i
 */

  /* function exit code */
}

/* "linalg.pxd":220
 * 
 *     @staticmethod
 *     cdef inline weight_t dot(             # <<<<<<<<<<<<<<
 *             const weight_t* x, const weight_t* y, int32_t nr) nogil:
 *         cdef int i
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5thinc_6linalg_6VecVec_dot(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_x, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_y, int32_t __pyx_v_nr) {
  int __pyx_v_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_total;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int __pyx_t_3;

  /* "linalg.pxd":223
 *             const weight_t* x, const weight_t* y, int32_t nr) nogil:
 *         cdef int i
 *         cdef weight_t total = 0             # <<<<<<<<<<<<<<
 *         for i in range(nr):
 *             total += x[i] * y[i]
 */
  __pyx_v_total = 0.0;

  /* "linalg.pxd":224
 *         cdef int i
 *         cdef weight_t total = 0
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             total += x[i] * y[i]
 *         return total
 */
  __pyx_t_1 = __pyx_v_nr;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":225
 *         cdef weight_t total = 0
 *         for i in range(nr):
 *             total += x[i] * y[i]             # <<<<<<<<<<<<<<
 *         return total
 * 
 */
    __pyx_v_total = (__pyx_v_total + ((__pyx_v_x[__pyx_v_i]) * (__pyx_v_y[__pyx_v_i])));
  }

  /* "linalg.pxd":226
 *         for i in range(nr):
 *             total += x[i] * y[i]
 *         return total             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_total;
  goto __pyx_L0;

  /* "linalg.pxd":220
 * 
 *     @staticmethod
 *     cdef inline weight_t dot(             # <<<<<<<<<<<<<<
 *             const weight_t* x, const weight_t* y, int32_t nr) nogil:
 *         cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":229
 * 
 *     @staticmethod
 *     cdef inline int arg_max_if_true(             # <<<<<<<<<<<<<<
 *             const weight_t* scores, const int* is_valid, const int n_classes) nogil:
 *         cdef int i
 */

static CYTHON_INLINE int __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_true(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, int const *__pyx_v_is_valid, int const __pyx_v_n_classes) {
  int __pyx_v_i;
  int __pyx_v_best;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;

  /* "linalg.pxd":232
 *             const weight_t* scores, const int* is_valid, const int n_classes) nogil:
 *         cdef int i
 *         cdef int best = -1             # <<<<<<<<<<<<<<
 *         for i in range(n_classes):
 *             if is_valid[i] and (best == -1 or scores[i] > scores[best]):
 */
  __pyx_v_best = -1;

  /* "linalg.pxd":233
 *         cdef int i
 *         cdef int best = -1
 *         for i in range(n_classes):             # <<<<<<<<<<<<<<
 *             if is_valid[i] and (best == -1 or scores[i] > scores[best]):
 *                 best = i
 */
  __pyx_t_1 = __pyx_v_n_classes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":234
 *         cdef int best = -1
 *         for i in range(n_classes):
 *             if is_valid[i] and (best == -1 or scores[i] > scores[best]):             # <<<<<<<<<<<<<<
 *                 best = i
 *         return best
 */
    __pyx_t_5 = ((__pyx_v_is_valid[__pyx_v_i]) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_v_best == -1L) != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = (((__pyx_v_scores[__pyx_v_i]) > (__pyx_v_scores[__pyx_v_best])) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_4) {

      /* "linalg.pxd":235
 *         for i in range(n_classes):
 *             if is_valid[i] and (best == -1 or scores[i] > scores[best]):
 *                 best = i             # <<<<<<<<<<<<<<
 *         return best
 * 
 */
      __pyx_v_best = __pyx_v_i;

      /* "linalg.pxd":234
 *         cdef int best = -1
 *         for i in range(n_classes):
 *             if is_valid[i] and (best == -1 or scores[i] > scores[best]):             # <<<<<<<<<<<<<<
 *                 best = i
 *         return best
 */
    }
  }

  /* "linalg.pxd":236
 *             if is_valid[i] and (best == -1 or scores[i] > scores[best]):
 *                 best = i
 *         return best             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_best;
  goto __pyx_L0;

  /* "linalg.pxd":229
 * 
 *     @staticmethod
 *     cdef inline int arg_max_if_true(             # <<<<<<<<<<<<<<
 *             const weight_t* scores, const int* is_valid, const int n_classes) nogil:
 *         cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":239
 * 
 *     @staticmethod
 *     cdef inline int arg_max_if_zero(             # <<<<<<<<<<<<<<
 *             const weight_t* scores, const weight_t* costs, const int n_classes) nogil:
 *         cdef int i
 */

static CYTHON_INLINE int __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_zero(__pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_costs, int const __pyx_v_n_classes) {
  int __pyx_v_i;
  int __pyx_v_best;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;

  /* "linalg.pxd":242
 *             const weight_t* scores, const weight_t* costs, const int n_classes) nogil:
 *         cdef int i
 *         cdef int best = -1             # <<<<<<<<<<<<<<
 *         for i in range(n_classes):
 *             if costs[i] == 0 and (best == -1 or scores[i] > scores[best]):
 */
  __pyx_v_best = -1;

  /* "linalg.pxd":243
 *         cdef int i
 *         cdef int best = -1
 *         for i in range(n_classes):             # <<<<<<<<<<<<<<
 *             if costs[i] == 0 and (best == -1 or scores[i] > scores[best]):
 *                 best = i
 */
  __pyx_t_1 = __pyx_v_n_classes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":244
 *         cdef int best = -1
 *         for i in range(n_classes):
 *             if costs[i] == 0 and (best == -1 or scores[i] > scores[best]):             # <<<<<<<<<<<<<<
 *                 best = i
 *         return best
 */
    __pyx_t_5 = (((__pyx_v_costs[__pyx_v_i]) == 0.0) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_v_best == -1L) != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = (((__pyx_v_scores[__pyx_v_i]) > (__pyx_v_scores[__pyx_v_best])) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_4) {

      /* "linalg.pxd":245
 *         for i in range(n_classes):
 *             if costs[i] == 0 and (best == -1 or scores[i] > scores[best]):
 *                 best = i             # <<<<<<<<<<<<<<
 *         return best
 * 
 */
      __pyx_v_best = __pyx_v_i;

      /* "linalg.pxd":244
 *         cdef int best = -1
 *         for i in range(n_classes):
 *             if costs[i] == 0 and (best == -1 or scores[i] > scores[best]):             # <<<<<<<<<<<<<<
 *                 best = i
 *         return best
 */
    }
  }

  /* "linalg.pxd":246
 *             if costs[i] == 0 and (best == -1 or scores[i] > scores[best]):
 *                 best = i
 *         return best             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_best;
  goto __pyx_L0;

  /* "linalg.pxd":239
 * 
 *     @staticmethod
 *     cdef inline int arg_max_if_zero(             # <<<<<<<<<<<<<<
 *             const weight_t* scores, const weight_t* costs, const int n_classes) nogil:
 *         cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "linalg.pxd":251
 * cdef class Mat:
 *     @staticmethod
 *     cdef inline void mean_row(weight_t* Ex,             # <<<<<<<<<<<<<<
 *             const weight_t* mat, int32_t nr_row, int32_t nr_col) nogil:
 *         memset(Ex, 0, sizeof(Ex[0]) * nr_col)
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Mat_mean_row(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_Ex, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_mat, int32_t __pyx_v_nr_row, int32_t __pyx_v_nr_col) {
  int32_t __pyx_v_i;
  int32_t __pyx_t_1;
  int32_t __pyx_t_2;
  int32_t __pyx_t_3;

  /* "linalg.pxd":253
 *     cdef inline void mean_row(weight_t* Ex,
 *             const weight_t* mat, int32_t nr_row, int32_t nr_col) nogil:
 *         memset(Ex, 0, sizeof(Ex[0]) * nr_col)             # <<<<<<<<<<<<<<
 *         for i in range(nr_row):
 *             VecVec.add_i(Ex, &mat[i * nr_col], 1.0, nr_col)
 */
  (void)(memset(__pyx_v_Ex, 0, ((sizeof((__pyx_v_Ex[0]))) * __pyx_v_nr_col)));

  /* "linalg.pxd":254
 *             const weight_t* mat, int32_t nr_row, int32_t nr_col) nogil:
 *         memset(Ex, 0, sizeof(Ex[0]) * nr_col)
 *         for i in range(nr_row):             # <<<<<<<<<<<<<<
 *             VecVec.add_i(Ex, &mat[i * nr_col], 1.0, nr_col)
 *         Vec.mul_i(Ex, 1.0 / nr_row, nr_col)
 */
  __pyx_t_1 = __pyx_v_nr_row;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "linalg.pxd":255
 *         memset(Ex, 0, sizeof(Ex[0]) * nr_col)
 *         for i in range(nr_row):
 *             VecVec.add_i(Ex, &mat[i * nr_col], 1.0, nr_col)             # <<<<<<<<<<<<<<
 *         Vec.mul_i(Ex, 1.0 / nr_row, nr_col)
 * 
 */
    __pyx_f_5thinc_6linalg_6VecVec_add_i(__pyx_v_Ex, (&(__pyx_v_mat[(__pyx_v_i * __pyx_v_nr_col)])), 1.0, __pyx_v_nr_col);
  }

  /* "linalg.pxd":256
 *         for i in range(nr_row):
 *             VecVec.add_i(Ex, &mat[i * nr_col], 1.0, nr_col)
 *         Vec.mul_i(Ex, 1.0 / nr_row, nr_col)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_5thinc_6linalg_3Vec_mul_i(__pyx_v_Ex, (1.0 / __pyx_v_nr_row), __pyx_v_nr_col);

  /* "linalg.pxd":251
 * cdef class Mat:
 *     @staticmethod
 *     cdef inline void mean_row(weight_t* Ex,             # <<<<<<<<<<<<<<
 *             const weight_t* mat, int32_t nr_row, int32_t nr_col) nogil:
 *         memset(Ex, 0, sizeof(Ex[0]) * nr_col)
 */

  /* function exit code */
}

/* "linalg.pxd":259
 * 
 *     @staticmethod
 *     cdef inline void var_row(weight_t* Vx,             # <<<<<<<<<<<<<<
 *             const weight_t* mat, const weight_t* Ex,
 *             int32_t nr_row, int32_t nr_col, weight_t eps) nogil:
 */

static CYTHON_INLINE void __pyx_f_5thinc_6linalg_3Mat_var_row(__pyx_t_5thinc_8typedefs_weight_t *__pyx_v_Vx, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_mat, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_Ex, int32_t __pyx_v_nr_row, int32_t __pyx_v_nr_col, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_eps) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_sum_;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_sum2;
  int32_t __pyx_v_i;
  int32_t __pyx_v_j;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_x;
  int __pyx_t_1;
  int __pyx_t_2;
  int32_t __pyx_t_3;
  int32_t __pyx_t_4;
  int32_t __pyx_t_5;
  int32_t __pyx_t_6;
  int32_t __pyx_t_7;
  int32_t __pyx_t_8;

  /* "linalg.pxd":263
 *             int32_t nr_row, int32_t nr_col, weight_t eps) nogil:
 *         # From https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
 *         if nr_row == 0 or nr_col == 0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef weight_t sum_, sum2
 */
  __pyx_t_2 = ((__pyx_v_nr_row == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_nr_col == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "linalg.pxd":264
 *         # From https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
 *         if nr_row == 0 or nr_col == 0:
 *             return             # <<<<<<<<<<<<<<
 *         cdef weight_t sum_, sum2
 *         for i in range(nr_col):
 */
    goto __pyx_L0;

    /* "linalg.pxd":263
 *             int32_t nr_row, int32_t nr_col, weight_t eps) nogil:
 *         # From https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
 *         if nr_row == 0 or nr_col == 0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef weight_t sum_, sum2
 */
  }

  /* "linalg.pxd":266
 *             return
 *         cdef weight_t sum_, sum2
 *         for i in range(nr_col):             # <<<<<<<<<<<<<<
 *             sum_ = 0.0
 *             sum2 = 0.0
 */
  __pyx_t_3 = __pyx_v_nr_col;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "linalg.pxd":267
 *         cdef weight_t sum_, sum2
 *         for i in range(nr_col):
 *             sum_ = 0.0             # <<<<<<<<<<<<<<
 *             sum2 = 0.0
 *             for j in range(nr_row):
 */
    __pyx_v_sum_ = 0.0;

    /* "linalg.pxd":268
 *         for i in range(nr_col):
 *             sum_ = 0.0
 *             sum2 = 0.0             # <<<<<<<<<<<<<<
 *             for j in range(nr_row):
 *                 x = mat[j * nr_col + i]
 */
    __pyx_v_sum2 = 0.0;

    /* "linalg.pxd":269
 *             sum_ = 0.0
 *             sum2 = 0.0
 *             for j in range(nr_row):             # <<<<<<<<<<<<<<
 *                 x = mat[j * nr_col + i]
 *                 sum2 += (x - Ex[i]) ** 2
 */
    __pyx_t_6 = __pyx_v_nr_row;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "linalg.pxd":270
 *             sum2 = 0.0
 *             for j in range(nr_row):
 *                 x = mat[j * nr_col + i]             # <<<<<<<<<<<<<<
 *                 sum2 += (x - Ex[i]) ** 2
 *                 sum_ += x - Ex[i]
 */
      __pyx_v_x = (__pyx_v_mat[((__pyx_v_j * __pyx_v_nr_col) + __pyx_v_i)]);

      /* "linalg.pxd":271
 *             for j in range(nr_row):
 *                 x = mat[j * nr_col + i]
 *                 sum2 += (x - Ex[i]) ** 2             # <<<<<<<<<<<<<<
 *                 sum_ += x - Ex[i]
 *             Vx[i] = (sum2 - sum_**2 / nr_row) / nr_row
 */
      __pyx_v_sum2 = (__pyx_v_sum2 + powf((__pyx_v_x - (__pyx_v_Ex[__pyx_v_i])), 2.0));

      /* "linalg.pxd":272
 *                 x = mat[j * nr_col + i]
 *                 sum2 += (x - Ex[i]) ** 2
 *                 sum_ += x - Ex[i]             # <<<<<<<<<<<<<<
 *             Vx[i] = (sum2 - sum_**2 / nr_row) / nr_row
 *             Vx[i] += eps
 */
      __pyx_v_sum_ = (__pyx_v_sum_ + (__pyx_v_x - (__pyx_v_Ex[__pyx_v_i])));
    }

    /* "linalg.pxd":273
 *                 sum2 += (x - Ex[i]) ** 2
 *                 sum_ += x - Ex[i]
 *             Vx[i] = (sum2 - sum_**2 / nr_row) / nr_row             # <<<<<<<<<<<<<<
 *             Vx[i] += eps
 */
    (__pyx_v_Vx[__pyx_v_i]) = ((__pyx_v_sum2 - (powf(__pyx_v_sum_, 2.0) / __pyx_v_nr_row)) / __pyx_v_nr_row);

    /* "linalg.pxd":274
 *                 sum_ += x - Ex[i]
 *             Vx[i] = (sum2 - sum_**2 / nr_row) / nr_row
 *             Vx[i] += eps             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __pyx_v_i;
    (__pyx_v_Vx[__pyx_t_6]) = ((__pyx_v_Vx[__pyx_t_6]) + __pyx_v_eps);
  }

  /* "linalg.pxd":259
 * 
 *     @staticmethod
 *     cdef inline void var_row(weight_t* Vx,             # <<<<<<<<<<<<<<
 *             const weight_t* mat, const weight_t* Ex,
 *             int32_t nr_row, int32_t nr_col, weight_t eps) nogil:
 */

  /* function exit code */
  __pyx_L0:;
}

/* "structs.pxd":140
 *     int batch_size
 * 
 *     __init__(len_t* widths, int nr_layer, int batch_size) nogil:             # <<<<<<<<<<<<<<
 *         this.i = 0
 *         this.nr_layer = nr_layer
 */

void __pyx_t_5thinc_7structs_MinibatchC::__pyx_f___init__MinibatchC(__pyx_t_5thinc_8typedefs_len_t *__pyx_v_widths, int __pyx_v_nr_layer, int __pyx_v_batch_size) {
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "structs.pxd":141
 * 
 *     __init__(len_t* widths, int nr_layer, int batch_size) nogil:
 *         this.i = 0             # <<<<<<<<<<<<<<
 *         this.nr_layer = nr_layer
 *         this.batch_size = batch_size
 */
  this->i = 0;

  /* "structs.pxd":142
 *     __init__(len_t* widths, int nr_layer, int batch_size) nogil:
 *         this.i = 0
 *         this.nr_layer = nr_layer             # <<<<<<<<<<<<<<
 *         this.batch_size = batch_size
 *         this.widths = <len_t*>calloc(nr_layer, sizeof(len_t))
 */
  this->nr_layer = __pyx_v_nr_layer;

  /* "structs.pxd":143
 *         this.i = 0
 *         this.nr_layer = nr_layer
 *         this.batch_size = batch_size             # <<<<<<<<<<<<<<
 *         this.widths = <len_t*>calloc(nr_layer, sizeof(len_t))
 *         this._fwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 */
  this->batch_size = __pyx_v_batch_size;

  /* "structs.pxd":144
 *         this.nr_layer = nr_layer
 *         this.batch_size = batch_size
 *         this.widths = <len_t*>calloc(nr_layer, sizeof(len_t))             # <<<<<<<<<<<<<<
 *         this._fwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 *         this._bwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 */
  this->widths = ((__pyx_t_5thinc_8typedefs_len_t *)calloc(__pyx_v_nr_layer, (sizeof(__pyx_t_5thinc_8typedefs_len_t))));

  /* "structs.pxd":145
 *         this.batch_size = batch_size
 *         this.widths = <len_t*>calloc(nr_layer, sizeof(len_t))
 *         this._fwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))             # <<<<<<<<<<<<<<
 *         this._bwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 *         for i in range(nr_layer):
 */
  this->_fwd = ((__pyx_t_5thinc_8typedefs_weight_t **)calloc(__pyx_v_nr_layer, (sizeof(__pyx_t_5thinc_8typedefs_weight_t *))));

  /* "structs.pxd":146
 *         this.widths = <len_t*>calloc(nr_layer, sizeof(len_t))
 *         this._fwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 *         this._bwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))             # <<<<<<<<<<<<<<
 *         for i in range(nr_layer):
 *             this.widths[i] = widths[i]
 */
  this->_bwd = ((__pyx_t_5thinc_8typedefs_weight_t **)calloc(__pyx_v_nr_layer, (sizeof(__pyx_t_5thinc_8typedefs_weight_t *))));

  /* "structs.pxd":147
 *         this._fwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 *         this._bwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 *         for i in range(nr_layer):             # <<<<<<<<<<<<<<
 *             this.widths[i] = widths[i]
 *             this._fwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 */
  __pyx_t_1 = __pyx_v_nr_layer;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "structs.pxd":148
 *         this._bwd = <weight_t**>calloc(nr_layer, sizeof(weight_t*))
 *         for i in range(nr_layer):
 *             this.widths[i] = widths[i]             # <<<<<<<<<<<<<<
 *             this._fwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 *             this._bwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 */
    (this->widths[__pyx_v_i]) = (__pyx_v_widths[__pyx_v_i]);

    /* "structs.pxd":149
 *         for i in range(nr_layer):
 *             this.widths[i] = widths[i]
 *             this._fwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))             # <<<<<<<<<<<<<<
 *             this._bwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 *         this._feats = <FeatureC**>calloc(batch_size, sizeof(void*))
 */
    (this->_fwd[__pyx_v_i]) = ((__pyx_t_5thinc_8typedefs_weight_t *)calloc(((this->widths[__pyx_v_i]) * __pyx_v_batch_size), (sizeof(__pyx_t_5thinc_8typedefs_weight_t))));

    /* "structs.pxd":150
 *             this.widths[i] = widths[i]
 *             this._fwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 *             this._bwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))             # <<<<<<<<<<<<<<
 *         this._feats = <FeatureC**>calloc(batch_size, sizeof(void*))
 *         this._nr_feat = <len_t*>calloc(batch_size, sizeof(len_t))
 */
    (this->_bwd[__pyx_v_i]) = ((__pyx_t_5thinc_8typedefs_weight_t *)calloc(((this->widths[__pyx_v_i]) * __pyx_v_batch_size), (sizeof(__pyx_t_5thinc_8typedefs_weight_t))));
  }

  /* "structs.pxd":151
 *             this._fwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 *             this._bwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 *         this._feats = <FeatureC**>calloc(batch_size, sizeof(void*))             # <<<<<<<<<<<<<<
 *         this._nr_feat = <len_t*>calloc(batch_size, sizeof(len_t))
 *         this._is_valid = <int*>calloc(batch_size * widths[nr_layer-1], sizeof(int))
 */
  this->_feats = ((struct __pyx_t_5thinc_7structs_FeatureC **)calloc(__pyx_v_batch_size, (sizeof(void *))));

  /* "structs.pxd":152
 *             this._bwd[i] = <weight_t*>calloc(this.widths[i] * batch_size, sizeof(weight_t))
 *         this._feats = <FeatureC**>calloc(batch_size, sizeof(void*))
 *         this._nr_feat = <len_t*>calloc(batch_size, sizeof(len_t))             # <<<<<<<<<<<<<<
 *         this._is_valid = <int*>calloc(batch_size * widths[nr_layer-1], sizeof(int))
 *         this._costs = <weight_t*>calloc(batch_size * widths[nr_layer-1], sizeof(weight_t))
 */
  this->_nr_feat = ((__pyx_t_5thinc_8typedefs_len_t *)calloc(__pyx_v_batch_size, (sizeof(__pyx_t_5thinc_8typedefs_len_t))));

  /* "structs.pxd":153
 *         this._feats = <FeatureC**>calloc(batch_size, sizeof(void*))
 *         this._nr_feat = <len_t*>calloc(batch_size, sizeof(len_t))
 *         this._is_valid = <int*>calloc(batch_size * widths[nr_layer-1], sizeof(int))             # <<<<<<<<<<<<<<
 *         this._costs = <weight_t*>calloc(batch_size * widths[nr_layer-1], sizeof(weight_t))
 *         this.signatures = <uint64_t*>calloc(batch_size, sizeof(uint64_t))
 */
  this->_is_valid = ((int *)calloc((__pyx_v_batch_size * (__pyx_v_widths[(__pyx_v_nr_layer - 1)])), (sizeof(int))));

  /* "structs.pxd":154
 *         this._nr_feat = <len_t*>calloc(batch_size, sizeof(len_t))
 *         this._is_valid = <int*>calloc(batch_size * widths[nr_layer-1], sizeof(int))
 *         this._costs = <weight_t*>calloc(batch_size * widths[nr_layer-1], sizeof(weight_t))             # <<<<<<<<<<<<<<
 *         this.signatures = <uint64_t*>calloc(batch_size, sizeof(uint64_t))
 * 
 */
  this->_costs = ((__pyx_t_5thinc_8typedefs_weight_t *)calloc((__pyx_v_batch_size * (__pyx_v_widths[(__pyx_v_nr_layer - 1)])), (sizeof(__pyx_t_5thinc_8typedefs_weight_t))));

  /* "structs.pxd":155
 *         this._is_valid = <int*>calloc(batch_size * widths[nr_layer-1], sizeof(int))
 *         this._costs = <weight_t*>calloc(batch_size * widths[nr_layer-1], sizeof(weight_t))
 *         this.signatures = <uint64_t*>calloc(batch_size, sizeof(uint64_t))             # <<<<<<<<<<<<<<
 * 
 *     __dealloc__() nogil:
 */
  this->signatures = ((uint64_t *)calloc(__pyx_v_batch_size, (sizeof(uint64_t))));

  /* "structs.pxd":140
 *     int batch_size
 * 
 *     __init__(len_t* widths, int nr_layer, int batch_size) nogil:             # <<<<<<<<<<<<<<
 *         this.i = 0
 *         this.nr_layer = nr_layer
 */

  /* function exit code */
}

/* "structs.pxd":157
 *         this.signatures = <uint64_t*>calloc(batch_size, sizeof(uint64_t))
 * 
 *     __dealloc__() nogil:             # <<<<<<<<<<<<<<
 *         free(this.widths)
 *         for i in range(this.nr_layer):
 */

void __pyx_t_5thinc_7structs_MinibatchC::__pyx_f___dealloc__MinibatchC(void) {
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "structs.pxd":158
 * 
 *     __dealloc__() nogil:
 *         free(this.widths)             # <<<<<<<<<<<<<<
 *         for i in range(this.nr_layer):
 *             free(this._fwd[i])
 */
  free(this->widths);

  /* "structs.pxd":159
 *     __dealloc__() nogil:
 *         free(this.widths)
 *         for i in range(this.nr_layer):             # <<<<<<<<<<<<<<
 *             free(this._fwd[i])
 *             free(this._bwd[i])
 */
  __pyx_t_1 = this->nr_layer;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "structs.pxd":160
 *         free(this.widths)
 *         for i in range(this.nr_layer):
 *             free(this._fwd[i])             # <<<<<<<<<<<<<<
 *             free(this._bwd[i])
 *         for i in range(this.i):
 */
    free((this->_fwd[__pyx_v_i]));

    /* "structs.pxd":161
 *         for i in range(this.nr_layer):
 *             free(this._fwd[i])
 *             free(this._bwd[i])             # <<<<<<<<<<<<<<
 *         for i in range(this.i):
 *             free(this._feats[i])
 */
    free((this->_bwd[__pyx_v_i]));
  }

  /* "structs.pxd":162
 *             free(this._fwd[i])
 *             free(this._bwd[i])
 *         for i in range(this.i):             # <<<<<<<<<<<<<<
 *             free(this._feats[i])
 *         free(this._fwd)
 */
  __pyx_t_1 = this->i;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "structs.pxd":163
 *             free(this._bwd[i])
 *         for i in range(this.i):
 *             free(this._feats[i])             # <<<<<<<<<<<<<<
 *         free(this._fwd)
 *         free(this._bwd)
 */
    free((this->_feats[__pyx_v_i]));
  }

  /* "structs.pxd":164
 *         for i in range(this.i):
 *             free(this._feats[i])
 *         free(this._fwd)             # <<<<<<<<<<<<<<
 *         free(this._bwd)
 *         free(this._feats)
 */
  free(this->_fwd);

  /* "structs.pxd":165
 *             free(this._feats[i])
 *         free(this._fwd)
 *         free(this._bwd)             # <<<<<<<<<<<<<<
 *         free(this._feats)
 *         free(this._nr_feat)
 */
  free(this->_bwd);

  /* "structs.pxd":166
 *         free(this._fwd)
 *         free(this._bwd)
 *         free(this._feats)             # <<<<<<<<<<<<<<
 *         free(this._nr_feat)
 *         free(this._is_valid)
 */
  free(this->_feats);

  /* "structs.pxd":167
 *         free(this._bwd)
 *         free(this._feats)
 *         free(this._nr_feat)             # <<<<<<<<<<<<<<
 *         free(this._is_valid)
 *         free(this._costs)
 */
  free(this->_nr_feat);

  /* "structs.pxd":168
 *         free(this._feats)
 *         free(this._nr_feat)
 *         free(this._is_valid)             # <<<<<<<<<<<<<<
 *         free(this._costs)
 *         free(this.signatures)
 */
  free(this->_is_valid);

  /* "structs.pxd":169
 *         free(this._nr_feat)
 *         free(this._is_valid)
 *         free(this._costs)             # <<<<<<<<<<<<<<
 *         free(this.signatures)
 * 
 */
  free(this->_costs);

  /* "structs.pxd":170
 *         free(this._is_valid)
 *         free(this._costs)
 *         free(this.signatures)             # <<<<<<<<<<<<<<
 * 
 *     void reset() nogil:
 */
  free(this->signatures);

  /* "structs.pxd":157
 *         this.signatures = <uint64_t*>calloc(batch_size, sizeof(uint64_t))
 * 
 *     __dealloc__() nogil:             # <<<<<<<<<<<<<<
 *         free(this.widths)
 *         for i in range(this.nr_layer):
 */

  /* function exit code */
}

/* "structs.pxd":172
 *         free(this.signatures)
 * 
 *     void reset() nogil:             # <<<<<<<<<<<<<<
 *         for i in range(this.nr_layer):
 *             memset(this._fwd[i],
 */

void __pyx_t_5thinc_7structs_MinibatchC::reset(void) {
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "structs.pxd":173
 * 
 *     void reset() nogil:
 *         for i in range(this.nr_layer):             # <<<<<<<<<<<<<<
 *             memset(this._fwd[i],
 *                 0, sizeof(this._fwd[i][0]) * this.batch_size * this.widths[i])
 */
  __pyx_t_1 = this->nr_layer;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "structs.pxd":174
 *     void reset() nogil:
 *         for i in range(this.nr_layer):
 *             memset(this._fwd[i],             # <<<<<<<<<<<<<<
 *                 0, sizeof(this._fwd[i][0]) * this.batch_size * this.widths[i])
 *             memset(this._bwd[i],
 */
    (void)(memset((this->_fwd[__pyx_v_i]), 0, (((sizeof(((this->_fwd[__pyx_v_i])[0]))) * this->batch_size) * (this->widths[__pyx_v_i]))));

    /* "structs.pxd":176
 *             memset(this._fwd[i],
 *                 0, sizeof(this._fwd[i][0]) * this.batch_size * this.widths[i])
 *             memset(this._bwd[i],             # <<<<<<<<<<<<<<
 *                 0, sizeof(this._bwd[i][0]) * this.batch_size * this.widths[i])
 *         memset(this._nr_feat, 0, sizeof(this._nr_feat[0]) * this.batch_size)
 */
    (void)(memset((this->_bwd[__pyx_v_i]), 0, (((sizeof(((this->_bwd[__pyx_v_i])[0]))) * this->batch_size) * (this->widths[__pyx_v_i]))));
  }

  /* "structs.pxd":178
 *             memset(this._bwd[i],
 *                 0, sizeof(this._bwd[i][0]) * this.batch_size * this.widths[i])
 *         memset(this._nr_feat, 0, sizeof(this._nr_feat[0]) * this.batch_size)             # <<<<<<<<<<<<<<
 *         memset(this.signatures, 0, sizeof(this.signatures[0]) * this.batch_size)
 *         memset(this._costs,
 */
  (void)(memset(this->_nr_feat, 0, ((sizeof((this->_nr_feat[0]))) * this->batch_size)));

  /* "structs.pxd":179
 *                 0, sizeof(this._bwd[i][0]) * this.batch_size * this.widths[i])
 *         memset(this._nr_feat, 0, sizeof(this._nr_feat[0]) * this.batch_size)
 *         memset(this.signatures, 0, sizeof(this.signatures[0]) * this.batch_size)             # <<<<<<<<<<<<<<
 *         memset(this._costs,
 *             0, sizeof(this._costs[0]) * this.nr_out() * this.batch_size)
 */
  (void)(memset(this->signatures, 0, ((sizeof((this->signatures[0]))) * this->batch_size)));

  /* "structs.pxd":180
 *         memset(this._nr_feat, 0, sizeof(this._nr_feat[0]) * this.batch_size)
 *         memset(this.signatures, 0, sizeof(this.signatures[0]) * this.batch_size)
 *         memset(this._costs,             # <<<<<<<<<<<<<<
 *             0, sizeof(this._costs[0]) * this.nr_out() * this.batch_size)
 *         memset(this._is_valid,
 */
  (void)(memset(this->_costs, 0, (((sizeof((this->_costs[0]))) * this->nr_out()) * this->batch_size)));

  /* "structs.pxd":182
 *         memset(this._costs,
 *             0, sizeof(this._costs[0]) * this.nr_out() * this.batch_size)
 *         memset(this._is_valid,             # <<<<<<<<<<<<<<
 *             0, sizeof(this._is_valid[0]) * this.nr_out() * this.batch_size)
 *         for i in range(this.i):
 */
  (void)(memset(this->_is_valid, 0, (((sizeof((this->_is_valid[0]))) * this->nr_out()) * this->batch_size)));

  /* "structs.pxd":184
 *         memset(this._is_valid,
 *             0, sizeof(this._is_valid[0]) * this.nr_out() * this.batch_size)
 *         for i in range(this.i):             # <<<<<<<<<<<<<<
 *             free(this._feats[i])
 *             this._feats[i] = NULL
 */
  __pyx_t_1 = this->i;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "structs.pxd":185
 *             0, sizeof(this._is_valid[0]) * this.nr_out() * this.batch_size)
 *         for i in range(this.i):
 *             free(this._feats[i])             # <<<<<<<<<<<<<<
 *             this._feats[i] = NULL
 *         this.i = 0
 */
    free((this->_feats[__pyx_v_i]));

    /* "structs.pxd":186
 *         for i in range(this.i):
 *             free(this._feats[i])
 *             this._feats[i] = NULL             # <<<<<<<<<<<<<<
 *         this.i = 0
 * 
 */
    (this->_feats[__pyx_v_i]) = NULL;
  }

  /* "structs.pxd":187
 *             free(this._feats[i])
 *             this._feats[i] = NULL
 *         this.i = 0             # <<<<<<<<<<<<<<
 * 
 *     int nr_in() nogil:
 */
  this->i = 0;

  /* "structs.pxd":172
 *         free(this.signatures)
 * 
 *     void reset() nogil:             # <<<<<<<<<<<<<<
 *         for i in range(this.nr_layer):
 *             memset(this._fwd[i],
 */

  /* function exit code */
}

/* "structs.pxd":189
 *         this.i = 0
 * 
 *     int nr_in() nogil:             # <<<<<<<<<<<<<<
 *         return this.widths[0]
 * 
 */

int __pyx_t_5thinc_7structs_MinibatchC::nr_in(void) {
  int __pyx_r;

  /* "structs.pxd":190
 * 
 *     int nr_in() nogil:
 *         return this.widths[0]             # <<<<<<<<<<<<<<
 * 
 *     int nr_out() nogil:
 */
  __pyx_r = (this->widths[0]);
  goto __pyx_L0;

  /* "structs.pxd":189
 *         this.i = 0
 * 
 *     int nr_in() nogil:             # <<<<<<<<<<<<<<
 *         return this.widths[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":192
 *         return this.widths[0]
 * 
 *     int nr_out() nogil:             # <<<<<<<<<<<<<<
 *         return this.widths[this.nr_layer - 1]
 * 
 */

int __pyx_t_5thinc_7structs_MinibatchC::nr_out(void) {
  int __pyx_r;

  /* "structs.pxd":193
 * 
 *     int nr_out() nogil:
 *         return this.widths[this.nr_layer - 1]             # <<<<<<<<<<<<<<
 * 
 *     int push_back(const FeatureC* feats, int nr_feat,
 */
  __pyx_r = (this->widths[(this->nr_layer - 1)]);
  goto __pyx_L0;

  /* "structs.pxd":192
 *         return this.widths[0]
 * 
 *     int nr_out() nogil:             # <<<<<<<<<<<<<<
 *         return this.widths[this.nr_layer - 1]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":195
 *         return this.widths[this.nr_layer - 1]
 * 
 *     int push_back(const FeatureC* feats, int nr_feat,             # <<<<<<<<<<<<<<
 *             const weight_t* costs, const int* is_valid, uint64_t key) nogil:
 *         # Hash the features, to see if the batch has a matching input.
 */

int __pyx_t_5thinc_7structs_MinibatchC::push_back(struct __pyx_t_5thinc_7structs_FeatureC const *__pyx_v_feats, int __pyx_v_nr_feat, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_costs, int const *__pyx_v_is_valid, uint64_t __pyx_v_key) {
  int __pyx_v_i;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "structs.pxd":199
 *         # Hash the features, to see if the batch has a matching input.
 *         # If it does, just update the gradient for it.
 *         if key != 0:             # <<<<<<<<<<<<<<
 *             for i in range(this.i):
 *                 if this.signatures[i] == key:
 */
  __pyx_t_1 = ((__pyx_v_key != 0) != 0);
  if (__pyx_t_1) {

    /* "structs.pxd":200
 *         # If it does, just update the gradient for it.
 *         if key != 0:
 *             for i in range(this.i):             # <<<<<<<<<<<<<<
 *                 if this.signatures[i] == key:
 *                     VecVec.add_i(this.costs(i),
 */
    __pyx_t_2 = this->i;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "structs.pxd":201
 *         if key != 0:
 *             for i in range(this.i):
 *                 if this.signatures[i] == key:             # <<<<<<<<<<<<<<
 *                     VecVec.add_i(this.costs(i),
 *                         costs, 1.0, this.nr_out())
 */
      __pyx_t_1 = (((this->signatures[__pyx_v_i]) == __pyx_v_key) != 0);
      if (__pyx_t_1) {

        /* "structs.pxd":202
 *             for i in range(this.i):
 *                 if this.signatures[i] == key:
 *                     VecVec.add_i(this.costs(i),             # <<<<<<<<<<<<<<
 *                         costs, 1.0, this.nr_out())
 *                     return 0
 */
        __pyx_f_5thinc_6linalg_6VecVec_add_i(this->costs(__pyx_v_i), __pyx_v_costs, 1.0, this->nr_out());

        /* "structs.pxd":204
 *                     VecVec.add_i(this.costs(i),
 *                         costs, 1.0, this.nr_out())
 *                     return 0             # <<<<<<<<<<<<<<
 *         if this.i >= this.batch_size:
 *             this.reset()
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "structs.pxd":201
 *         if key != 0:
 *             for i in range(this.i):
 *                 if this.signatures[i] == key:             # <<<<<<<<<<<<<<
 *                     VecVec.add_i(this.costs(i),
 *                         costs, 1.0, this.nr_out())
 */
      }
    }

    /* "structs.pxd":199
 *         # Hash the features, to see if the batch has a matching input.
 *         # If it does, just update the gradient for it.
 *         if key != 0:             # <<<<<<<<<<<<<<
 *             for i in range(this.i):
 *                 if this.signatures[i] == key:
 */
  }

  /* "structs.pxd":205
 *                         costs, 1.0, this.nr_out())
 *                     return 0
 *         if this.i >= this.batch_size:             # <<<<<<<<<<<<<<
 *             this.reset()
 *             this.i = 0 # This is done in reset() --- but make it obvious
 */
  __pyx_t_1 = ((this->i >= this->batch_size) != 0);
  if (__pyx_t_1) {

    /* "structs.pxd":206
 *                     return 0
 *         if this.i >= this.batch_size:
 *             this.reset()             # <<<<<<<<<<<<<<
 *             this.i = 0 # This is done in reset() --- but make it obvious
 * 
 */
    this->reset();

    /* "structs.pxd":207
 *         if this.i >= this.batch_size:
 *             this.reset()
 *             this.i = 0 # This is done in reset() --- but make it obvious             # <<<<<<<<<<<<<<
 * 
 *         this.signatures[this.i] = key
 */
    this->i = 0;

    /* "structs.pxd":205
 *                         costs, 1.0, this.nr_out())
 *                     return 0
 *         if this.i >= this.batch_size:             # <<<<<<<<<<<<<<
 *             this.reset()
 *             this.i = 0 # This is done in reset() --- but make it obvious
 */
  }

  /* "structs.pxd":209
 *             this.i = 0 # This is done in reset() --- but make it obvious
 * 
 *         this.signatures[this.i] = key             # <<<<<<<<<<<<<<
 *         this._nr_feat[this.i] = nr_feat
 *         this._feats[this.i] = <FeatureC*>calloc(nr_feat, sizeof(FeatureC))
 */
  (this->signatures[this->i]) = __pyx_v_key;

  /* "structs.pxd":210
 * 
 *         this.signatures[this.i] = key
 *         this._nr_feat[this.i] = nr_feat             # <<<<<<<<<<<<<<
 *         this._feats[this.i] = <FeatureC*>calloc(nr_feat, sizeof(FeatureC))
 *         memcpy(this._feats[this.i],
 */
  (this->_nr_feat[this->i]) = __pyx_v_nr_feat;

  /* "structs.pxd":211
 *         this.signatures[this.i] = key
 *         this._nr_feat[this.i] = nr_feat
 *         this._feats[this.i] = <FeatureC*>calloc(nr_feat, sizeof(FeatureC))             # <<<<<<<<<<<<<<
 *         memcpy(this._feats[this.i],
 *             feats, nr_feat * sizeof(this._feats[this.i][0]))
 */
  (this->_feats[this->i]) = ((struct __pyx_t_5thinc_7structs_FeatureC *)calloc(__pyx_v_nr_feat, (sizeof(struct __pyx_t_5thinc_7structs_FeatureC))));

  /* "structs.pxd":212
 *         this._nr_feat[this.i] = nr_feat
 *         this._feats[this.i] = <FeatureC*>calloc(nr_feat, sizeof(FeatureC))
 *         memcpy(this._feats[this.i],             # <<<<<<<<<<<<<<
 *             feats, nr_feat * sizeof(this._feats[this.i][0]))
 * 
 */
  (void)(memcpy((this->_feats[this->i]), __pyx_v_feats, (__pyx_v_nr_feat * (sizeof(((this->_feats[this->i])[0]))))));

  /* "structs.pxd":215
 *             feats, nr_feat * sizeof(this._feats[this.i][0]))
 * 
 *         memcpy(this.costs(this.i),             # <<<<<<<<<<<<<<
 *             costs, this.nr_out() * sizeof(costs[0]))
 *         if is_valid is not NULL:
 */
  (void)(memcpy(this->costs(this->i), __pyx_v_costs, (this->nr_out() * (sizeof((__pyx_v_costs[0]))))));

  /* "structs.pxd":217
 *         memcpy(this.costs(this.i),
 *             costs, this.nr_out() * sizeof(costs[0]))
 *         if is_valid is not NULL:             # <<<<<<<<<<<<<<
 *             memcpy(this.is_valid(this.i),
 *                 is_valid, this.nr_out() * sizeof(is_valid[0]))
 */
  __pyx_t_1 = ((__pyx_v_is_valid != NULL) != 0);
  if (__pyx_t_1) {

    /* "structs.pxd":218
 *             costs, this.nr_out() * sizeof(costs[0]))
 *         if is_valid is not NULL:
 *             memcpy(this.is_valid(this.i),             # <<<<<<<<<<<<<<
 *                 is_valid, this.nr_out() * sizeof(is_valid[0]))
 *         else:
 */
    (void)(memcpy(this->is_valid(this->i), __pyx_v_is_valid, (this->nr_out() * (sizeof((__pyx_v_is_valid[0]))))));

    /* "structs.pxd":217
 *         memcpy(this.costs(this.i),
 *             costs, this.nr_out() * sizeof(costs[0]))
 *         if is_valid is not NULL:             # <<<<<<<<<<<<<<
 *             memcpy(this.is_valid(this.i),
 *                 is_valid, this.nr_out() * sizeof(is_valid[0]))
 */
    goto __pyx_L8;
  }

  /* "structs.pxd":221
 *                 is_valid, this.nr_out() * sizeof(is_valid[0]))
 *         else:
 *             for i in range(this.nr_out()):             # <<<<<<<<<<<<<<
 *                 this.is_valid(this.i)[i] = 1
 *         this.i += 1
 */
  /*else*/ {
    __pyx_t_2 = this->nr_out();
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "structs.pxd":222
 *         else:
 *             for i in range(this.nr_out()):
 *                 this.is_valid(this.i)[i] = 1             # <<<<<<<<<<<<<<
 *         this.i += 1
 *         return this.i >= this.batch_size
 */
      (this->is_valid(this->i)[__pyx_v_i]) = 1;
    }
  }
  __pyx_L8:;

  /* "structs.pxd":223
 *             for i in range(this.nr_out()):
 *                 this.is_valid(this.i)[i] = 1
 *         this.i += 1             # <<<<<<<<<<<<<<
 *         return this.i >= this.batch_size
 * 
 */
  this->i = (this->i + 1);

  /* "structs.pxd":224
 *                 this.is_valid(this.i)[i] = 1
 *         this.i += 1
 *         return this.i >= this.batch_size             # <<<<<<<<<<<<<<
 * 
 *     FeatureC* features(int i) nogil:
 */
  __pyx_r = (this->i >= this->batch_size);
  goto __pyx_L0;

  /* "structs.pxd":195
 *         return this.widths[this.nr_layer - 1]
 * 
 *     int push_back(const FeatureC* feats, int nr_feat,             # <<<<<<<<<<<<<<
 *             const weight_t* costs, const int* is_valid, uint64_t key) nogil:
 *         # Hash the features, to see if the batch has a matching input.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":226
 *         return this.i >= this.batch_size
 * 
 *     FeatureC* features(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._feats[i]
 * 
 */

struct __pyx_t_5thinc_7structs_FeatureC *__pyx_t_5thinc_7structs_MinibatchC::features(int __pyx_v_i) {
  struct __pyx_t_5thinc_7structs_FeatureC *__pyx_r;

  /* "structs.pxd":227
 * 
 *     FeatureC* features(int i) nogil:
 *         return this._feats[i]             # <<<<<<<<<<<<<<
 * 
 *     int nr_feat(int i) nogil:
 */
  __pyx_r = (this->_feats[__pyx_v_i]);
  goto __pyx_L0;

  /* "structs.pxd":226
 *         return this.i >= this.batch_size
 * 
 *     FeatureC* features(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._feats[i]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":229
 *         return this._feats[i]
 * 
 *     int nr_feat(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._nr_feat[i]
 * 
 */

int __pyx_t_5thinc_7structs_MinibatchC::nr_feat(int __pyx_v_i) {
  int __pyx_r;

  /* "structs.pxd":230
 * 
 *     int nr_feat(int i) nogil:
 *         return this._nr_feat[i]             # <<<<<<<<<<<<<<
 * 
 *     weight_t* fwd(int i, int j) nogil:
 */
  __pyx_r = (this->_nr_feat[__pyx_v_i]);
  goto __pyx_L0;

  /* "structs.pxd":229
 *         return this._feats[i]
 * 
 *     int nr_feat(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._nr_feat[i]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":232
 *         return this._nr_feat[i]
 * 
 *     weight_t* fwd(int i, int j) nogil:             # <<<<<<<<<<<<<<
 *         return this._fwd[i] + (j * this.widths[i])
 * 
 */

__pyx_t_5thinc_8typedefs_weight_t *__pyx_t_5thinc_7structs_MinibatchC::fwd(int __pyx_v_i, int __pyx_v_j) {
  __pyx_t_5thinc_8typedefs_weight_t *__pyx_r;

  /* "structs.pxd":233
 * 
 *     weight_t* fwd(int i, int j) nogil:
 *         return this._fwd[i] + (j * this.widths[i])             # <<<<<<<<<<<<<<
 * 
 *     weight_t* bwd(int i, int j) nogil:
 */
  __pyx_r = ((this->_fwd[__pyx_v_i]) + (__pyx_v_j * (this->widths[__pyx_v_i])));
  goto __pyx_L0;

  /* "structs.pxd":232
 *         return this._nr_feat[i]
 * 
 *     weight_t* fwd(int i, int j) nogil:             # <<<<<<<<<<<<<<
 *         return this._fwd[i] + (j * this.widths[i])
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":235
 *         return this._fwd[i] + (j * this.widths[i])
 * 
 *     weight_t* bwd(int i, int j) nogil:             # <<<<<<<<<<<<<<
 *         return this._bwd[i] + (j * this.widths[i])
 * 
 */

__pyx_t_5thinc_8typedefs_weight_t *__pyx_t_5thinc_7structs_MinibatchC::bwd(int __pyx_v_i, int __pyx_v_j) {
  __pyx_t_5thinc_8typedefs_weight_t *__pyx_r;

  /* "structs.pxd":236
 * 
 *     weight_t* bwd(int i, int j) nogil:
 *         return this._bwd[i] + (j * this.widths[i])             # <<<<<<<<<<<<<<
 * 
 *     weight_t* scores(int i) nogil:
 */
  __pyx_r = ((this->_bwd[__pyx_v_i]) + (__pyx_v_j * (this->widths[__pyx_v_i])));
  goto __pyx_L0;

  /* "structs.pxd":235
 *         return this._fwd[i] + (j * this.widths[i])
 * 
 *     weight_t* bwd(int i, int j) nogil:             # <<<<<<<<<<<<<<
 *         return this._bwd[i] + (j * this.widths[i])
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":238
 *         return this._bwd[i] + (j * this.widths[i])
 * 
 *     weight_t* scores(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this.fwd(this.nr_layer-1, i)
 * 
 */

__pyx_t_5thinc_8typedefs_weight_t *__pyx_t_5thinc_7structs_MinibatchC::scores(int __pyx_v_i) {
  __pyx_t_5thinc_8typedefs_weight_t *__pyx_r;

  /* "structs.pxd":239
 * 
 *     weight_t* scores(int i) nogil:
 *         return this.fwd(this.nr_layer-1, i)             # <<<<<<<<<<<<<<
 * 
 *     weight_t* losses(int i) nogil:
 */
  __pyx_r = this->fwd((this->nr_layer - 1), __pyx_v_i);
  goto __pyx_L0;

  /* "structs.pxd":238
 *         return this._bwd[i] + (j * this.widths[i])
 * 
 *     weight_t* scores(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this.fwd(this.nr_layer-1, i)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":241
 *         return this.fwd(this.nr_layer-1, i)
 * 
 *     weight_t* losses(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this.bwd(this.nr_layer-1, i)
 * 
 */

__pyx_t_5thinc_8typedefs_weight_t *__pyx_t_5thinc_7structs_MinibatchC::losses(int __pyx_v_i) {
  __pyx_t_5thinc_8typedefs_weight_t *__pyx_r;

  /* "structs.pxd":242
 * 
 *     weight_t* losses(int i) nogil:
 *         return this.bwd(this.nr_layer-1, i)             # <<<<<<<<<<<<<<
 * 
 *     weight_t* costs(int i) nogil:
 */
  __pyx_r = this->bwd((this->nr_layer - 1), __pyx_v_i);
  goto __pyx_L0;

  /* "structs.pxd":241
 *         return this.fwd(this.nr_layer-1, i)
 * 
 *     weight_t* losses(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this.bwd(this.nr_layer-1, i)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":244
 *         return this.bwd(this.nr_layer-1, i)
 * 
 *     weight_t* costs(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._costs + (i * this.nr_out())
 * 
 */

__pyx_t_5thinc_8typedefs_weight_t *__pyx_t_5thinc_7structs_MinibatchC::costs(int __pyx_v_i) {
  __pyx_t_5thinc_8typedefs_weight_t *__pyx_r;

  /* "structs.pxd":245
 * 
 *     weight_t* costs(int i) nogil:
 *         return this._costs + (i * this.nr_out())             # <<<<<<<<<<<<<<
 * 
 *     int* is_valid(int i) nogil:
 */
  __pyx_r = (this->_costs + (__pyx_v_i * this->nr_out()));
  goto __pyx_L0;

  /* "structs.pxd":244
 *         return this.bwd(this.nr_layer-1, i)
 * 
 *     weight_t* costs(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._costs + (i * this.nr_out())
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":247
 *         return this._costs + (i * this.nr_out())
 * 
 *     int* is_valid(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._is_valid + (i * this.nr_out())
 * 
 */

int *__pyx_t_5thinc_7structs_MinibatchC::is_valid(int __pyx_v_i) {
  int *__pyx_r;

  /* "structs.pxd":248
 * 
 *     int* is_valid(int i) nogil:
 *         return this._is_valid + (i * this.nr_out())             # <<<<<<<<<<<<<<
 * 
 *     int guess(int i) nogil:
 */
  __pyx_r = (this->_is_valid + (__pyx_v_i * this->nr_out()));
  goto __pyx_L0;

  /* "structs.pxd":247
 *         return this._costs + (i * this.nr_out())
 * 
 *     int* is_valid(int i) nogil:             # <<<<<<<<<<<<<<
 *         return this._is_valid + (i * this.nr_out())
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":250
 *         return this._is_valid + (i * this.nr_out())
 * 
 *     int guess(int i) nogil:             # <<<<<<<<<<<<<<
 *         return VecVec.arg_max_if_true(this.scores(i), this.is_valid(i), this.nr_out())
 * 
 */

int __pyx_t_5thinc_7structs_MinibatchC::guess(int __pyx_v_i) {
  int __pyx_r;

  /* "structs.pxd":251
 * 
 *     int guess(int i) nogil:
 *         return VecVec.arg_max_if_true(this.scores(i), this.is_valid(i), this.nr_out())             # <<<<<<<<<<<<<<
 * 
 *     int best(int i) nogil:
 */
  __pyx_r = __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_true(this->scores(__pyx_v_i), this->is_valid(__pyx_v_i), this->nr_out());
  goto __pyx_L0;

  /* "structs.pxd":250
 *         return this._is_valid + (i * this.nr_out())
 * 
 *     int guess(int i) nogil:             # <<<<<<<<<<<<<<
 *         return VecVec.arg_max_if_true(this.scores(i), this.is_valid(i), this.nr_out())
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "structs.pxd":253
 *         return VecVec.arg_max_if_true(this.scores(i), this.is_valid(i), this.nr_out())
 * 
 *     int best(int i) nogil:             # <<<<<<<<<<<<<<
 *         return VecVec.arg_max_if_zero(this.scores(i), this.costs(i), this.nr_out())
 * 
 */

int __pyx_t_5thinc_7structs_MinibatchC::best(int __pyx_v_i) {
  int __pyx_r;

  /* "structs.pxd":254
 * 
 *     int best(int i) nogil:
 *         return VecVec.arg_max_if_zero(this.scores(i), this.costs(i), this.nr_out())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_5thinc_6linalg_6VecVec_arg_max_if_zero(this->scores(__pyx_v_i), this->costs(__pyx_v_i), this->nr_out());
  goto __pyx_L0;

  /* "structs.pxd":253
 *         return VecVec.arg_max_if_true(this.scores(i), this.is_valid(i), this.nr_out())
 * 
 *     int best(int i) nogil:             # <<<<<<<<<<<<<<
 *         return VecVec.arg_max_if_zero(this.scores(i), this.costs(i), this.nr_out())
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "sparse.pxd":12
 * 
 *     @staticmethod
 *     cdef inline SparseArrayC* init(int key, weight_t value) except NULL:             # <<<<<<<<<<<<<<
 *         array = <SparseArrayC*>PyMem_Malloc(3 * sizeof(SparseArrayC))
 *         array[0] = SparseArrayC(key=key, val=value)
 */

static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_init(int __pyx_v_key, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_value) {
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_array;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_5thinc_7structs_SparseArrayC __pyx_t_1;
  __Pyx_RefNannySetupContext("init", 0);

  /* "sparse.pxd":13
 *     @staticmethod
 *     cdef inline SparseArrayC* init(int key, weight_t value) except NULL:
 *         array = <SparseArrayC*>PyMem_Malloc(3 * sizeof(SparseArrayC))             # <<<<<<<<<<<<<<
 *         array[0] = SparseArrayC(key=key, val=value)
 *         array[1] = SparseArrayC(key=-1, val=0) # -1 marks end of values
 */
  __pyx_v_array = ((struct __pyx_t_5thinc_7structs_SparseArrayC *)PyMem_Malloc((3 * (sizeof(struct __pyx_t_5thinc_7structs_SparseArrayC)))));

  /* "sparse.pxd":14
 *     cdef inline SparseArrayC* init(int key, weight_t value) except NULL:
 *         array = <SparseArrayC*>PyMem_Malloc(3 * sizeof(SparseArrayC))
 *         array[0] = SparseArrayC(key=key, val=value)             # <<<<<<<<<<<<<<
 *         array[1] = SparseArrayC(key=-1, val=0) # -1 marks end of values
 *         array[2] = SparseArrayC(key=-2, val=0) # -2 marks end of memory
 */
  __pyx_t_1.key = __pyx_v_key;
  __pyx_t_1.val = __pyx_v_value;
  (__pyx_v_array[0]) = __pyx_t_1;

  /* "sparse.pxd":15
 *         array = <SparseArrayC*>PyMem_Malloc(3 * sizeof(SparseArrayC))
 *         array[0] = SparseArrayC(key=key, val=value)
 *         array[1] = SparseArrayC(key=-1, val=0) # -1 marks end of values             # <<<<<<<<<<<<<<
 *         array[2] = SparseArrayC(key=-2, val=0) # -2 marks end of memory
 *         return array
 */
  __pyx_t_1.key = -1;
  __pyx_t_1.val = 0.0;
  (__pyx_v_array[1]) = __pyx_t_1;

  /* "sparse.pxd":16
 *         array[0] = SparseArrayC(key=key, val=value)
 *         array[1] = SparseArrayC(key=-1, val=0) # -1 marks end of values
 *         array[2] = SparseArrayC(key=-2, val=0) # -2 marks end of memory             # <<<<<<<<<<<<<<
 *         return array
 * 
 */
  __pyx_t_1.key = -2;
  __pyx_t_1.val = 0.0;
  (__pyx_v_array[2]) = __pyx_t_1;

  /* "sparse.pxd":17
 *         array[1] = SparseArrayC(key=-1, val=0) # -1 marks end of values
 *         array[2] = SparseArrayC(key=-2, val=0) # -2 marks end of memory
 *         return array             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_array;
  goto __pyx_L0;

  /* "sparse.pxd":12
 * 
 *     @staticmethod
 *     cdef inline SparseArrayC* init(int key, weight_t value) except NULL:             # <<<<<<<<<<<<<<
 *         array = <SparseArrayC*>PyMem_Malloc(3 * sizeof(SparseArrayC))
 *         array[0] = SparseArrayC(key=key, val=value)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sparse.pxd":20
 * 
 *     @staticmethod
 *     cdef inline SparseArrayC* clone(const SparseArrayC* src) except NULL:             # <<<<<<<<<<<<<<
 *         # Find length
 *         cdef int i = 0
 */

static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_clone(struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_src) {
  int __pyx_v_i;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_dest;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "sparse.pxd":22
 *     cdef inline SparseArrayC* clone(const SparseArrayC* src) except NULL:
 *         # Find length
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         while src[i].key != -2:
 *             i += 1
 */
  __pyx_v_i = 0;

  /* "sparse.pxd":23
 *         # Find length
 *         cdef int i = 0
 *         while src[i].key != -2:             # <<<<<<<<<<<<<<
 *             i += 1
 *         i += 1
 */
  while (1) {
    __pyx_t_1 = (((__pyx_v_src[__pyx_v_i]).key != -2L) != 0);
    if (!__pyx_t_1) break;

    /* "sparse.pxd":24
 *         cdef int i = 0
 *         while src[i].key != -2:
 *             i += 1             # <<<<<<<<<<<<<<
 *         i += 1
 *         dest = <SparseArrayC*>PyMem_Malloc(i * sizeof(SparseArrayC))
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "sparse.pxd":25
 *         while src[i].key != -2:
 *             i += 1
 *         i += 1             # <<<<<<<<<<<<<<
 *         dest = <SparseArrayC*>PyMem_Malloc(i * sizeof(SparseArrayC))
 *         memcpy(dest, src, i * sizeof(SparseArrayC))
 */
  __pyx_v_i = (__pyx_v_i + 1);

  /* "sparse.pxd":26
 *             i += 1
 *         i += 1
 *         dest = <SparseArrayC*>PyMem_Malloc(i * sizeof(SparseArrayC))             # <<<<<<<<<<<<<<
 *         memcpy(dest, src, i * sizeof(SparseArrayC))
 *         return dest
 */
  __pyx_v_dest = ((struct __pyx_t_5thinc_7structs_SparseArrayC *)PyMem_Malloc((__pyx_v_i * (sizeof(struct __pyx_t_5thinc_7structs_SparseArrayC)))));

  /* "sparse.pxd":27
 *         i += 1
 *         dest = <SparseArrayC*>PyMem_Malloc(i * sizeof(SparseArrayC))
 *         memcpy(dest, src, i * sizeof(SparseArrayC))             # <<<<<<<<<<<<<<
 *         return dest
 * 
 */
  (void)(memcpy(__pyx_v_dest, __pyx_v_src, (__pyx_v_i * (sizeof(struct __pyx_t_5thinc_7structs_SparseArrayC)))));

  /* "sparse.pxd":28
 *         dest = <SparseArrayC*>PyMem_Malloc(i * sizeof(SparseArrayC))
 *         memcpy(dest, src, i * sizeof(SparseArrayC))
 *         return dest             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  /* "sparse.pxd":20
 * 
 *     @staticmethod
 *     cdef inline SparseArrayC* clone(const SparseArrayC* src) except NULL:             # <<<<<<<<<<<<<<
 *         # Find length
 *         cdef int i = 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sparse.pxd":31
 * 
 *     @staticmethod
 *     cdef inline int find_key(const SparseArrayC* array, int key) except -2:             # <<<<<<<<<<<<<<
 *         # Find either the key, or a place to insert it.
 *         cdef int i = 0
 */

static CYTHON_INLINE int __pyx_f_5thinc_6linear_6sparse_11SparseArray_find_key(struct __pyx_t_5thinc_7structs_SparseArrayC const *__pyx_v_array, int __pyx_v_key) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("find_key", 0);

  /* "sparse.pxd":33
 *     cdef inline int find_key(const SparseArrayC* array, int key) except -2:
 *         # Find either the key, or a place to insert it.
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         while array[i].key != -2:
 *             if array[i].key == key:
 */
  __pyx_v_i = 0;

  /* "sparse.pxd":34
 *         # Find either the key, or a place to insert it.
 *         cdef int i = 0
 *         while array[i].key != -2:             # <<<<<<<<<<<<<<
 *             if array[i].key == key:
 *                 return i
 */
  while (1) {
    __pyx_t_1 = (((__pyx_v_array[__pyx_v_i]).key != -2L) != 0);
    if (!__pyx_t_1) break;

    /* "sparse.pxd":35
 *         cdef int i = 0
 *         while array[i].key != -2:
 *             if array[i].key == key:             # <<<<<<<<<<<<<<
 *                 return i
 *             elif array[i].key == -1:
 */
    __pyx_t_1 = (((__pyx_v_array[__pyx_v_i]).key == __pyx_v_key) != 0);
    if (__pyx_t_1) {

      /* "sparse.pxd":36
 *         while array[i].key != -2:
 *             if array[i].key == key:
 *                 return i             # <<<<<<<<<<<<<<
 *             elif array[i].key == -1:
 *                 return i
 */
      __pyx_r = __pyx_v_i;
      goto __pyx_L0;

      /* "sparse.pxd":35
 *         cdef int i = 0
 *         while array[i].key != -2:
 *             if array[i].key == key:             # <<<<<<<<<<<<<<
 *                 return i
 *             elif array[i].key == -1:
 */
    }

    /* "sparse.pxd":37
 *             if array[i].key == key:
 *                 return i
 *             elif array[i].key == -1:             # <<<<<<<<<<<<<<
 *                 return i
 *             else:
 */
    __pyx_t_1 = (((__pyx_v_array[__pyx_v_i]).key == -1L) != 0);
    if (__pyx_t_1) {

      /* "sparse.pxd":38
 *                 return i
 *             elif array[i].key == -1:
 *                 return i             # <<<<<<<<<<<<<<
 *             else:
 *                 i += 1
 */
      __pyx_r = __pyx_v_i;
      goto __pyx_L0;

      /* "sparse.pxd":37
 *             if array[i].key == key:
 *                 return i
 *             elif array[i].key == -1:             # <<<<<<<<<<<<<<
 *                 return i
 *             else:
 */
    }

    /* "sparse.pxd":40
 *                 return i
 *             else:
 *                 i += 1             # <<<<<<<<<<<<<<
 *         else:
 *             return -1
 */
    /*else*/ {
      __pyx_v_i = (__pyx_v_i + 1);
    }
  }

  /* "sparse.pxd":42
 *                 i += 1
 *         else:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = -1;
    goto __pyx_L0;
  }

  /* "sparse.pxd":31
 * 
 *     @staticmethod
 *     cdef inline int find_key(const SparseArrayC* array, int key) except -2:             # <<<<<<<<<<<<<<
 *         # Find either the key, or a place to insert it.
 *         cdef int i = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sparse.pxd":45
 * 
 *     @staticmethod
 *     cdef inline SparseArrayC* resize(SparseArrayC* array) except NULL:             # <<<<<<<<<<<<<<
 *         cdef int length = 0
 *         while array[length].key != -2:
 */

static CYTHON_INLINE struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_f_5thinc_6linear_6sparse_11SparseArray_resize(struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_v_array) {
  int __pyx_v_length;
  int __pyx_v_new_length;
  int __pyx_v_i;
  struct __pyx_t_5thinc_7structs_SparseArrayC *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  struct __pyx_t_5thinc_7structs_SparseArrayC __pyx_t_5;
  __Pyx_RefNannySetupContext("resize", 0);

  /* "sparse.pxd":46
 *     @staticmethod
 *     cdef inline SparseArrayC* resize(SparseArrayC* array) except NULL:
 *         cdef int length = 0             # <<<<<<<<<<<<<<
 *         while array[length].key != -2:
 *             length += 1
 */
  __pyx_v_length = 0;

  /* "sparse.pxd":47
 *     cdef inline SparseArrayC* resize(SparseArrayC* array) except NULL:
 *         cdef int length = 0
 *         while array[length].key != -2:             # <<<<<<<<<<<<<<
 *             length += 1
 *         cdef int new_length = length * 2
 */
  while (1) {
    __pyx_t_1 = (((__pyx_v_array[__pyx_v_length]).key != -2L) != 0);
    if (!__pyx_t_1) break;

    /* "sparse.pxd":48
 *         cdef int length = 0
 *         while array[length].key != -2:
 *             length += 1             # <<<<<<<<<<<<<<
 *         cdef int new_length = length * 2
 *         array = <SparseArrayC*>PyMem_Realloc(array, new_length * sizeof(SparseArrayC))
 */
    __pyx_v_length = (__pyx_v_length + 1);
  }

  /* "sparse.pxd":49
 *         while array[length].key != -2:
 *             length += 1
 *         cdef int new_length = length * 2             # <<<<<<<<<<<<<<
 *         array = <SparseArrayC*>PyMem_Realloc(array, new_length * sizeof(SparseArrayC))
 *         cdef int i
 */
  __pyx_v_new_length = (__pyx_v_length * 2);

  /* "sparse.pxd":50
 *             length += 1
 *         cdef int new_length = length * 2
 *         array = <SparseArrayC*>PyMem_Realloc(array, new_length * sizeof(SparseArrayC))             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(length, new_length-1):
 */
  __pyx_v_array = ((struct __pyx_t_5thinc_7structs_SparseArrayC *)PyMem_Realloc(__pyx_v_array, (__pyx_v_new_length * (sizeof(struct __pyx_t_5thinc_7structs_SparseArrayC)))));

  /* "sparse.pxd":52
 *         array = <SparseArrayC*>PyMem_Realloc(array, new_length * sizeof(SparseArrayC))
 *         cdef int i
 *         for i in range(length, new_length-1):             # <<<<<<<<<<<<<<
 *             array[i] = SparseArrayC(key=-1, val=0)
 *         array[new_length-1] = SparseArrayC(key=-2, val=0)
 */
  __pyx_t_2 = (__pyx_v_new_length - 1);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = __pyx_v_length; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "sparse.pxd":53
 *         cdef int i
 *         for i in range(length, new_length-1):
 *             array[i] = SparseArrayC(key=-1, val=0)             # <<<<<<<<<<<<<<
 *         array[new_length-1] = SparseArrayC(key=-2, val=0)
 *         return array
 */
    __pyx_t_5.key = -1;
    __pyx_t_5.val = 0.0;
    (__pyx_v_array[__pyx_v_i]) = __pyx_t_5;
  }

  /* "sparse.pxd":54
 *         for i in range(length, new_length-1):
 *             array[i] = SparseArrayC(key=-1, val=0)
 *         array[new_length-1] = SparseArrayC(key=-2, val=0)             # <<<<<<<<<<<<<<
 *         return array
 * 
 */
  __pyx_t_5.key = -2;
  __pyx_t_5.val = 0.0;
  (__pyx_v_array[(__pyx_v_new_length - 1)]) = __pyx_t_5;

  /* "sparse.pxd":55
 *             array[i] = SparseArrayC(key=-1, val=0)
 *         array[new_length-1] = SparseArrayC(key=-2, val=0)
 *         return array             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_array;
  goto __pyx_L0;

  /* "sparse.pxd":45
 * 
 *     @staticmethod
 *     cdef inline SparseArrayC* resize(SparseArrayC* array) except NULL:             # <<<<<<<<<<<<<<
 *         cdef int length = 0
 *         while array[length].key != -2:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sparse.pxd":58
 * 
 *     @staticmethod
 *     cdef inline int cmp(const void* a, const void* b) nogil:             # <<<<<<<<<<<<<<
 *         # Three-way comparison (I always forget):
 *         # 0 if equal
 */

static CYTHON_INLINE int __pyx_f_5thinc_6linear_6sparse_11SparseArray_cmp(void const *__pyx_v_a, void const *__pyx_v_b) {
  int __pyx_v_key_a;
  int __pyx_v_key_b;
  int __pyx_r;
  int32_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "sparse.pxd":63
 *         # -1 if a before b
 *         # 1 if b before a
 *         cdef int key_a = (<SparseArrayC*>a).key             # <<<<<<<<<<<<<<
 *         cdef int key_b = (<SparseArrayC*>b).key
 *         if key_a == key_b:
 */
  __pyx_t_1 = ((struct __pyx_t_5thinc_7structs_SparseArrayC *)__pyx_v_a)->key;
  __pyx_v_key_a = __pyx_t_1;

  /* "sparse.pxd":64
 *         # 1 if b before a
 *         cdef int key_a = (<SparseArrayC*>a).key
 *         cdef int key_b = (<SparseArrayC*>b).key             # <<<<<<<<<<<<<<
 *         if key_a == key_b:
 *             return 0
 */
  __pyx_t_1 = ((struct __pyx_t_5thinc_7structs_SparseArrayC *)__pyx_v_b)->key;
  __pyx_v_key_b = __pyx_t_1;

  /* "sparse.pxd":65
 *         cdef int key_a = (<SparseArrayC*>a).key
 *         cdef int key_b = (<SparseArrayC*>b).key
 *         if key_a == key_b:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif key_a < 0 or key_b < 0:
 */
  __pyx_t_2 = ((__pyx_v_key_a == __pyx_v_key_b) != 0);
  if (__pyx_t_2) {

    /* "sparse.pxd":66
 *         cdef int key_b = (<SparseArrayC*>b).key
 *         if key_a == key_b:
 *             return 0             # <<<<<<<<<<<<<<
 *         elif key_a < 0 or key_b < 0:
 *             return -1 if a > b else 1 # Sort negatives to the end
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "sparse.pxd":65
 *         cdef int key_a = (<SparseArrayC*>a).key
 *         cdef int key_b = (<SparseArrayC*>b).key
 *         if key_a == key_b:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif key_a < 0 or key_b < 0:
 */
  }

  /* "sparse.pxd":67
 *         if key_a == key_b:
 *             return 0
 *         elif key_a < 0 or key_b < 0:             # <<<<<<<<<<<<<<
 *             return -1 if a > b else 1 # Sort negatives to the end
 *         else:
 */
  __pyx_t_3 = ((__pyx_v_key_a < 0) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_key_b < 0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "sparse.pxd":68
 *             return 0
 *         elif key_a < 0 or key_b < 0:
 *             return -1 if a > b else 1 # Sort negatives to the end             # <<<<<<<<<<<<<<
 *         else:
 *             return -1 if a < b else 1
 */
    if (((__pyx_v_a > __pyx_v_b) != 0)) {
      __pyx_t_4 = -1;
    } else {
      __pyx_t_4 = 1;
    }
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;

    /* "sparse.pxd":67
 *         if key_a == key_b:
 *             return 0
 *         elif key_a < 0 or key_b < 0:             # <<<<<<<<<<<<<<
 *             return -1 if a > b else 1 # Sort negatives to the end
 *         else:
 */
  }

  /* "sparse.pxd":70
 *             return -1 if a > b else 1 # Sort negatives to the end
 *         else:
 *             return -1 if a < b else 1             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    if (((__pyx_v_a < __pyx_v_b) != 0)) {
      __pyx_t_4 = -1;
    } else {
      __pyx_t_4 = 1;
    }
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;
  }

  /* "sparse.pxd":58
 * 
 *     @staticmethod
 *     cdef inline int cmp(const void* a, const void* b) nogil:             # <<<<<<<<<<<<<<
 *         # Three-way comparison (I always forget):
 *         # 0 if equal
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "extra/eg.pxd":19
 * 
 *     @staticmethod
 *     cdef inline Example from_ptr(ExampleC* ptr):             # <<<<<<<<<<<<<<
 *         cdef Example eg = Example.__new__(Example)
 *         eg.c = ptr[0]
 */

static CYTHON_INLINE struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_f_5thinc_5extra_2eg_7Example_from_ptr(struct __pyx_t_5thinc_7structs_ExampleC *__pyx_v_ptr) {
  struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_v_eg = 0;
  struct __pyx_obj_5thinc_5extra_2eg_Example *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "extra/eg.pxd":20
 *     @staticmethod
 *     cdef inline Example from_ptr(ExampleC* ptr):
 *         cdef Example eg = Example.__new__(Example)             # <<<<<<<<<<<<<<
 *         eg.c = ptr[0]
 *         return eg
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5thinc_5extra_2eg_Example), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5thinc_5extra_2eg_Example)))) __PYX_ERR(3, 20, __pyx_L1_error)
  __pyx_v_eg = ((struct __pyx_obj_5thinc_5extra_2eg_Example *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "extra/eg.pxd":21
 *     cdef inline Example from_ptr(ExampleC* ptr):
 *         cdef Example eg = Example.__new__(Example)
 *         eg.c = ptr[0]             # <<<<<<<<<<<<<<
 *         return eg
 */
  __pyx_v_eg->c = (__pyx_v_ptr[0]);

  /* "extra/eg.pxd":22
 *         cdef Example eg = Example.__new__(Example)
 *         eg.c = ptr[0]
 *         return eg             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_eg));
  __pyx_r = __pyx_v_eg;
  goto __pyx_L0;

  /* "extra/eg.pxd":19
 * 
 *     @staticmethod
 *     cdef inline Example from_ptr(ExampleC* ptr):             # <<<<<<<<<<<<<<
 *         cdef Example eg = Example.__new__(Example)
 *         eg.c = ptr[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.extra.eg.Example.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_eg);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "extra/mb.pxd":9
 * 
 *     @staticmethod
 *     cdef inline take_ownership(MinibatchC* mb):             # <<<<<<<<<<<<<<
 *         cdef Minibatch self = Minibatch.__new__(Minibatch)
 *         self.c = mb
 */

static CYTHON_INLINE PyObject *__pyx_f_5thinc_5extra_2mb_9Minibatch_take_ownership(__pyx_t_5thinc_7structs_MinibatchC *__pyx_v_mb) {
  struct __pyx_obj_5thinc_5extra_2mb_Minibatch *__pyx_v_self = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("take_ownership", 0);

  /* "extra/mb.pxd":10
 *     @staticmethod
 *     cdef inline take_ownership(MinibatchC* mb):
 *         cdef Minibatch self = Minibatch.__new__(Minibatch)             # <<<<<<<<<<<<<<
 *         self.c = mb
 *         return self
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5thinc_5extra_2mb_Minibatch), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5thinc_5extra_2mb_Minibatch)))) __PYX_ERR(4, 10, __pyx_L1_error)
  __pyx_v_self = ((struct __pyx_obj_5thinc_5extra_2mb_Minibatch *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "extra/mb.pxd":11
 *     cdef inline take_ownership(MinibatchC* mb):
 *         cdef Minibatch self = Minibatch.__new__(Minibatch)
 *         self.c = mb             # <<<<<<<<<<<<<<
 *         return self
 */
  __pyx_v_self->c = __pyx_v_mb;

  /* "extra/mb.pxd":12
 *         cdef Minibatch self = Minibatch.__new__(Minibatch)
 *         self.c = mb
 *         return self             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "extra/mb.pxd":9
 * 
 *     @staticmethod
 *     cdef inline take_ownership(MinibatchC* mb):             # <<<<<<<<<<<<<<
 *         cdef Minibatch self = Minibatch.__new__(Minibatch)
 *         self.c = mb
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.extra.mb.Minibatch.take_ownership", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5thinc_6linear_7avgtron_AveragedPerceptron __pyx_vtable_5thinc_6linear_7avgtron_AveragedPerceptron;

static PyObject *__pyx_tp_new_5thinc_6linear_7avgtron_AveragedPerceptron(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)o);
  p->__pyx_vtab = __pyx_vtabptr_5thinc_6linear_7avgtron_AveragedPerceptron;
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  p->weights = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  p->averages = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  p->lasso_ledger = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  p->extracter = ((struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5thinc_6linear_7avgtron_AveragedPerceptron(PyObject *o) {
  struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *p = (struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mem);
  Py_CLEAR(p->weights);
  Py_CLEAR(p->averages);
  Py_CLEAR(p->lasso_ledger);
  Py_CLEAR(p->extracter);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5thinc_6linear_7avgtron_AveragedPerceptron(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *p = (struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)o;
  if (p->mem) {
    e = (*v)(((PyObject *)p->mem), a); if (e) return e;
  }
  if (p->weights) {
    e = (*v)(((PyObject *)p->weights), a); if (e) return e;
  }
  if (p->averages) {
    e = (*v)(((PyObject *)p->averages), a); if (e) return e;
  }
  if (p->lasso_ledger) {
    e = (*v)(((PyObject *)p->lasso_ledger), a); if (e) return e;
  }
  if (p->extracter) {
    e = (*v)(((PyObject *)p->extracter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5thinc_6linear_7avgtron_AveragedPerceptron(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *p = (struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->weights);
  p->weights = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->averages);
  p->averages = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lasso_ledger);
  p->lasso_ledger = ((struct __pyx_obj_7preshed_4maps_PreshMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->extracter);
  p->extracter = ((struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_L1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_2L1_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_nr_active_feat(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_14nr_active_feat_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_nr_weight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_9nr_weight_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_nr_feat(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7nr_feat_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_mem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_3mem_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_weights(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7weights_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_averages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8averages_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_lasso_ledger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_12lasso_ledger_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_1__get__(o);
}

static int __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_4time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_learn_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_1__get__(o);
}

static int __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_learn_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10learn_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_l1_penalty(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_1__get__(o);
}

static int __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_l1_penalty(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_10l1_penalty_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_momentum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_1__get__(o);
}

static int __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_momentum(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_8momentum_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5thinc_6linear_7avgtron_AveragedPerceptron[] = {
  {"update", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_7update, METH_O, 0},
  {"dump", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_9dump, METH_O, 0},
  {"load", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_11load, METH_O, 0},
  {"apply_owed_L1", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_13apply_owed_L1, METH_NOARGS, 0},
  {"end_training", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_15end_training, METH_NOARGS, 0},
  {"with_averages", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_17with_averages, METH_NOARGS, 0},
  {"resume_training", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_19resume_training, METH_NOARGS, 0},
  {"update_weight", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_21update_weight, METH_VARARGS|METH_KEYWORDS, 0},
  {"update_weight_ftrl", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_23update_weight_ftrl, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5thinc_6linear_7avgtron_AveragedPerceptron[] = {
  {(char *)"L1", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_L1, 0, (char *)0, 0},
  {(char *)"nr_active_feat", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_nr_active_feat, 0, (char *)0, 0},
  {(char *)"nr_weight", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_nr_weight, 0, (char *)0, 0},
  {(char *)"nr_feat", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_nr_feat, 0, (char *)0, 0},
  {(char *)"mem", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_mem, 0, (char *)0, 0},
  {(char *)"weights", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_weights, 0, (char *)0, 0},
  {(char *)"averages", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_averages, 0, (char *)0, 0},
  {(char *)"lasso_ledger", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_lasso_ledger, 0, (char *)0, 0},
  {(char *)"time", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_time, __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_time, (char *)0, 0},
  {(char *)"learn_rate", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_learn_rate, __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_learn_rate, (char *)0, 0},
  {(char *)"l1_penalty", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_l1_penalty, __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_l1_penalty, (char *)0, 0},
  {(char *)"momentum", __pyx_getprop_5thinc_6linear_7avgtron_18AveragedPerceptron_momentum, __pyx_setprop_5thinc_6linear_7avgtron_18AveragedPerceptron_momentum, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron = {
  PyVarObject_HEAD_INIT(0, 0)
  "thinc.linear.avgtron.AveragedPerceptron", /*tp_name*/
  sizeof(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5thinc_6linear_7avgtron_AveragedPerceptron, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A linear model for online supervised classification.\n    Expected use is via Cython --- the Python API is impoverished and inefficient.\n\n    Emphasis is on efficiency for multi-class classification, where the number\n    of classes is in the dozens or low hundreds.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5thinc_6linear_7avgtron_AveragedPerceptron, /*tp_traverse*/
  __pyx_tp_clear_5thinc_6linear_7avgtron_AveragedPerceptron, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5thinc_6linear_7avgtron_AveragedPerceptron, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5thinc_6linear_7avgtron_AveragedPerceptron, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5thinc_6linear_7avgtron_18AveragedPerceptron_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5thinc_6linear_7avgtron_AveragedPerceptron, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_avgtron(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_avgtron},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "avgtron",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AverageHelper, __pyx_k_AverageHelper, sizeof(__pyx_k_AverageHelper), 0, 0, 1, 1},
  {&__pyx_n_s_AverageHelper___enter, __pyx_k_AverageHelper___enter, sizeof(__pyx_k_AverageHelper___enter), 0, 0, 1, 1},
  {&__pyx_n_s_AverageHelper___exit, __pyx_k_AverageHelper___exit, sizeof(__pyx_k_AverageHelper___exit), 0, 0, 1, 1},
  {&__pyx_n_s_AverageHelper___init, __pyx_k_AverageHelper___init, sizeof(__pyx_k_AverageHelper___init), 0, 0, 1, 1},
  {&__pyx_n_s_AveragedPerceptron, __pyx_k_AveragedPerceptron, sizeof(__pyx_k_AveragedPerceptron), 0, 0, 1, 1},
  {&__pyx_kp_s_Error_allocating_memory_for_feat, __pyx_k_Error_allocating_memory_for_feat, sizeof(__pyx_k_Error_allocating_memory_for_feat), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xec, __pyx_k_Incompatible_checksums_s_vs_0xec, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xec), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 0, 1, 1},
  {&__pyx_n_s_apply_owed_L1, __pyx_k_apply_owed_L1, sizeof(__pyx_k_apply_owed_L1), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_avg, __pyx_k_avg, sizeof(__pyx_k_avg), 0, 0, 1, 1},
  {&__pyx_n_s_avg_i, __pyx_k_avg_i, sizeof(__pyx_k_avg_i), 0, 0, 1, 1},
  {&__pyx_kp_s_avgtron_pyx, __pyx_k_avgtron_pyx, sizeof(__pyx_k_avgtron_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_capacity, __pyx_k_capacity, sizeof(__pyx_k_capacity), 0, 0, 1, 1},
  {&__pyx_n_s_clas, __pyx_k_clas, sizeof(__pyx_k_clas), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_eg_or_mb, __pyx_k_eg_or_mb, sizeof(__pyx_k_eg_or_mb), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_feat, __pyx_k_feat, sizeof(__pyx_k_feat), 0, 0, 1, 1},
  {&__pyx_n_s_feat_addr, __pyx_k_feat_addr, sizeof(__pyx_k_feat_addr), 0, 0, 1, 1},
  {&__pyx_n_s_feat_id, __pyx_k_feat_id, sizeof(__pyx_k_feat_id), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_grad, __pyx_k_grad, sizeof(__pyx_k_grad), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_l1_penalty, __pyx_k_l1_penalty, sizeof(__pyx_k_l1_penalty), 0, 0, 1, 1},
  {&__pyx_n_s_learn_rate, __pyx_k_learn_rate, sizeof(__pyx_k_learn_rate), 0, 0, 1, 1},
  {&__pyx_n_s_loss, __pyx_k_loss, sizeof(__pyx_k_loss), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_momentum, __pyx_k_momentum, sizeof(__pyx_k_momentum), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_AveragedPerceptro, __pyx_k_pyx_unpickle_AveragedPerceptro, sizeof(__pyx_k_pyx_unpickle_AveragedPerceptro), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_resume_training, __pyx_k_resume_training, sizeof(__pyx_k_resume_training), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_templates, __pyx_k_templates, sizeof(__pyx_k_templates), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thinc_linear_avgtron, __pyx_k_thinc_linear_avgtron, sizeof(__pyx_k_thinc_linear_avgtron), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_weight, __pyx_k_update_weight, sizeof(__pyx_k_update_weight), 0, 0, 1, 1},
  {&__pyx_n_s_update_weight_ftrl, __pyx_k_update_weight_ftrl, sizeof(__pyx_k_update_weight_ftrl), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 157, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "thinc/linear/avgtron.pyx":329
 *         #self.lasso_ledger.set(feat_id, <void*><size_t>l1_paid)
 * 
 * class _AverageHelper(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, model):
 *         self.model = model
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "thinc/linear/avgtron.pyx":330
 * 
 * class _AverageHelper(object):
 *     def __init__(self, model):             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_model); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_avgtron_pyx, __pyx_n_s_init, 330, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 330, __pyx_L1_error)

  /* "thinc/linear/avgtron.pyx":333
 *         self.model = model
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         cdef AveragedPerceptron model = self.model
 */
  __pyx_tuple__4 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_feat_addr, __pyx_n_s_model, __pyx_n_s_feat_id, __pyx_n_s_feat, __pyx_n_s_W, __pyx_n_s_avg, __pyx_n_s_avg_i); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_avgtron_pyx, __pyx_n_s_enter, 333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 333, __pyx_L1_error)

  /* "thinc/linear/avgtron.pyx":349
 *                     avg += 1
 * 
 *     def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef AveragedPerceptron model = self.model
 *         cdef size_t feat_addr
 */
  __pyx_tuple__6 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_model, __pyx_n_s_feat_addr, __pyx_n_s_feat_id, __pyx_n_s_feat, __pyx_n_s_W, __pyx_n_s_avg, __pyx_n_s_avg_i); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_avgtron_pyx, __pyx_n_s_exit, 349, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 349, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_AveragedPerceptron(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__8 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_AveragedPerceptro, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_9 = PyFloat_FromDouble(0.9); if (unlikely(!__pyx_float_0_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_8 = PyFloat_FromDouble(1e-8); if (unlikely(!__pyx_float_1eneg_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_001 = PyFloat_FromDouble(0.001); if (unlikely(!__pyx_float_0_001)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_247848399 = PyInt_FromLong(247848399L); if (unlikely(!__pyx_int_247848399)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5thinc_6linear_7avgtron_AveragedPerceptron = &__pyx_vtable_5thinc_6linear_7avgtron_AveragedPerceptron;
  __pyx_vtable_5thinc_6linear_7avgtron_AveragedPerceptron.set_scoresC = (void (*)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, __pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_t_5thinc_7structs_FeatureC const *, int))__pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_set_scoresC;
  __pyx_vtable_5thinc_6linear_7avgtron_AveragedPerceptron.updateC = (int (*)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, struct __pyx_t_5thinc_7structs_ExampleC const *))__pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_updateC;
  __pyx_vtable_5thinc_6linear_7avgtron_AveragedPerceptron.update_weight = (int (*)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, __pyx_t_5thinc_8typedefs_feat_t, __pyx_t_5thinc_8typedefs_class_t, __pyx_t_5thinc_8typedefs_weight_t, int __pyx_skip_dispatch))__pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight;
  __pyx_vtable_5thinc_6linear_7avgtron_AveragedPerceptron.update_weight_ftrl = (int (*)(struct __pyx_obj_5thinc_6linear_7avgtron_AveragedPerceptron *, __pyx_t_5thinc_8typedefs_feat_t, __pyx_t_5thinc_8typedefs_class_t, __pyx_t_5thinc_8typedefs_weight_t, int __pyx_skip_dispatch))__pyx_f_5thinc_6linear_7avgtron_18AveragedPerceptron_update_weight_ftrl;
  if (PyType_Ready(&__pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron.tp_dictoffset && __pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron.tp_dict, __pyx_vtabptr_5thinc_6linear_7avgtron_AveragedPerceptron) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AveragedPerceptron, (PyObject *)&__pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_ptype_5thinc_6linear_7avgtron_AveragedPerceptron = &__pyx_type_5thinc_6linear_7avgtron_AveragedPerceptron;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cymem.cymem"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5cymem_5cymem_PyMalloc = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "PyMalloc", sizeof(struct __pyx_obj_5cymem_5cymem_PyMalloc), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_PyMalloc) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_PyMalloc = (struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_PyMalloc->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_PyMalloc)) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_PyFree = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "PyFree", sizeof(struct __pyx_obj_5cymem_5cymem_PyFree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_PyFree) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_PyFree = (struct __pyx_vtabstruct_5cymem_5cymem_PyFree*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_PyFree->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_PyFree)) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_Pool) __PYX_ERR(5, 16, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) __PYX_ERR(5, 16, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_Address) __PYX_ERR(5, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("preshed.maps"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7preshed_4maps_PreshMap = __Pyx_ImportType(__pyx_t_1, "preshed.maps", "PreshMap", sizeof(struct __pyx_obj_7preshed_4maps_PreshMap), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7preshed_4maps_PreshMap) __PYX_ERR(6, 41, __pyx_L1_error)
  __pyx_vtabptr_7preshed_4maps_PreshMap = (struct __pyx_vtabstruct_7preshed_4maps_PreshMap*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMap->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMap)) __PYX_ERR(6, 41, __pyx_L1_error)
  __pyx_ptype_7preshed_4maps_PreshMapArray = __Pyx_ImportType(__pyx_t_1, "preshed.maps", "PreshMapArray", sizeof(struct __pyx_obj_7preshed_4maps_PreshMapArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7preshed_4maps_PreshMapArray) __PYX_ERR(6, 49, __pyx_L1_error)
  __pyx_vtabptr_7preshed_4maps_PreshMapArray = (struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMapArray->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMapArray)) __PYX_ERR(6, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thinc.linalg"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5thinc_6linalg_Matrix = __Pyx_ImportType(__pyx_t_1, "thinc.linalg", "Matrix", sizeof(struct __pyx_obj_5thinc_6linalg_Matrix), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linalg_Matrix) __PYX_ERR(7, 22, __pyx_L1_error)
  __pyx_ptype_5thinc_6linalg_Vec = __Pyx_ImportType(__pyx_t_1, "thinc.linalg", "Vec", sizeof(struct __pyx_obj_5thinc_6linalg_Vec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linalg_Vec) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_vtabptr_5thinc_6linalg_Vec = (struct __pyx_vtabstruct_5thinc_6linalg_Vec*)__Pyx_GetVtable(__pyx_ptype_5thinc_6linalg_Vec->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6linalg_Vec)) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_ptype_5thinc_6linalg_VecVec = __Pyx_ImportType(__pyx_t_1, "thinc.linalg", "VecVec", sizeof(struct __pyx_obj_5thinc_6linalg_VecVec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linalg_VecVec) __PYX_ERR(7, 158, __pyx_L1_error)
  __pyx_vtabptr_5thinc_6linalg_VecVec = (struct __pyx_vtabstruct_5thinc_6linalg_VecVec*)__Pyx_GetVtable(__pyx_ptype_5thinc_6linalg_VecVec->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6linalg_VecVec)) __PYX_ERR(7, 158, __pyx_L1_error)
  __pyx_ptype_5thinc_6linalg_Mat = __Pyx_ImportType(__pyx_t_1, "thinc.linalg", "Mat", sizeof(struct __pyx_obj_5thinc_6linalg_Mat), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linalg_Mat) __PYX_ERR(7, 249, __pyx_L1_error)
  __pyx_vtabptr_5thinc_6linalg_Mat = (struct __pyx_vtabstruct_5thinc_6linalg_Mat*)__Pyx_GetVtable(__pyx_ptype_5thinc_6linalg_Mat->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6linalg_Mat)) __PYX_ERR(7, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thinc.linear.features"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5thinc_6linear_8features_ConjunctionExtracter = __Pyx_ImportType(__pyx_t_1, "thinc.linear.features", "ConjunctionExtracter", sizeof(struct __pyx_obj_5thinc_6linear_8features_ConjunctionExtracter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linear_8features_ConjunctionExtracter) __PYX_ERR(8, 7, __pyx_L1_error)
  __pyx_vtabptr_5thinc_6linear_8features_ConjunctionExtracter = (struct __pyx_vtabstruct_5thinc_6linear_8features_ConjunctionExtracter*)__Pyx_GetVtable(__pyx_ptype_5thinc_6linear_8features_ConjunctionExtracter->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6linear_8features_ConjunctionExtracter)) __PYX_ERR(8, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thinc.linear.sparse"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5thinc_6linear_6sparse_SparseArray = __Pyx_ImportType(__pyx_t_1, "thinc.linear.sparse", "SparseArray", sizeof(struct __pyx_obj_5thinc_6linear_6sparse_SparseArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linear_6sparse_SparseArray) __PYX_ERR(10, 8, __pyx_L1_error)
  __pyx_vtabptr_5thinc_6linear_6sparse_SparseArray = (struct __pyx_vtabstruct_5thinc_6linear_6sparse_SparseArray*)__Pyx_GetVtable(__pyx_ptype_5thinc_6linear_6sparse_SparseArray->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6linear_6sparse_SparseArray)) __PYX_ERR(10, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thinc.extra.eg"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5thinc_5extra_2eg_Example = __Pyx_ImportType(__pyx_t_1, "thinc.extra.eg", "Example", sizeof(struct __pyx_obj_5thinc_5extra_2eg_Example), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_5extra_2eg_Example) __PYX_ERR(3, 14, __pyx_L1_error)
  __pyx_vtabptr_5thinc_5extra_2eg_Example = (struct __pyx_vtabstruct_5thinc_5extra_2eg_Example*)__Pyx_GetVtable(__pyx_ptype_5thinc_5extra_2eg_Example->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_5extra_2eg_Example)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thinc.extra.mb"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5thinc_5extra_2mb_Minibatch = __Pyx_ImportType(__pyx_t_1, "thinc.extra.mb", "Minibatch", sizeof(struct __pyx_obj_5thinc_5extra_2mb_Minibatch), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_5extra_2mb_Minibatch) __PYX_ERR(4, 5, __pyx_L1_error)
  __pyx_vtabptr_5thinc_5extra_2mb_Minibatch = (struct __pyx_vtabstruct_5thinc_5extra_2mb_Minibatch*)__Pyx_GetVtable(__pyx_ptype_5thinc_5extra_2mb_Minibatch->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_5extra_2mb_Minibatch)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thinc.linear.serialize"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5thinc_6linear_9serialize_Writer = __Pyx_ImportType(__pyx_t_1, "thinc.linear.serialize", "Writer", sizeof(struct __pyx_obj_5thinc_6linear_9serialize_Writer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linear_9serialize_Writer) __PYX_ERR(11, 10, __pyx_L1_error)
  __pyx_vtabptr_5thinc_6linear_9serialize_Writer = (struct __pyx_vtabstruct_5thinc_6linear_9serialize_Writer*)__Pyx_GetVtable(__pyx_ptype_5thinc_6linear_9serialize_Writer->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6linear_9serialize_Writer)) __PYX_ERR(11, 10, __pyx_L1_error)
  __pyx_ptype_5thinc_6linear_9serialize_Reader = __Pyx_ImportType(__pyx_t_1, "thinc.linear.serialize", "Reader", sizeof(struct __pyx_obj_5thinc_6linear_9serialize_Reader), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5thinc_6linear_9serialize_Reader) __PYX_ERR(11, 16, __pyx_L1_error)
  __pyx_vtabptr_5thinc_6linear_9serialize_Reader = (struct __pyx_vtabstruct_5thinc_6linear_9serialize_Reader*)__Pyx_GetVtable(__pyx_ptype_5thinc_6linear_9serialize_Reader->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6linear_9serialize_Reader)) __PYX_ERR(11, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("preshed.maps"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "map_get", (void (**)(void))&__pyx_f_7preshed_4maps_map_get, "void *(struct __pyx_t_7preshed_4maps_MapStruct const *, __pyx_t_7preshed_4maps_key_t const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "map_set", (void (**)(void))&__pyx_f_7preshed_4maps_map_set, "void (struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, __pyx_t_7preshed_4maps_key_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "map_init", (void (**)(void))&__pyx_f_7preshed_4maps_map_init, "void (struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = PyImport_ImportModule("murmurhash.mrmr"); if (!__pyx_t_2) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "real_hash64", (void (**)(void))&__pyx_f_10murmurhash_4mrmr_real_hash64, "uint64_t (void *, int, uint64_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initavgtron(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initavgtron(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_avgtron(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_avgtron(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_avgtron(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'avgtron' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_avgtron(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("avgtron", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_thinc__linear__avgtron) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "thinc.linear.avgtron")) {
      if (unlikely(PyDict_SetItemString(modules, "thinc.linear.avgtron", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "thinc/linear/avgtron.pyx":4
 * # cython: cdivision=True
 * cimport cython
 * from os import path             # <<<<<<<<<<<<<<
 * from cpython.mem cimport PyMem_Free, PyMem_Malloc
 * from cpython.exc cimport PyErr_CheckSignals
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_path);
  __Pyx_GIVEREF(__pyx_n_s_path);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_path);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_os, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_path, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":329
 *         #self.lasso_ledger.set(feat_id, <void*><size_t>l1_paid)
 * 
 * class _AverageHelper(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, model):
 *         self.model = model
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple_, __pyx_n_s_AverageHelper, __pyx_n_s_AverageHelper, (PyObject *) NULL, __pyx_n_s_thinc_linear_avgtron, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "thinc/linear/avgtron.pyx":330
 * 
 * class _AverageHelper(object):
 *     def __init__(self, model):             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5thinc_6linear_7avgtron_14_AverageHelper_1__init__, 0, __pyx_n_s_AverageHelper___init, NULL, __pyx_n_s_thinc_linear_avgtron, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_3) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "thinc/linear/avgtron.pyx":333
 *         self.model = model
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t feat_addr
 *         cdef AveragedPerceptron model = self.model
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5thinc_6linear_7avgtron_14_AverageHelper_3__enter__, 0, __pyx_n_s_AverageHelper___enter, NULL, __pyx_n_s_thinc_linear_avgtron, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_enter, __pyx_t_3) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "thinc/linear/avgtron.pyx":349
 *                     avg += 1
 * 
 *     def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef AveragedPerceptron model = self.model
 *         cdef size_t feat_addr
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5thinc_6linear_7avgtron_14_AverageHelper_5__exit__, 0, __pyx_n_s_AverageHelper___exit, NULL, __pyx_n_s_thinc_linear_avgtron, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_exit, __pyx_t_3) < 0) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "thinc/linear/avgtron.pyx":329
 *         #self.lasso_ledger.set(feat_id, <void*><size_t>l1_paid)
 * 
 * class _AverageHelper(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, model):
 *         self.model = model
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_AverageHelper, __pyx_tuple_, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AverageHelper, __pyx_t_3) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_AveragedPerceptron(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5thinc_6linear_7avgtron_1__pyx_unpickle_AveragedPerceptron, NULL, __pyx_n_s_thinc_linear_avgtron); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_AveragedPerceptro, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/linear/avgtron.pyx":1
 * # cython: infer_types=True             # <<<<<<<<<<<<<<
 * # cython: cdivision=True
 * cimport cython
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "extra/mb.pxd":9
 * 
 *     @staticmethod
 *     cdef inline take_ownership(MinibatchC* mb):             # <<<<<<<<<<<<<<
 *         cdef Minibatch self = Minibatch.__new__(Minibatch)
 *         self.c = mb
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init thinc.linear.avgtron", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init thinc.linear.avgtron");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_RemainderObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value) {
    const int32_t neg_one = (int32_t) ((int32_t) 0 - (int32_t) 1), const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* ToPyCTupleUtility */
static PyObject* __pyx_convert__to_py___pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc(__pyx_ctuple_e1ed2____dunderpyx_t_5thinc_8typedefs_feat_t__and___dunderpyx_t_5thinc_8typedefs_class_t__and___dunderpyx_t_5thinc_8typedefs_weight_t__etc value) {
    PyObject* item = NULL;
    PyObject* result = PyTuple_New(3);
    if (!result) goto bad;
        item = __Pyx_PyInt_From_uint64_t(value.f0);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 0, item);
        item = __Pyx_PyInt_From_int32_t(value.f1);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 1, item);
        item = PyFloat_FromDouble(value.f2);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 2, item);
    return result;
bad:
    Py_XDECREF(item);
    Py_XDECREF(result);
    return NULL;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) ((int32_t) 0 - (int32_t) 1), const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 2 * PyLong_SHIFT) {
                            return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 3 * PyLong_SHIFT) {
                            return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 4 * PyLong_SHIFT) {
                            return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) ((((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) ((((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) ((((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
